/**
 * generated by Xtext 2.14.0
 */
package ac.soton.xeventb.camillex.tests;

import ac.soton.xeventb.camillex.tests.EventBComponentInjectorProvider;
import ac.soton.xeventb.internal.camillex.tests.AssertContextExtensions;
import ac.soton.xeventb.internal.camillex.tests.AssertExtensions;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eventb.emf.core.EventBNamedCommentedComponentElement;
import org.eventb.emf.core.context.Context;
import org.junit.Assert;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(EventBComponentInjectorProvider.class)
@SuppressWarnings("all")
public class ContextParsingTest {
  @Inject
  @Extension
  private ParseHelper<EventBNamedCommentedComponentElement> parseHelper;
  
  @Extension
  private AssertExtensions _assertExtensions = new AssertExtensions();
  
  @Extension
  private AssertContextExtensions _assertContextExtensions = new AssertContextExtensions();
  
  /**
   * Manually register any EPackage required for running the tests.
   */
  @Before
  public void registerEPackages() {
    this._assertContextExtensions.registerContextEPackage();
  }
  
  @Test
  public void testContextClauseSuccessful() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx);
      this._assertContextExtensions.assertContextConstants(ctx);
      this._assertContextExtensions.assertContextAxioms(ctx);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testContextClauseSuccessful_ML_COMMENT() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/* ");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* Multi-line");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("* comments");
      _builder.newLine();
      _builder.append(" ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx);
      this._assertContextExtensions.assertContextConstants(ctx);
      this._assertContextExtensions.assertContextAxioms(ctx);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testContextClauseSuccessful_SL_COMMENT() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("// Single-line comment");
      _builder.newLine();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx);
      this._assertContextExtensions.assertContextConstants(ctx);
      this._assertContextExtensions.assertContextAxioms(ctx);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testContextClauseFailed_ErrornousName() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context 0c");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertNotEmpty(errors);
      this._assertExtensions.assertLength(errors, 1);
      this._assertExtensions.assertErrorDetails(errors.get(0), 
        "extraneous input \'0\' expecting RULE_ID", null, 9, 1);
      Assert.assertTrue((result instanceof Context));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSetsClauseSuccessful_Sets1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("sets S");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx, "S:");
      this._assertContextExtensions.assertContextConstants(ctx);
      this._assertContextExtensions.assertContextAxioms(ctx);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSetsClauseSuccessful_Sets2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("sets S T");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx, "S:", "T:");
      this._assertContextExtensions.assertContextConstants(ctx);
      this._assertContextExtensions.assertContextAxioms(ctx);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSetsClauseSuccessful_Constants1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("constants a");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx);
      this._assertContextExtensions.assertContextConstants(ctx, "a:");
      this._assertContextExtensions.assertContextAxioms(ctx);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSetsClauseSuccessful_Constants2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("constants a b");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx);
      this._assertContextExtensions.assertContextConstants(ctx, "a:", "b:");
      this._assertContextExtensions.assertContextAxioms(ctx);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSetsClauseSuccessful_Axioms1() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("axioms ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@axm1: a ∈ S");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx);
      this._assertContextExtensions.assertContextConstants(ctx);
      this._assertContextExtensions.assertContextAxioms(ctx, "axm1:a ∈ S:false:");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSetsClauseSuccessful_Axioms2() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("context c0");
      _builder.newLine();
      _builder.append("axioms ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@axm1: a ∈ S");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@axm2: b ∈ T");
      _builder.newLine();
      _builder.append("end");
      _builder.newLine();
      final String testInput = _builder.toString();
      final EventBNamedCommentedComponentElement result = this.parseHelper.parse(testInput);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      this._assertExtensions.assertEmpty(errors);
      Assert.assertTrue((result instanceof Context));
      Context ctx = ((Context) result);
      this._assertContextExtensions.assertContext(ctx, "c0", null);
      this._assertContextExtensions.assertContextExtendsNames(ctx);
      this._assertContextExtensions.assertContextSets(ctx);
      this._assertContextExtensions.assertContextConstants(ctx);
      this._assertContextExtensions.assertContextAxioms(ctx, "axm1:a ∈ S:false:", "axm2:b ∈ T:false:");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
