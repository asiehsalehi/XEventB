/*
 * generated by Xtext 2.14.0
 */
package ac.soton.xeventb.camillex.serializer;

import ac.soton.eventb.emf.inclusion.EventSynchronisation;
import ac.soton.eventb.emf.inclusion.InclusionPackage;
import ac.soton.eventb.emf.inclusion.MachineInclusion;
import ac.soton.xeventb.camillex.services.EventBComponentGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eventb.emf.core.CorePackage;
import org.eventb.emf.core.context.Axiom;
import org.eventb.emf.core.context.CarrierSet;
import org.eventb.emf.core.context.Constant;
import org.eventb.emf.core.context.Context;
import org.eventb.emf.core.context.ContextPackage;
import org.eventb.emf.core.machine.Event;
import org.eventb.emf.core.machine.Guard;
import org.eventb.emf.core.machine.Invariant;
import org.eventb.emf.core.machine.Machine;
import org.eventb.emf.core.machine.MachinePackage;
import org.eventb.emf.core.machine.Variable;
import org.eventb.emf.core.machine.Variant;
import org.eventb.emf.core.machine.Witness;

@SuppressWarnings("all")
public class EventBComponentSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EventBComponentGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ContextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ContextPackage.AXIOM:
				sequence_Axiom(context, (Axiom) semanticObject); 
				return; 
			case ContextPackage.CARRIER_SET:
				sequence_CarrierSet(context, (CarrierSet) semanticObject); 
				return; 
			case ContextPackage.CONSTANT:
				sequence_Constant(context, (Constant) semanticObject); 
				return; 
			case ContextPackage.CONTEXT:
				sequence_Context(context, (Context) semanticObject); 
				return; 
			}
		else if (epackage == InclusionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case InclusionPackage.EVENT_SYNCHRONISATION:
				sequence_EventSync(context, (EventSynchronisation) semanticObject); 
				return; 
			case InclusionPackage.MACHINE_INCLUSION:
				sequence_Includes(context, (MachineInclusion) semanticObject); 
				return; 
			}
		else if (epackage == MachinePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MachinePackage.ACTION:
				sequence_Action(context, (org.eventb.emf.core.machine.Action) semanticObject); 
				return; 
			case MachinePackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case MachinePackage.GUARD:
				sequence_Guard(context, (Guard) semanticObject); 
				return; 
			case MachinePackage.INVARIANT:
				sequence_Invariant(context, (Invariant) semanticObject); 
				return; 
			case MachinePackage.MACHINE:
				sequence_Machine(context, (Machine) semanticObject); 
				return; 
			case MachinePackage.PARAMETER:
				sequence_Parameter(context, (org.eventb.emf.core.machine.Parameter) semanticObject); 
				return; 
			case MachinePackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case MachinePackage.VARIANT:
				sequence_Variant(context, (Variant) semanticObject); 
				return; 
			case MachinePackage.WITNESS:
				sequence_Witness(context, (Witness) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (name=LABEL action=XPredicate)
	 */
	protected void sequence_Action(ISerializationContext context, org.eventb.emf.core.machine.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME));
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BACTION__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BACTION__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getNameLABELTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getActionAccess().getActionXPredicateParserRuleCall_2_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Axiom returns Axiom
	 *
	 * Constraint:
	 *     (name=LABEL predicate=XPredicate theorem?='theorem'?)
	 */
	protected void sequence_Axiom(ISerializationContext context, Axiom semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CarrierSet returns CarrierSet
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_CarrierSet(ISerializationContext context, CarrierSet semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCarrierSetAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns Constant
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Constant(ISerializationContext context, Constant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EventBComponent returns Context
	 *     Context returns Context
	 *
	 * Constraint:
	 *     (name=ID extends+=[Context|QualifiedName]* sets+=CarrierSet* constants+=Constant* axioms+=Axiom*)
	 */
	protected void sequence_Context(ISerializationContext context, Context semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventSync returns EventSynchronisation
	 *
	 * Constraint:
	 *     (prefix=ID? synchronisedEvent=[Event|ID])
	 */
	protected void sequence_EventSync(ISerializationContext context, EventSynchronisation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (extended?='extended' | convergence=Convergence)* 
	 *         extensions+=EventSync* 
	 *         refines+=[Event|ID]* 
	 *         (
	 *             (witnesses+=Witness* actions+=Action+) | 
	 *             (guards+=Guard+ witnesses+=Witness* actions+=Action*) | 
	 *             (parameters+=Parameter+ guards+=Guard+ witnesses+=Witness* actions+=Action*)
	 *         )?
	 *     )
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Guard returns Guard
	 *
	 * Constraint:
	 *     (name=LABEL predicate=XPredicate theorem?='theorem'?)
	 */
	protected void sequence_Guard(ISerializationContext context, Guard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Includes returns MachineInclusion
	 *
	 * Constraint:
	 *     (abstractMachine=[Machine|QualifiedName] concreteMachine=[Machine|ID]? (prefixes+=ID prefixes+=ID*)?)
	 */
	protected void sequence_Includes(ISerializationContext context, MachineInclusion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Invariant returns Invariant
	 *
	 * Constraint:
	 *     (name=LABEL predicate=XPredicate theorem?='theorem'?)
	 */
	protected void sequence_Invariant(ISerializationContext context, Invariant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventBComponent returns Machine
	 *     Machine returns Machine
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         extensions+=Includes* 
	 *         refines+=[Machine|ID]? 
	 *         sees+=[Context|ID]* 
	 *         variables+=Variable* 
	 *         invariants+=Invariant* 
	 *         variant=Variant? 
	 *         (events+=Event events+=Event*)?
	 *     )
	 */
	protected void sequence_Machine(ISerializationContext context, Machine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Parameter(ISerializationContext context, org.eventb.emf.core.machine.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variant returns Variant
	 *
	 * Constraint:
	 *     expression=XPredicate
	 */
	protected void sequence_Variant(ISerializationContext context, Variant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BEXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BEXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariantAccess().getExpressionXPredicateParserRuleCall_1_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Witness returns Witness
	 *
	 * Constraint:
	 *     (name=LABEL predicate=XPredicate)
	 */
	protected void sequence_Witness(ISerializationContext context, Witness semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BNAMED__NAME));
			if (transientValues.isValueTransient(semanticObject, CorePackage.Literals.EVENT_BPREDICATE__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CorePackage.Literals.EVENT_BPREDICATE__PREDICATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWitnessAccess().getNameLABELTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWitnessAccess().getPredicateXPredicateParserRuleCall_2_0(), semanticObject.getPredicate());
		feeder.finish();
	}
	
	
}
