/*
 * generated by Xtext 2.14.0
 */
package ac.soton.xeventb.camillex.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EventBComponentGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EventBComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.EventBComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMachineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EventBComponent eventbcore::EventBNamedCommentedComponentElement:
		//	Machine | Context;
		@Override public ParserRule getRule() { return rule; }
		
		//Machine | Context
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Machine
		public RuleCall getMachineParserRuleCall_0() { return cMachineParserRuleCall_0; }
		
		//Context
		public RuleCall getContextParserRuleCall_1() { return cContextParserRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		///*
		// * BEGIN: The terminal rules
		// */ QualifiedName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMachineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cExtensionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExtensionsIncludesParserRuleCall_3_0 = (RuleCall)cExtensionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRefinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRefinesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefinesMachineCrossReference_4_1_0 = (CrossReference)cRefinesAssignment_4_1.eContents().get(0);
		private final RuleCall cRefinesMachineIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefinesMachineCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSeesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSeesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSeesContextCrossReference_5_1_0 = (CrossReference)cSeesAssignment_5_1.eContents().get(0);
		private final RuleCall cSeesContextIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSeesContextCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVariablesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVariablesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_6_1_0 = (RuleCall)cVariablesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInvariantsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInvariantsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cInvariantsInvariantParserRuleCall_7_1_0 = (RuleCall)cInvariantsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVariantKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVariantAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVariantVariantParserRuleCall_8_1_0 = (RuleCall)cVariantAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cEventsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cEventsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_9_1_0 = (RuleCall)cEventsAssignment_9_1.eContents().get(0);
		private final Assignment cEventsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_9_2_0 = (RuleCall)cEventsAssignment_9_2.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		///*
		// * END: The terminal rules
		// */ Machine emachine::Machine:
		//	{emachine::Machine}
		//	'machine' name=ID
		//	extensions+=Includes* ('refines' refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables'
		//	variables+=Variable+)? ('invariants' invariants+=Invariant+)? ('variant' variant=Variant)? ('events' events+=Event
		//	events+=Event*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Machine} 'machine' name=ID extensions+=Includes* ('refines' refines+=[emachine::Machine])? ('sees'
		//sees+=[econtext::Context]+)? ('variables' variables+=Variable+)? ('invariants' invariants+=Invariant+)? ('variant'
		//variant=Variant)? ('events' events+=Event events+=Event*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{emachine::Machine}
		public Action getMachineAction_0() { return cMachineAction_0; }
		
		//'machine'
		public Keyword getMachineKeyword_1() { return cMachineKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//extensions+=Includes*
		public Assignment getExtensionsAssignment_3() { return cExtensionsAssignment_3; }
		
		//Includes
		public RuleCall getExtensionsIncludesParserRuleCall_3_0() { return cExtensionsIncludesParserRuleCall_3_0; }
		
		//('refines' refines+=[emachine::Machine])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'refines'
		public Keyword getRefinesKeyword_4_0() { return cRefinesKeyword_4_0; }
		
		//refines+=[emachine::Machine]
		public Assignment getRefinesAssignment_4_1() { return cRefinesAssignment_4_1; }
		
		//[emachine::Machine]
		public CrossReference getRefinesMachineCrossReference_4_1_0() { return cRefinesMachineCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRefinesMachineIDTerminalRuleCall_4_1_0_1() { return cRefinesMachineIDTerminalRuleCall_4_1_0_1; }
		
		//('sees' sees+=[econtext::Context]+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sees'
		public Keyword getSeesKeyword_5_0() { return cSeesKeyword_5_0; }
		
		//sees+=[econtext::Context]+
		public Assignment getSeesAssignment_5_1() { return cSeesAssignment_5_1; }
		
		//[econtext::Context]
		public CrossReference getSeesContextCrossReference_5_1_0() { return cSeesContextCrossReference_5_1_0; }
		
		//ID
		public RuleCall getSeesContextIDTerminalRuleCall_5_1_0_1() { return cSeesContextIDTerminalRuleCall_5_1_0_1; }
		
		//('variables' variables+=Variable+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'variables'
		public Keyword getVariablesKeyword_6_0() { return cVariablesKeyword_6_0; }
		
		//variables+=Variable+
		public Assignment getVariablesAssignment_6_1() { return cVariablesAssignment_6_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_6_1_0() { return cVariablesVariableParserRuleCall_6_1_0; }
		
		//('invariants' invariants+=Invariant+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'invariants'
		public Keyword getInvariantsKeyword_7_0() { return cInvariantsKeyword_7_0; }
		
		//invariants+=Invariant+
		public Assignment getInvariantsAssignment_7_1() { return cInvariantsAssignment_7_1; }
		
		//Invariant
		public RuleCall getInvariantsInvariantParserRuleCall_7_1_0() { return cInvariantsInvariantParserRuleCall_7_1_0; }
		
		//('variant' variant=Variant)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'variant'
		public Keyword getVariantKeyword_8_0() { return cVariantKeyword_8_0; }
		
		//variant=Variant
		public Assignment getVariantAssignment_8_1() { return cVariantAssignment_8_1; }
		
		//Variant
		public RuleCall getVariantVariantParserRuleCall_8_1_0() { return cVariantVariantParserRuleCall_8_1_0; }
		
		//('events' events+=Event events+=Event*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'events'
		public Keyword getEventsKeyword_9_0() { return cEventsKeyword_9_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_9_1() { return cEventsAssignment_9_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_9_1_0() { return cEventsEventParserRuleCall_9_1_0; }
		
		//events+=Event*
		public Assignment getEventsAssignment_9_2() { return cEventsAssignment_9_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_9_2_0() { return cEventsEventParserRuleCall_9_2_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class IncludesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Includes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineInclusionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cIncludesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAbstractMachineAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cAbstractMachineMachineCrossReference_1_1_0 = (CrossReference)cAbstractMachineAssignment_1_1.eContents().get(0);
		private final RuleCall cAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cAbstractMachineMachineCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cToKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConcreteMachineAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cConcreteMachineMachineCrossReference_2_1_0 = (CrossReference)cConcreteMachineAssignment_2_1.eContents().get(0);
		private final RuleCall cConcreteMachineMachineIDTerminalRuleCall_2_1_0_1 = (RuleCall)cConcreteMachineMachineCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPrefixesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPrefixesIDTerminalRuleCall_3_1_0 = (RuleCall)cPrefixesAssignment_3_1.eContents().get(0);
		private final Assignment cPrefixesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cPrefixesIDTerminalRuleCall_3_2_0 = (RuleCall)cPrefixesAssignment_3_2.eContents().get(0);
		
		//Includes einclusion::MachineInclusion:
		//	{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
		//	concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
		//concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup() { return cGroup; }
		
		//{einclusion::MachineInclusion}
		public Action getMachineInclusionAction_0() { return cMachineInclusionAction_0; }
		
		//'includes' abstractMachine=[emachine::Machine|QualifiedName]
		public Group getGroup_1() { return cGroup_1; }
		
		//'includes'
		public Keyword getIncludesKeyword_1_0() { return cIncludesKeyword_1_0; }
		
		//abstractMachine=[emachine::Machine|QualifiedName]
		public Assignment getAbstractMachineAssignment_1_1() { return cAbstractMachineAssignment_1_1; }
		
		//[emachine::Machine|QualifiedName]
		public CrossReference getAbstractMachineMachineCrossReference_1_1_0() { return cAbstractMachineMachineCrossReference_1_1_0; }
		
		//QualifiedName
		public RuleCall getAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1() { return cAbstractMachineMachineQualifiedNameParserRuleCall_1_1_0_1; }
		
		//('to' concreteMachine=[emachine::Machine])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'to'
		public Keyword getToKeyword_2_0() { return cToKeyword_2_0; }
		
		//concreteMachine=[emachine::Machine]
		public Assignment getConcreteMachineAssignment_2_1() { return cConcreteMachineAssignment_2_1; }
		
		//[emachine::Machine]
		public CrossReference getConcreteMachineMachineCrossReference_2_1_0() { return cConcreteMachineMachineCrossReference_2_1_0; }
		
		//ID
		public RuleCall getConcreteMachineMachineIDTerminalRuleCall_2_1_0_1() { return cConcreteMachineMachineIDTerminalRuleCall_2_1_0_1; }
		
		//('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//prefixes+=ID
		public Assignment getPrefixesAssignment_3_1() { return cPrefixesAssignment_3_1; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_3_1_0() { return cPrefixesIDTerminalRuleCall_3_1_0; }
		
		//prefixes+=ID*
		public Assignment getPrefixesAssignment_3_2() { return cPrefixesAssignment_3_2; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_3_2_0() { return cPrefixesIDTerminalRuleCall_3_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable emachine::Variable:
		//	{emachine::Variable} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXPredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//Invariant emachine::Invariant:
		//	{emachine::Invariant} name=LABEL predicate=XPredicate theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Invariant} name=LABEL predicate=XPredicate theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }
		
		//name=LABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LABEL
		public RuleCall getNameLABELTerminalRuleCall_1_0() { return cNameLABELTerminalRuleCall_1_0; }
		
		//predicate=XPredicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XPredicate
		public RuleCall getPredicateXPredicateParserRuleCall_2_0() { return cPredicateXPredicateParserRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionXPredicateParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Variant emachine::Variant:
		//	{emachine::Variant} expression=XPredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variant} expression=XPredicate
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//expression=XPredicate
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//XPredicate
		public RuleCall getExpressionXPredicateParserRuleCall_1_0() { return cExpressionXPredicateParserRuleCall_1_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cExtendedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cExtendedExtendedKeyword_2_0_0 = (Keyword)cExtendedAssignment_2_0.eContents().get(0);
		private final Assignment cConvergenceAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cConvergenceConvergenceEnumRuleCall_2_1_0 = (RuleCall)cConvergenceAssignment_2_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExtensionsEventSyncParserRuleCall_3_0 = (RuleCall)cExtensionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRefinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRefinesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefinesEventCrossReference_4_1_0 = (CrossReference)cRefinesAssignment_4_1.eContents().get(0);
		private final RuleCall cRefinesEventIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefinesEventCrossReference_4_1_0.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cGroup_5_0.eContents().get(0);
		private final Keyword cWithKeyword_5_0_0_0 = (Keyword)cGroup_5_0_0.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_0_0_1 = (Assignment)cGroup_5_0_0.eContents().get(1);
		private final RuleCall cWitnessesWitnessParserRuleCall_5_0_0_1_0 = (RuleCall)cWitnessesAssignment_5_0_0_1.eContents().get(0);
		private final Keyword cBeginKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cActionsAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_5_0_2_0 = (RuleCall)cActionsAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cWhenKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cGuardsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cGuardsGuardParserRuleCall_5_1_1_0 = (RuleCall)cGuardsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cGroup_5_1.eContents().get(2);
		private final Keyword cWithKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cWitnessesWitnessParserRuleCall_5_1_2_1_0 = (RuleCall)cWitnessesAssignment_5_1_2_1.eContents().get(0);
		private final Group cGroup_5_1_3 = (Group)cGroup_5_1.eContents().get(3);
		private final Keyword cThenKeyword_5_1_3_0 = (Keyword)cGroup_5_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_5_1_3_1 = (Assignment)cGroup_5_1_3.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_5_1_3_1_0 = (RuleCall)cActionsAssignment_5_1_3_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cAlternatives_5.eContents().get(2);
		private final Keyword cAnyKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cParametersAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_2_1_0 = (RuleCall)cParametersAssignment_5_2_1.eContents().get(0);
		private final Keyword cWhereKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		private final Assignment cGuardsAssignment_5_2_3 = (Assignment)cGroup_5_2.eContents().get(3);
		private final RuleCall cGuardsGuardParserRuleCall_5_2_3_0 = (RuleCall)cGuardsAssignment_5_2_3.eContents().get(0);
		private final Group cGroup_5_2_4 = (Group)cGroup_5_2.eContents().get(4);
		private final Keyword cWithKeyword_5_2_4_0 = (Keyword)cGroup_5_2_4.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_2_4_1 = (Assignment)cGroup_5_2_4.eContents().get(1);
		private final RuleCall cWitnessesWitnessParserRuleCall_5_2_4_1_0 = (RuleCall)cWitnessesAssignment_5_2_4_1.eContents().get(0);
		private final Group cGroup_5_2_5 = (Group)cGroup_5_2.eContents().get(5);
		private final Keyword cThenKeyword_5_2_5_0 = (Keyword)cGroup_5_2_5.eContents().get(0);
		private final Assignment cActionsAssignment_5_2_5_1 = (Assignment)cGroup_5_2_5.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_5_2_5_1_0 = (RuleCall)cActionsAssignment_5_2_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Event emachine::Event:
		//	{emachine::Event} name=ID (extended?='extended'? & convergence=Convergence?) extensions+=EventSync* ('refines'
		//	refines+=[emachine::Event]+)? (('with' witnesses+=Witness+)?
		//	'begin'
		//	actions+=Action+
		//	|
		//	'when'
		//	guards+=Guard+ ('with' witnesses+=Witness+)? ('then'
		//	actions+=Action+)?
		//	|
		//	'any'
		//	parameters+=Parameter+
		//	'where'
		//	guards+=Guard+ ('with' witnesses+=Witness+)? ('then'
		//	actions+=Action+)?)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Event} name=ID (extended?='extended'? & convergence=Convergence?) extensions+=EventSync* ('refines'
		//refines+=[emachine::Event]+)? (('with' witnesses+=Witness+)? 'begin' actions+=Action+ | 'when' guards+=Guard+ ('with'
		//witnesses+=Witness+)? ('then' actions+=Action+)? | 'any' parameters+=Parameter+ 'where' guards+=Guard+ ('with'
		//witnesses+=Witness+)? ('then' actions+=Action+)?)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{emachine::Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//extended?='extended'? & convergence=Convergence?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//extended?='extended'?
		public Assignment getExtendedAssignment_2_0() { return cExtendedAssignment_2_0; }
		
		//'extended'
		public Keyword getExtendedExtendedKeyword_2_0_0() { return cExtendedExtendedKeyword_2_0_0; }
		
		//convergence=Convergence?
		public Assignment getConvergenceAssignment_2_1() { return cConvergenceAssignment_2_1; }
		
		//Convergence
		public RuleCall getConvergenceConvergenceEnumRuleCall_2_1_0() { return cConvergenceConvergenceEnumRuleCall_2_1_0; }
		
		//extensions+=EventSync*
		public Assignment getExtensionsAssignment_3() { return cExtensionsAssignment_3; }
		
		//EventSync
		public RuleCall getExtensionsEventSyncParserRuleCall_3_0() { return cExtensionsEventSyncParserRuleCall_3_0; }
		
		//('refines' refines+=[emachine::Event]+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'refines'
		public Keyword getRefinesKeyword_4_0() { return cRefinesKeyword_4_0; }
		
		//refines+=[emachine::Event]+
		public Assignment getRefinesAssignment_4_1() { return cRefinesAssignment_4_1; }
		
		//[emachine::Event]
		public CrossReference getRefinesEventCrossReference_4_1_0() { return cRefinesEventCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRefinesEventIDTerminalRuleCall_4_1_0_1() { return cRefinesEventIDTerminalRuleCall_4_1_0_1; }
		
		//(('with' witnesses+=Witness+)? 'begin' actions+=Action+ | 'when' guards+=Guard+ ('with' witnesses+=Witness+)? ('then'
		//actions+=Action+)? | 'any' parameters+=Parameter+ 'where' guards+=Guard+ ('with' witnesses+=Witness+)? ('then'
		//actions+=Action+)?)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//('with' witnesses+=Witness+)? 'begin' actions+=Action+
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//('with' witnesses+=Witness+)?
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }
		
		//'with'
		public Keyword getWithKeyword_5_0_0_0() { return cWithKeyword_5_0_0_0; }
		
		//witnesses+=Witness+
		public Assignment getWitnessesAssignment_5_0_0_1() { return cWitnessesAssignment_5_0_0_1; }
		
		//Witness
		public RuleCall getWitnessesWitnessParserRuleCall_5_0_0_1_0() { return cWitnessesWitnessParserRuleCall_5_0_0_1_0; }
		
		//'begin'
		public Keyword getBeginKeyword_5_0_1() { return cBeginKeyword_5_0_1; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_5_0_2() { return cActionsAssignment_5_0_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0_2_0() { return cActionsActionParserRuleCall_5_0_2_0; }
		
		//'when' guards+=Guard+ ('with' witnesses+=Witness+)? ('then' actions+=Action+)?
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'when'
		public Keyword getWhenKeyword_5_1_0() { return cWhenKeyword_5_1_0; }
		
		//guards+=Guard+
		public Assignment getGuardsAssignment_5_1_1() { return cGuardsAssignment_5_1_1; }
		
		//Guard
		public RuleCall getGuardsGuardParserRuleCall_5_1_1_0() { return cGuardsGuardParserRuleCall_5_1_1_0; }
		
		//('with' witnesses+=Witness+)?
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//'with'
		public Keyword getWithKeyword_5_1_2_0() { return cWithKeyword_5_1_2_0; }
		
		//witnesses+=Witness+
		public Assignment getWitnessesAssignment_5_1_2_1() { return cWitnessesAssignment_5_1_2_1; }
		
		//Witness
		public RuleCall getWitnessesWitnessParserRuleCall_5_1_2_1_0() { return cWitnessesWitnessParserRuleCall_5_1_2_1_0; }
		
		//('then' actions+=Action+)?
		public Group getGroup_5_1_3() { return cGroup_5_1_3; }
		
		//'then'
		public Keyword getThenKeyword_5_1_3_0() { return cThenKeyword_5_1_3_0; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_5_1_3_1() { return cActionsAssignment_5_1_3_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_1_3_1_0() { return cActionsActionParserRuleCall_5_1_3_1_0; }
		
		//'any' parameters+=Parameter+ 'where' guards+=Guard+ ('with' witnesses+=Witness+)? ('then' actions+=Action+)?
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'any'
		public Keyword getAnyKeyword_5_2_0() { return cAnyKeyword_5_2_0; }
		
		//parameters+=Parameter+
		public Assignment getParametersAssignment_5_2_1() { return cParametersAssignment_5_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_2_1_0() { return cParametersParameterParserRuleCall_5_2_1_0; }
		
		//'where'
		public Keyword getWhereKeyword_5_2_2() { return cWhereKeyword_5_2_2; }
		
		//guards+=Guard+
		public Assignment getGuardsAssignment_5_2_3() { return cGuardsAssignment_5_2_3; }
		
		//Guard
		public RuleCall getGuardsGuardParserRuleCall_5_2_3_0() { return cGuardsGuardParserRuleCall_5_2_3_0; }
		
		//('with' witnesses+=Witness+)?
		public Group getGroup_5_2_4() { return cGroup_5_2_4; }
		
		//'with'
		public Keyword getWithKeyword_5_2_4_0() { return cWithKeyword_5_2_4_0; }
		
		//witnesses+=Witness+
		public Assignment getWitnessesAssignment_5_2_4_1() { return cWitnessesAssignment_5_2_4_1; }
		
		//Witness
		public RuleCall getWitnessesWitnessParserRuleCall_5_2_4_1_0() { return cWitnessesWitnessParserRuleCall_5_2_4_1_0; }
		
		//('then' actions+=Action+)?
		public Group getGroup_5_2_5() { return cGroup_5_2_5; }
		
		//'then'
		public Keyword getThenKeyword_5_2_5_0() { return cThenKeyword_5_2_5_0; }
		
		//actions+=Action+
		public Assignment getActionsAssignment_5_2_5_1() { return cActionsAssignment_5_2_5_1; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_2_5_1_0() { return cActionsActionParserRuleCall_5_2_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class EventSyncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.EventSync");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventSynchronisationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSynchronisesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cPrefixAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPrefixIDTerminalRuleCall_1_1_0_0 = (RuleCall)cPrefixAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cSynchronisedEventAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cSynchronisedEventEventCrossReference_1_2_0 = (CrossReference)cSynchronisedEventAssignment_1_2.eContents().get(0);
		private final RuleCall cSynchronisedEventEventIDTerminalRuleCall_1_2_0_1 = (RuleCall)cSynchronisedEventEventCrossReference_1_2_0.eContents().get(1);
		
		//EventSync einclusion::EventSynchronisation:
		//	{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')? synchronisedEvent=[emachine::Event]);
		@Override public ParserRule getRule() { return rule; }
		
		//{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')? synchronisedEvent=[emachine::Event])
		public Group getGroup() { return cGroup; }
		
		//{einclusion::EventSynchronisation}
		public Action getEventSynchronisationAction_0() { return cEventSynchronisationAction_0; }
		
		//'synchronises' (prefix=ID '.')? synchronisedEvent=[emachine::Event]
		public Group getGroup_1() { return cGroup_1; }
		
		//'synchronises'
		public Keyword getSynchronisesKeyword_1_0() { return cSynchronisesKeyword_1_0; }
		
		//(prefix=ID '.')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//prefix=ID
		public Assignment getPrefixAssignment_1_1_0() { return cPrefixAssignment_1_1_0; }
		
		//ID
		public RuleCall getPrefixIDTerminalRuleCall_1_1_0_0() { return cPrefixIDTerminalRuleCall_1_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }
		
		//synchronisedEvent=[emachine::Event]
		public Assignment getSynchronisedEventAssignment_1_2() { return cSynchronisedEventAssignment_1_2; }
		
		//[emachine::Event]
		public CrossReference getSynchronisedEventEventCrossReference_1_2_0() { return cSynchronisedEventEventCrossReference_1_2_0; }
		
		//ID
		public RuleCall getSynchronisedEventEventIDTerminalRuleCall_1_2_0_1() { return cSynchronisedEventEventIDTerminalRuleCall_1_2_0_1; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter emachine::Parameter:
		//	{emachine::Parameter} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Parameter} name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXPredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//Guard emachine::Guard:
		//	{emachine::Guard} name=LABEL predicate=XPredicate theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Guard} name=LABEL predicate=XPredicate theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//name=LABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LABEL
		public RuleCall getNameLABELTerminalRuleCall_1_0() { return cNameLABELTerminalRuleCall_1_0; }
		
		//predicate=XPredicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XPredicate
		public RuleCall getPredicateXPredicateParserRuleCall_2_0() { return cPredicateXPredicateParserRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}
	public class WitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Witness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXPredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//Witness emachine::Witness:
		//	{emachine::Witness} name=LABEL predicate=XPredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Witness} name=LABEL predicate=XPredicate
		public Group getGroup() { return cGroup; }
		
		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }
		
		//name=LABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LABEL
		public RuleCall getNameLABELTerminalRuleCall_1_0() { return cNameLABELTerminalRuleCall_1_0; }
		
		//predicate=XPredicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XPredicate
		public RuleCall getPredicateXPredicateParserRuleCall_2_0() { return cPredicateXPredicateParserRuleCall_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionXPredicateParserRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//Action emachine::Action:
		//	{emachine::Action} name=LABEL action=XPredicate;
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Action} name=LABEL action=XPredicate
		public Group getGroup() { return cGroup; }
		
		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//name=LABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LABEL
		public RuleCall getNameLABELTerminalRuleCall_1_0() { return cNameLABELTerminalRuleCall_1_0; }
		
		//action=XPredicate
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//XPredicate
		public RuleCall getActionXPredicateParserRuleCall_2_0() { return cActionXPredicateParserRuleCall_2_0; }
	}
	public class XPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.XPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEVENTB_PREDICATE_SYMBOLSParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//XPredicate:
		//	(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EVENTB_IDENTIFIER_KEYWORD
		public RuleCall getEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0() { return cEVENTB_IDENTIFIER_KEYWORDParserRuleCall_0; }
		
		//EVENTB_PREDICATE_SYMBOLS
		public RuleCall getEVENTB_PREDICATE_SYMBOLSParserRuleCall_1() { return cEVENTB_PREDICATE_SYMBOLSParserRuleCall_1; }
		
		//EVENTB_EXPRESSION_SYMBOLS
		public RuleCall getEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2() { return cEVENTB_EXPRESSION_SYMBOLSParserRuleCall_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}
	public class EVENTB_IDENTIFIER_KEYWORDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.EVENTB_IDENTIFIER_KEYWORD");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBOOLKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFALSEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTRUEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBoolKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCardKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cDomKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cFiniteKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cIdKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cInterKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMaxKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cMinKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cModKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPredKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cPrj1Keyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cPrj2Keyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cRanKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cSuccKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cUnionKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cDoubleStruckCapitalNDigitOneKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cDoubleStruckCapitalNKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cDoubleStruckCapitalPDigitOneKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cDoubleStruckCapitalPKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cDoubleStruckCapitalZKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		
		//EVENTB_IDENTIFIER_KEYWORD:
		//	'BOOL' |
		//	'FALSE' |
		//	'TRUE' |
		//	'bool' |
		//	'card' |
		//	'dom' |
		//	'finite' |
		//	'id' |
		//	'inter' |
		//	'max' |
		//	'min' |
		//	'mod' |
		//	'pred' |
		//	'prj1' |
		//	'prj2' |
		//	'ran' |
		//	'succ' |
		//	'union' |
		//	'ℕ1' |
		//	'ℕ' |
		//	'ℙ1' |
		//	'ℙ' |
		//	'ℤ';
		@Override public ParserRule getRule() { return rule; }
		
		//'BOOL' | 'FALSE' | 'TRUE' | 'bool' | 'card' | 'dom' | 'finite' | 'id' | 'inter' | 'max' | 'min' | 'mod' | 'pred' |
		//'prj1' | 'prj2' | 'ran' | 'succ' | 'union' | 'ℕ1' | 'ℕ' | 'ℙ1' | 'ℙ' | 'ℤ'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BOOL'
		public Keyword getBOOLKeyword_0() { return cBOOLKeyword_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_1() { return cFALSEKeyword_1; }
		
		//'TRUE'
		public Keyword getTRUEKeyword_2() { return cTRUEKeyword_2; }
		
		//'bool'
		public Keyword getBoolKeyword_3() { return cBoolKeyword_3; }
		
		//'card'
		public Keyword getCardKeyword_4() { return cCardKeyword_4; }
		
		//'dom'
		public Keyword getDomKeyword_5() { return cDomKeyword_5; }
		
		//'finite'
		public Keyword getFiniteKeyword_6() { return cFiniteKeyword_6; }
		
		//'id'
		public Keyword getIdKeyword_7() { return cIdKeyword_7; }
		
		//'inter'
		public Keyword getInterKeyword_8() { return cInterKeyword_8; }
		
		//'max'
		public Keyword getMaxKeyword_9() { return cMaxKeyword_9; }
		
		//'min'
		public Keyword getMinKeyword_10() { return cMinKeyword_10; }
		
		//'mod'
		public Keyword getModKeyword_11() { return cModKeyword_11; }
		
		//'pred'
		public Keyword getPredKeyword_12() { return cPredKeyword_12; }
		
		//'prj1'
		public Keyword getPrj1Keyword_13() { return cPrj1Keyword_13; }
		
		//'prj2'
		public Keyword getPrj2Keyword_14() { return cPrj2Keyword_14; }
		
		//'ran'
		public Keyword getRanKeyword_15() { return cRanKeyword_15; }
		
		//'succ'
		public Keyword getSuccKeyword_16() { return cSuccKeyword_16; }
		
		//'union'
		public Keyword getUnionKeyword_17() { return cUnionKeyword_17; }
		
		//'ℕ1'
		public Keyword getDoubleStruckCapitalNDigitOneKeyword_18() { return cDoubleStruckCapitalNDigitOneKeyword_18; }
		
		//'ℕ'
		public Keyword getDoubleStruckCapitalNKeyword_19() { return cDoubleStruckCapitalNKeyword_19; }
		
		//'ℙ1'
		public Keyword getDoubleStruckCapitalPDigitOneKeyword_20() { return cDoubleStruckCapitalPDigitOneKeyword_20; }
		
		//'ℙ'
		public Keyword getDoubleStruckCapitalPKeyword_21() { return cDoubleStruckCapitalPKeyword_21; }
		
		//'ℤ'
		public Keyword getDoubleStruckCapitalZKeyword_22() { return cDoubleStruckCapitalZKeyword_22; }
	}
	public class EVENTB_PREDICATE_SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.EVENTB_PREDICATE_SYMBOLS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLeftRightDoubleArrowKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cRightwardsDoubleArrowKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLogicalAndKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLogicalOrKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cNotSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cDownTackKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cUpTackKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cForAllKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExclamationMarkKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cThereExistsKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNumberSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cCommaKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cMiddleDotKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cFullStopKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cEqualsSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cNotEqualToKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLessThanOrEqualToKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cLessThanSignKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cGreaterThanOrEqualToKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cGreaterThanSignKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cElementOfKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cColonKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cNotAnElementOfKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cSubsetOfKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cNotASubsetOfKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cSubsetOfOrEqualToKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cNeitherASubsetOfNorEqualToKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cPartitionKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		
		//EVENTB_PREDICATE_SYMBOLS:
		//	'(' | // Predicate calculus symbols
		//	')' |
		//	'⇔' |
		//	'⇒' |
		//	'∧' | '&' |
		//	'∨' |
		//	'¬' |
		//	'⊤' |
		//	'⊥' |
		//	'∀' | '!' |
		//	'∃' | '#' |
		//	',' |
		//	'·' | '.' |
		//	'=' | // Build predicates from expressions
		//	'≠' |
		//	'≤' |
		//	'<' |
		//	'≥' |
		//	'>' |
		//	'∈' | ':' | // Include this for Rodin keyboard
		//	'∉' |
		//	'⊂' |
		//	'⊄' |
		//	'⊆' |
		//	'⊈' |
		//	'partition' // This is missing from the Rodin D7 deliverable
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' | // Predicate calculus symbols
		//')' | '⇔' | '⇒' | '∧' | '&' | '∨' | '¬' | '⊤' | '⊥' | '∀' | '!' | '∃' | '#' | ',' | '·' | '.' | '=' | // Build predicates from expressions
		//'≠' | '≤' | '<' | '≥' | '>' | '∈' | ':' | // Include this for Rodin keyboard
		//'∉' | '⊂' | '⊄' | '⊆' | '⊈' | 'partition'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//// Predicate calculus symbols
		//')'
		public Keyword getRightParenthesisKeyword_1() { return cRightParenthesisKeyword_1; }
		
		//'⇔'
		public Keyword getLeftRightDoubleArrowKeyword_2() { return cLeftRightDoubleArrowKeyword_2; }
		
		//'⇒'
		public Keyword getRightwardsDoubleArrowKeyword_3() { return cRightwardsDoubleArrowKeyword_3; }
		
		//'∧'
		public Keyword getLogicalAndKeyword_4() { return cLogicalAndKeyword_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//'∨'
		public Keyword getLogicalOrKeyword_6() { return cLogicalOrKeyword_6; }
		
		//'¬'
		public Keyword getNotSignKeyword_7() { return cNotSignKeyword_7; }
		
		//'⊤'
		public Keyword getDownTackKeyword_8() { return cDownTackKeyword_8; }
		
		//'⊥'
		public Keyword getUpTackKeyword_9() { return cUpTackKeyword_9; }
		
		//'∀'
		public Keyword getForAllKeyword_10() { return cForAllKeyword_10; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_11() { return cExclamationMarkKeyword_11; }
		
		//'∃'
		public Keyword getThereExistsKeyword_12() { return cThereExistsKeyword_12; }
		
		//'#'
		public Keyword getNumberSignKeyword_13() { return cNumberSignKeyword_13; }
		
		//','
		public Keyword getCommaKeyword_14() { return cCommaKeyword_14; }
		
		//'·'
		public Keyword getMiddleDotKeyword_15() { return cMiddleDotKeyword_15; }
		
		//'.'
		public Keyword getFullStopKeyword_16() { return cFullStopKeyword_16; }
		
		//'='
		public Keyword getEqualsSignKeyword_17() { return cEqualsSignKeyword_17; }
		
		//// Build predicates from expressions
		//'≠'
		public Keyword getNotEqualToKeyword_18() { return cNotEqualToKeyword_18; }
		
		//'≤'
		public Keyword getLessThanOrEqualToKeyword_19() { return cLessThanOrEqualToKeyword_19; }
		
		//'<'
		public Keyword getLessThanSignKeyword_20() { return cLessThanSignKeyword_20; }
		
		//'≥'
		public Keyword getGreaterThanOrEqualToKeyword_21() { return cGreaterThanOrEqualToKeyword_21; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_22() { return cGreaterThanSignKeyword_22; }
		
		//'∈'
		public Keyword getElementOfKeyword_23() { return cElementOfKeyword_23; }
		
		//':'
		public Keyword getColonKeyword_24() { return cColonKeyword_24; }
		
		//// Include this for Rodin keyboard
		//'∉'
		public Keyword getNotAnElementOfKeyword_25() { return cNotAnElementOfKeyword_25; }
		
		//'⊂'
		public Keyword getSubsetOfKeyword_26() { return cSubsetOfKeyword_26; }
		
		//'⊄'
		public Keyword getNotASubsetOfKeyword_27() { return cNotASubsetOfKeyword_27; }
		
		//'⊆'
		public Keyword getSubsetOfOrEqualToKeyword_28() { return cSubsetOfOrEqualToKeyword_28; }
		
		//'⊈'
		public Keyword getNeitherASubsetOfNorEqualToKeyword_29() { return cNeitherASubsetOfNorEqualToKeyword_29; }
		
		//'partition'
		public Keyword getPartitionKeyword_30() { return cPartitionKeyword_30; }
	}
	public class EVENTB_EXPRESSION_SYMBOLSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.EVENTB_EXPRESSION_SYMBOLS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLeftRightArrowKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateUseAreaE100Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPrivateUseAreaE101Keyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPrivateUseAreaE102Keyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRightwardsArrowWithVerticalStrokeKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cRightwardsArrowKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cRightwardsArrowWithTailWithVerticalStrokeKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cRightwardsArrowWithTailKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRightwardsTwoHeadedArrowKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRightwardsTwoHeadedArrowWithTailKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cRightwardsArrowFromBarKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cEmptySetKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cIntersectionKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cUnionKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cSetMinusKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cMultiplicationSignKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cLeftSquareBracketKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cRightSquareBracketKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cPrivateUseAreaE103Keyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cRingOperatorKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cSemicolonKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cCircledTimesKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cParallelToKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cTildeOperatorKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cWhiteLeftPointingTriangleKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cZNotationDomainAntirestrictionKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cWhiteRightPointingTriangleKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cZNotationRangeAntirestrictionKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cGreekSmallLetterLamdaKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Group cGroup_32 = (Group)cAlternatives.eContents().get(32);
		private final Keyword cPercentSignKeyword_32_0 = (Keyword)cGroup_32.eContents().get(0);
		private final Keyword cNAryIntersectionKeyword_32_1 = (Keyword)cGroup_32.eContents().get(1);
		private final Keyword cNAryUnionKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cDividesKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cTwoDotLeaderKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cPlusSignKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cMinusSignKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cHyphenMinusKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cAsteriskOperatorKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cAsteriskKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cDivisionSignKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cSolidusKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cCircumflexAccentKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cBackslashKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		
		//EVENTB_EXPRESSION_SYMBOLS:
		//	'↔' | // Symbols for building set of relations
		//	'' |
		//	'' |
		//	'' |
		//	'⇸' |
		//	'→' |
		//	'⤔' |
		//	'↣' |
		//	'⤀' |
		//	'↠' |
		//	'⤖' |
		//	'{' | // Symbols for manipulating sets
		//	'}' |
		//	'↦' |
		//	'∅' |
		//	'∩' |
		//	'∪' |
		//	'∖' |
		//	'×' |
		//	'[' | // Symbols for manipulating functions and relations
		//	']' |
		//	'' |
		//	'∘' |
		//	';' |
		//	'⊗' |
		//	'∥' |
		//	'∼' |
		//	'◁' |
		//	'⩤' |
		//	'▷' |
		//	'⩥' |
		//	'λ' | '%' // Symbols for quantified expressions
		//	'⋂' |
		//	'⋃' |
		//	'∣' |
		//	'‥' | // Symbols for arithmetic expressions
		//	'+' |
		//	'−' | '-' |
		//	'∗' | '*' |
		//	'÷' | '/' |
		//	'^' |
		//	'\\' // Allowed for LaTeX combos
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'↔' | // Symbols for building set of relations
		//'' | '' | '' | '⇸' | '→' | '⤔' | '↣' | '⤀' | '↠' | '⤖' | '{' | // Symbols for manipulating sets
		//'}' | '↦' | '∅' | '∩' | '∪' | '∖' | '×' | '[' | // Symbols for manipulating functions and relations
		//']' | '' | '∘' | ';' | '⊗' | '∥' | '∼' | '◁' | '⩤' | '▷' | '⩥' | 'λ' | '%' // Symbols for quantified expressions
		//'⋂' | '⋃' | '∣' | '‥' | // Symbols for arithmetic expressions
		//'+' | '−' | '-' | '∗' | '*' | '÷' | '/' | '^' | '\\'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'↔'
		public Keyword getLeftRightArrowKeyword_0() { return cLeftRightArrowKeyword_0; }
		
		//// Symbols for building set of relations
		//''
		public Keyword getPrivateUseAreaE100Keyword_1() { return cPrivateUseAreaE100Keyword_1; }
		
		//''
		public Keyword getPrivateUseAreaE101Keyword_2() { return cPrivateUseAreaE101Keyword_2; }
		
		//''
		public Keyword getPrivateUseAreaE102Keyword_3() { return cPrivateUseAreaE102Keyword_3; }
		
		//'⇸'
		public Keyword getRightwardsArrowWithVerticalStrokeKeyword_4() { return cRightwardsArrowWithVerticalStrokeKeyword_4; }
		
		//'→'
		public Keyword getRightwardsArrowKeyword_5() { return cRightwardsArrowKeyword_5; }
		
		//'⤔'
		public Keyword getRightwardsArrowWithTailWithVerticalStrokeKeyword_6() { return cRightwardsArrowWithTailWithVerticalStrokeKeyword_6; }
		
		//'↣'
		public Keyword getRightwardsArrowWithTailKeyword_7() { return cRightwardsArrowWithTailKeyword_7; }
		
		//'⤀'
		public Keyword getRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8() { return cRightwardsTwoHeadedArrowWithVerticalStrokeKeyword_8; }
		
		//'↠'
		public Keyword getRightwardsTwoHeadedArrowKeyword_9() { return cRightwardsTwoHeadedArrowKeyword_9; }
		
		//'⤖'
		public Keyword getRightwardsTwoHeadedArrowWithTailKeyword_10() { return cRightwardsTwoHeadedArrowWithTailKeyword_10; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }
		
		//// Symbols for manipulating sets
		//'}'
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
		
		//'↦'
		public Keyword getRightwardsArrowFromBarKeyword_13() { return cRightwardsArrowFromBarKeyword_13; }
		
		//'∅'
		public Keyword getEmptySetKeyword_14() { return cEmptySetKeyword_14; }
		
		//'∩'
		public Keyword getIntersectionKeyword_15() { return cIntersectionKeyword_15; }
		
		//'∪'
		public Keyword getUnionKeyword_16() { return cUnionKeyword_16; }
		
		//'∖'
		public Keyword getSetMinusKeyword_17() { return cSetMinusKeyword_17; }
		
		//'×'
		public Keyword getMultiplicationSignKeyword_18() { return cMultiplicationSignKeyword_18; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_19() { return cLeftSquareBracketKeyword_19; }
		
		//// Symbols for manipulating functions and relations
		//']'
		public Keyword getRightSquareBracketKeyword_20() { return cRightSquareBracketKeyword_20; }
		
		//''
		public Keyword getPrivateUseAreaE103Keyword_21() { return cPrivateUseAreaE103Keyword_21; }
		
		//'∘'
		public Keyword getRingOperatorKeyword_22() { return cRingOperatorKeyword_22; }
		
		//';'
		public Keyword getSemicolonKeyword_23() { return cSemicolonKeyword_23; }
		
		//'⊗'
		public Keyword getCircledTimesKeyword_24() { return cCircledTimesKeyword_24; }
		
		//'∥'
		public Keyword getParallelToKeyword_25() { return cParallelToKeyword_25; }
		
		//'∼'
		public Keyword getTildeOperatorKeyword_26() { return cTildeOperatorKeyword_26; }
		
		//'◁'
		public Keyword getWhiteLeftPointingTriangleKeyword_27() { return cWhiteLeftPointingTriangleKeyword_27; }
		
		//'⩤'
		public Keyword getZNotationDomainAntirestrictionKeyword_28() { return cZNotationDomainAntirestrictionKeyword_28; }
		
		//'▷'
		public Keyword getWhiteRightPointingTriangleKeyword_29() { return cWhiteRightPointingTriangleKeyword_29; }
		
		//'⩥'
		public Keyword getZNotationRangeAntirestrictionKeyword_30() { return cZNotationRangeAntirestrictionKeyword_30; }
		
		//'λ'
		public Keyword getGreekSmallLetterLamdaKeyword_31() { return cGreekSmallLetterLamdaKeyword_31; }
		
		//'%' // Symbols for quantified expressions
		//'⋂'
		public Group getGroup_32() { return cGroup_32; }
		
		//'%'
		public Keyword getPercentSignKeyword_32_0() { return cPercentSignKeyword_32_0; }
		
		//// Symbols for quantified expressions
		//'⋂'
		public Keyword getNAryIntersectionKeyword_32_1() { return cNAryIntersectionKeyword_32_1; }
		
		//'⋃'
		public Keyword getNAryUnionKeyword_33() { return cNAryUnionKeyword_33; }
		
		//'∣'
		public Keyword getDividesKeyword_34() { return cDividesKeyword_34; }
		
		//'‥'
		public Keyword getTwoDotLeaderKeyword_35() { return cTwoDotLeaderKeyword_35; }
		
		//// Symbols for arithmetic expressions
		//'+'
		public Keyword getPlusSignKeyword_36() { return cPlusSignKeyword_36; }
		
		//'−'
		public Keyword getMinusSignKeyword_37() { return cMinusSignKeyword_37; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_38() { return cHyphenMinusKeyword_38; }
		
		//'∗'
		public Keyword getAsteriskOperatorKeyword_39() { return cAsteriskOperatorKeyword_39; }
		
		//'*'
		public Keyword getAsteriskKeyword_40() { return cAsteriskKeyword_40; }
		
		//'÷'
		public Keyword getDivisionSignKeyword_41() { return cDivisionSignKeyword_41; }
		
		//'/'
		public Keyword getSolidusKeyword_42() { return cSolidusKeyword_42; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_43() { return cCircumflexAccentKeyword_43; }
		
		//'\\'
		public Keyword getBackslashKeyword_44() { return cBackslashKeyword_44; }
	}
	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cExtendsContextCrossReference_3_1_0 = (CrossReference)cExtendsAssignment_3_1.eContents().get(0);
		private final RuleCall cExtendsContextQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cExtendsContextCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSetsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSetsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSetsCarrierSetParserRuleCall_4_1_0 = (RuleCall)cSetsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConstantsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConstantsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConstantsConstantParserRuleCall_5_1_0 = (RuleCall)cConstantsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAxiomsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAxiomsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAxiomsAxiomParserRuleCall_6_1_0 = (RuleCall)cAxiomsAssignment_6_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Context econtext::Context:
		//	{econtext::Context}
		//	'context' name=ID ('extends' extends+=[econtext::Context|QualifiedName]+)? ('sets' sets+=CarrierSet+)? ('constants'
		//	constants+=Constant+)? ('axioms' axioms+=Axiom+)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Context} 'context' name=ID ('extends' extends+=[econtext::Context|QualifiedName]+)? ('sets'
		//sets+=CarrierSet+)? ('constants' constants+=Constant+)? ('axioms' axioms+=Axiom+)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{econtext::Context}
		public Action getContextAction_0() { return cContextAction_0; }
		
		//'context'
		public Keyword getContextKeyword_1() { return cContextKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' extends+=[econtext::Context|QualifiedName]+)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//extends+=[econtext::Context|QualifiedName]+
		public Assignment getExtendsAssignment_3_1() { return cExtendsAssignment_3_1; }
		
		//[econtext::Context|QualifiedName]
		public CrossReference getExtendsContextCrossReference_3_1_0() { return cExtendsContextCrossReference_3_1_0; }
		
		//QualifiedName
		public RuleCall getExtendsContextQualifiedNameParserRuleCall_3_1_0_1() { return cExtendsContextQualifiedNameParserRuleCall_3_1_0_1; }
		
		//('sets' sets+=CarrierSet+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'sets'
		public Keyword getSetsKeyword_4_0() { return cSetsKeyword_4_0; }
		
		//sets+=CarrierSet+
		public Assignment getSetsAssignment_4_1() { return cSetsAssignment_4_1; }
		
		//CarrierSet
		public RuleCall getSetsCarrierSetParserRuleCall_4_1_0() { return cSetsCarrierSetParserRuleCall_4_1_0; }
		
		//('constants' constants+=Constant+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'constants'
		public Keyword getConstantsKeyword_5_0() { return cConstantsKeyword_5_0; }
		
		//constants+=Constant+
		public Assignment getConstantsAssignment_5_1() { return cConstantsAssignment_5_1; }
		
		//Constant
		public RuleCall getConstantsConstantParserRuleCall_5_1_0() { return cConstantsConstantParserRuleCall_5_1_0; }
		
		//('axioms' axioms+=Axiom+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'axioms'
		public Keyword getAxiomsKeyword_6_0() { return cAxiomsKeyword_6_0; }
		
		//axioms+=Axiom+
		public Assignment getAxiomsAssignment_6_1() { return cAxiomsAssignment_6_1; }
		
		//Axiom
		public RuleCall getAxiomsAxiomParserRuleCall_6_1_0() { return cAxiomsAxiomParserRuleCall_6_1_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class CarrierSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.CarrierSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCarrierSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//CarrierSet econtext::CarrierSet:
		//	{econtext::CarrierSet} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::CarrierSet} name=ID
		public Group getGroup() { return cGroup; }
		
		//{econtext::CarrierSet}
		public Action getCarrierSetAction_0() { return cCarrierSetAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Constant econtext::Constant:
		//	{econtext::Constant} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Constant} name=ID
		public Group getGroup() { return cGroup; }
		
		//{econtext::Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class AxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Axiom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAxiomAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateXPredicateParserRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//Axiom econtext::Axiom:
		//	{econtext::Axiom} name=LABEL predicate=XPredicate theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Axiom} name=LABEL predicate=XPredicate theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{econtext::Axiom}
		public Action getAxiomAction_0() { return cAxiomAction_0; }
		
		//name=LABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//LABEL
		public RuleCall getNameLABELTerminalRuleCall_1_0() { return cNameLABELTerminalRuleCall_1_0; }
		
		//predicate=XPredicate
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//XPredicate
		public RuleCall getPredicateXPredicateParserRuleCall_2_0() { return cPredicateXPredicateParserRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}
	
	public class ConvergenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.Convergence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrdinaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrdinaryOrdinaryKeyword_0_0 = (Keyword)cOrdinaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConvergentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConvergentConvergentKeyword_1_0 = (Keyword)cConvergentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAnticipatedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAnticipatedAnticipatedKeyword_2_0 = (Keyword)cAnticipatedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Convergence returns emachine::Convergence:
		//	ordinary | convergent | anticipated;
		public EnumRule getRule() { return rule; }
		
		//ordinary | convergent | anticipated
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ordinary
		public EnumLiteralDeclaration getOrdinaryEnumLiteralDeclaration_0() { return cOrdinaryEnumLiteralDeclaration_0; }
		
		//'ordinary'
		public Keyword getOrdinaryOrdinaryKeyword_0_0() { return cOrdinaryOrdinaryKeyword_0_0; }
		
		//convergent
		public EnumLiteralDeclaration getConvergentEnumLiteralDeclaration_1() { return cConvergentEnumLiteralDeclaration_1; }
		
		//'convergent'
		public Keyword getConvergentConvergentKeyword_1_0() { return cConvergentConvergentKeyword_1_0; }
		
		//anticipated
		public EnumLiteralDeclaration getAnticipatedEnumLiteralDeclaration_2() { return cAnticipatedEnumLiteralDeclaration_2; }
		
		//'anticipated'
		public Keyword getAnticipatedAnticipatedKeyword_2_0() { return cAnticipatedAnticipatedKeyword_2_0; }
	}
	
	private final EventBComponentElements pEventBComponent;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tID;
	private final TerminalRule tLABEL;
	private final MachineElements pMachine;
	private final IncludesElements pIncludes;
	private final VariableElements pVariable;
	private final InvariantElements pInvariant;
	private final VariantElements pVariant;
	private final EventElements pEvent;
	private final EventSyncElements pEventSync;
	private final ConvergenceElements eConvergence;
	private final ParameterElements pParameter;
	private final GuardElements pGuard;
	private final WitnessElements pWitness;
	private final ActionElements pAction;
	private final XPredicateElements pXPredicate;
	private final EVENTB_IDENTIFIER_KEYWORDElements pEVENTB_IDENTIFIER_KEYWORD;
	private final EVENTB_PREDICATE_SYMBOLSElements pEVENTB_PREDICATE_SYMBOLS;
	private final EVENTB_EXPRESSION_SYMBOLSElements pEVENTB_EXPRESSION_SYMBOLS;
	private final ContextElements pContext;
	private final CarrierSetElements pCarrierSet;
	private final ConstantElements pConstant;
	private final AxiomElements pAxiom;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EventBComponentGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pEventBComponent = new EventBComponentElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.ID");
		this.tLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.camillex.EventBComponent.LABEL");
		this.pMachine = new MachineElements();
		this.pIncludes = new IncludesElements();
		this.pVariable = new VariableElements();
		this.pInvariant = new InvariantElements();
		this.pVariant = new VariantElements();
		this.pEvent = new EventElements();
		this.pEventSync = new EventSyncElements();
		this.eConvergence = new ConvergenceElements();
		this.pParameter = new ParameterElements();
		this.pGuard = new GuardElements();
		this.pWitness = new WitnessElements();
		this.pAction = new ActionElements();
		this.pXPredicate = new XPredicateElements();
		this.pEVENTB_IDENTIFIER_KEYWORD = new EVENTB_IDENTIFIER_KEYWORDElements();
		this.pEVENTB_PREDICATE_SYMBOLS = new EVENTB_PREDICATE_SYMBOLSElements();
		this.pEVENTB_EXPRESSION_SYMBOLS = new EVENTB_EXPRESSION_SYMBOLSElements();
		this.pContext = new ContextElements();
		this.pCarrierSet = new CarrierSetElements();
		this.pConstant = new ConstantElements();
		this.pAxiom = new AxiomElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xeventb.camillex.EventBComponent".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EventBComponent eventbcore::EventBNamedCommentedComponentElement:
	//	Machine | Context;
	public EventBComponentElements getEventBComponentAccess() {
		return pEventBComponent;
	}
	
	public ParserRule getEventBComponentRule() {
		return getEventBComponentAccess().getRule();
	}
	
	///*
	// * BEGIN: The terminal rules
	// */ QualifiedName:
	//	ID ('.' ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//@Override
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | 'i'..'ￜ') ('a'..'z' | 'A'..'Z' | '_' | 'i'..'ￜ' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal LABEL:
	//	'@' !':'+ ':';
	public TerminalRule getLABELRule() {
		return tLABEL;
	}
	
	///*
	// * END: The terminal rules
	// */ Machine emachine::Machine:
	//	{emachine::Machine}
	//	'machine' name=ID
	//	extensions+=Includes* ('refines' refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables'
	//	variables+=Variable+)? ('invariants' invariants+=Invariant+)? ('variant' variant=Variant)? ('events' events+=Event
	//	events+=Event*)?
	//	'end';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//Includes einclusion::MachineInclusion:
	//	{einclusion::MachineInclusion} ('includes' abstractMachine=[emachine::Machine|QualifiedName]) ('to'
	//	concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?;
	public IncludesElements getIncludesAccess() {
		return pIncludes;
	}
	
	public ParserRule getIncludesRule() {
		return getIncludesAccess().getRule();
	}
	
	//Variable emachine::Variable:
	//	{emachine::Variable} name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Invariant emachine::Invariant:
	//	{emachine::Invariant} name=LABEL predicate=XPredicate theorem?='theorem'?;
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}
	
	//Variant emachine::Variant:
	//	{emachine::Variant} expression=XPredicate;
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//Event emachine::Event:
	//	{emachine::Event} name=ID (extended?='extended'? & convergence=Convergence?) extensions+=EventSync* ('refines'
	//	refines+=[emachine::Event]+)? (('with' witnesses+=Witness+)?
	//	'begin'
	//	actions+=Action+
	//	|
	//	'when'
	//	guards+=Guard+ ('with' witnesses+=Witness+)? ('then'
	//	actions+=Action+)?
	//	|
	//	'any'
	//	parameters+=Parameter+
	//	'where'
	//	guards+=Guard+ ('with' witnesses+=Witness+)? ('then'
	//	actions+=Action+)?)?
	//	'end';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//EventSync einclusion::EventSynchronisation:
	//	{einclusion::EventSynchronisation} ('synchronises' (prefix=ID '.')? synchronisedEvent=[emachine::Event]);
	public EventSyncElements getEventSyncAccess() {
		return pEventSync;
	}
	
	public ParserRule getEventSyncRule() {
		return getEventSyncAccess().getRule();
	}
	
	//enum Convergence returns emachine::Convergence:
	//	ordinary | convergent | anticipated;
	public ConvergenceElements getConvergenceAccess() {
		return eConvergence;
	}
	
	public EnumRule getConvergenceRule() {
		return getConvergenceAccess().getRule();
	}
	
	//Parameter emachine::Parameter:
	//	{emachine::Parameter} name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Guard emachine::Guard:
	//	{emachine::Guard} name=LABEL predicate=XPredicate theorem?='theorem'?;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	//Witness emachine::Witness:
	//	{emachine::Witness} name=LABEL predicate=XPredicate;
	public WitnessElements getWitnessAccess() {
		return pWitness;
	}
	
	public ParserRule getWitnessRule() {
		return getWitnessAccess().getRule();
	}
	
	//Action emachine::Action:
	//	{emachine::Action} name=LABEL action=XPredicate;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//XPredicate:
	//	(EVENTB_IDENTIFIER_KEYWORD | EVENTB_PREDICATE_SYMBOLS | EVENTB_EXPRESSION_SYMBOLS | ID | INT)+;
	public XPredicateElements getXPredicateAccess() {
		return pXPredicate;
	}
	
	public ParserRule getXPredicateRule() {
		return getXPredicateAccess().getRule();
	}
	
	//EVENTB_IDENTIFIER_KEYWORD:
	//	'BOOL' |
	//	'FALSE' |
	//	'TRUE' |
	//	'bool' |
	//	'card' |
	//	'dom' |
	//	'finite' |
	//	'id' |
	//	'inter' |
	//	'max' |
	//	'min' |
	//	'mod' |
	//	'pred' |
	//	'prj1' |
	//	'prj2' |
	//	'ran' |
	//	'succ' |
	//	'union' |
	//	'ℕ1' |
	//	'ℕ' |
	//	'ℙ1' |
	//	'ℙ' |
	//	'ℤ';
	public EVENTB_IDENTIFIER_KEYWORDElements getEVENTB_IDENTIFIER_KEYWORDAccess() {
		return pEVENTB_IDENTIFIER_KEYWORD;
	}
	
	public ParserRule getEVENTB_IDENTIFIER_KEYWORDRule() {
		return getEVENTB_IDENTIFIER_KEYWORDAccess().getRule();
	}
	
	//EVENTB_PREDICATE_SYMBOLS:
	//	'(' | // Predicate calculus symbols
	//	')' |
	//	'⇔' |
	//	'⇒' |
	//	'∧' | '&' |
	//	'∨' |
	//	'¬' |
	//	'⊤' |
	//	'⊥' |
	//	'∀' | '!' |
	//	'∃' | '#' |
	//	',' |
	//	'·' | '.' |
	//	'=' | // Build predicates from expressions
	//	'≠' |
	//	'≤' |
	//	'<' |
	//	'≥' |
	//	'>' |
	//	'∈' | ':' | // Include this for Rodin keyboard
	//	'∉' |
	//	'⊂' |
	//	'⊄' |
	//	'⊆' |
	//	'⊈' |
	//	'partition' // This is missing from the Rodin D7 deliverable
	//;
	public EVENTB_PREDICATE_SYMBOLSElements getEVENTB_PREDICATE_SYMBOLSAccess() {
		return pEVENTB_PREDICATE_SYMBOLS;
	}
	
	public ParserRule getEVENTB_PREDICATE_SYMBOLSRule() {
		return getEVENTB_PREDICATE_SYMBOLSAccess().getRule();
	}
	
	//EVENTB_EXPRESSION_SYMBOLS:
	//	'↔' | // Symbols for building set of relations
	//	'' |
	//	'' |
	//	'' |
	//	'⇸' |
	//	'→' |
	//	'⤔' |
	//	'↣' |
	//	'⤀' |
	//	'↠' |
	//	'⤖' |
	//	'{' | // Symbols for manipulating sets
	//	'}' |
	//	'↦' |
	//	'∅' |
	//	'∩' |
	//	'∪' |
	//	'∖' |
	//	'×' |
	//	'[' | // Symbols for manipulating functions and relations
	//	']' |
	//	'' |
	//	'∘' |
	//	';' |
	//	'⊗' |
	//	'∥' |
	//	'∼' |
	//	'◁' |
	//	'⩤' |
	//	'▷' |
	//	'⩥' |
	//	'λ' | '%' // Symbols for quantified expressions
	//	'⋂' |
	//	'⋃' |
	//	'∣' |
	//	'‥' | // Symbols for arithmetic expressions
	//	'+' |
	//	'−' | '-' |
	//	'∗' | '*' |
	//	'÷' | '/' |
	//	'^' |
	//	'\\' // Allowed for LaTeX combos
	//;
	public EVENTB_EXPRESSION_SYMBOLSElements getEVENTB_EXPRESSION_SYMBOLSAccess() {
		return pEVENTB_EXPRESSION_SYMBOLS;
	}
	
	public ParserRule getEVENTB_EXPRESSION_SYMBOLSRule() {
		return getEVENTB_EXPRESSION_SYMBOLSAccess().getRule();
	}
	
	//Context econtext::Context:
	//	{econtext::Context}
	//	'context' name=ID ('extends' extends+=[econtext::Context|QualifiedName]+)? ('sets' sets+=CarrierSet+)? ('constants'
	//	constants+=Constant+)? ('axioms' axioms+=Axiom+)?
	//	'end';
	public ContextElements getContextAccess() {
		return pContext;
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}
	
	//CarrierSet econtext::CarrierSet:
	//	{econtext::CarrierSet} name=ID;
	public CarrierSetElements getCarrierSetAccess() {
		return pCarrierSet;
	}
	
	public ParserRule getCarrierSetRule() {
		return getCarrierSetAccess().getRule();
	}
	
	//Constant econtext::Constant:
	//	{econtext::Constant} name=ID;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//Axiom econtext::Axiom:
	//	{econtext::Axiom} name=LABEL predicate=XPredicate theorem?='theorem'?;
	public AxiomElements getAxiomAccess() {
		return pAxiom;
	}
	
	public ParserRule getAxiomRule() {
		return getAxiomAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
