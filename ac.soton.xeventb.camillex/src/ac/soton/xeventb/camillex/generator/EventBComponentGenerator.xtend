/*
 * generated by Xtext 2.14.0
 */
package ac.soton.xeventb.camillex.generator

import ac.soton.emf.translator.TranslatorFactory
import java.util.concurrent.ExecutionException
import org.eclipse.core.resources.IProject
import org.eclipse.core.resources.IWorkspaceRunnable
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.CoreException
import org.eclipse.core.runtime.IProgressMonitor
import org.eclipse.core.runtime.IStatus
import org.eclipse.core.runtime.NullProgressMonitor
import org.eclipse.core.runtime.Status
import org.eclipse.core.runtime.jobs.ISchedulingRule
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.transaction.TransactionalEditingDomain
import org.eclipse.emf.workspace.util.WorkspaceSynchronizer
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eventb.emf.core.context.Context
import org.eventb.emf.core.machine.Machine
import org.eventb.emf.persistence.EMFRodinDB
import org.eventb.emf.persistence.SaveResourcesCommand
import org.rodinp.core.RodinCore

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EventBComponentGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val content = resource.contents.get(0)
		var uriString = resource.URI.toString
		uriString = uriString.substring(0, uriString.lastIndexOf('buf'))
		if (content instanceof Context) {
			var emfRodinDB = new EMFRodinDB
			uriString = uriString + "buc"
			var uri = URI.createURI(uriString)
			emfRodinDB.saveResource(uri, content)
		} else if (content instanceof Machine) {
			if (content.extensions.empty) {
				var emfRodinDB = new EMFRodinDB
				uriString = uriString + "bum"
				var uri = URI.createURI(uriString)
				emfRodinDB.saveResource(uri, content)
			} // Dana: If machine contains inclusion, call the inclusion translator to generate
			// the event-b machine
			else {

				var commandId = 'ac.soton.eventb.emf.inclusion.commands.include'
				var factory = TranslatorFactory.getFactory() as TranslatorFactory
				if (factory !== null && factory.canTranslate(commandId, content.eClass())) {

					var TransactionalEditingDomain editingDomain = null;
					if (content.eResource !== null && content.eResource.getResourceSet !== null) {
						editingDomain = TransactionalEditingDomain.Factory.INSTANCE.getEditingDomain(
							content.eResource.getResourceSet);
					}
					if (editingDomain === null) {
						editingDomain = TransactionalEditingDomain.Factory.INSTANCE.createEditingDomain();
					}

					val monitor = new NullProgressMonitor as IProgressMonitor;
					// factory.translate(editingDomain, content, commandId, new NullProgressMonitor)
					factory.translate(editingDomain, content, commandId, monitor)

					// add save
//				try{
//					for (Resource resource2 : editingDomain.getResourceSet().getResources()){
//						if (resource2.isModified()){
//							
//							resource2.save(Collections.emptyMap());
//							monitor.worked(1);
//						
//						}
//					}
//					
//				}
//				catch (Exception e) {
//					//throw this as a CoreException
//					new Exception(e);
//				}
//				monitor.done();
					// --------------
					// save all resources that have been modified	
					val saveCommand = new SaveResourcesCommand(editingDomain)

					val wsRunnable = new IWorkspaceRunnable() {

						override void run(IProgressMonitor monitor) {
							try {
								saveCommand.execute(monitor, null);
							} catch (ExecutionException e) {
								val status = new Status(IStatus.ERROR, "ac.soton.xeventb.xmachine", "Nothing", e);
								throw new CoreException(status);
							}

						}
					}

					if (saveCommand.canExecute()) {
						val Resource[] emptyResource = #[]

						RodinCore.run(wsRunnable,
							getSchedulingRule(editingDomain.getResourceSet().getResources().toArray(emptyResource)),
							monitor);
					}
					monitor.done();
				// ------------
				}

			}

		}
	}

	def private ISchedulingRule getSchedulingRule(Resource[] resources) {
		if (resources.length == 0) {
			return null;
		} else if (resources.length == 1) {
			return WorkspaceSynchronizer.getFile(resources.get(0));
		} else {
			val project = getProject(resources.get(0));
			for (Resource resource : resources) {
				if (project != getProject(resource)) {
					return ResourcesPlugin.getWorkspace().getRoot();
				}
			}
			return project;
		}
	}

	def private IProject getProject(Resource resource) {
		val file = WorkspaceSynchronizer.getFile(resource);
		return file?.getProject() ?: null;
	}
}
