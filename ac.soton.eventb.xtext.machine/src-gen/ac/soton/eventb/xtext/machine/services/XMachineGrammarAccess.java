/*
 * generated by Xtext 2.10.0
 */
package ac.soton.eventb.xtext.machine.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineInclusionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIdKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtensionIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExtensionIdIDTerminalRuleCall_2_1_0 = (RuleCall)cExtensionIdAssignment_2_1.eContents().get(0);
		private final Keyword cMachineKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRefinesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRefinesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRefinesMachineInclusionCrossReference_5_1_0 = (CrossReference)cRefinesAssignment_5_1.eContents().get(0);
		private final RuleCall cRefinesMachineInclusionIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRefinesMachineInclusionCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIncludesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAbstractMachineAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cAbstractMachineMachineInclusionCrossReference_6_1_0 = (CrossReference)cAbstractMachineAssignment_6_1.eContents().get(0);
		private final RuleCall cAbstractMachineMachineInclusionIDTerminalRuleCall_6_1_0_1 = (RuleCall)cAbstractMachineMachineInclusionCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cToKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cConcreteMachineAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cConcreteMachineMachineInclusionCrossReference_7_1_0 = (CrossReference)cConcreteMachineAssignment_7_1.eContents().get(0);
		private final RuleCall cConcreteMachineMachineInclusionIDTerminalRuleCall_7_1_0_1 = (RuleCall)cConcreteMachineMachineInclusionCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cAsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cPrefixesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cPrefixesIDTerminalRuleCall_8_1_0 = (RuleCall)cPrefixesAssignment_8_1.eContents().get(0);
		private final Assignment cPrefixesAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cPrefixesIDTerminalRuleCall_8_2_0 = (RuleCall)cPrefixesAssignment_8_2.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////  as efeatureinclusion
		//
		////import "/ac.soton.eventb.inclusionfeature/model/inclusionfeature.ecore" as efeatureinclusion
		//
		/// *XMachine returns efeatureinclusion::MachineInclusion:
		//	{efeatureinclusion::MachineInclusion}
		//	(comment=(ML_COMMENT|SL_COMMENT))?
		//	//('id' extensionId = ID)// need to find a way to add it programmatically
		//	'machine' name=ID
		//	('refines' refines+=[emachine::Machine])?
		//	('sees' sees+=[econtext::Context]+)?
		//	('includes' abstractMachine = [emachine::Machine])?
		//    ('to' concreteMachine = [emachine::Machine])? //XIncludedMachine
		//	('as' prefixes += ID (prefixes += ID)*)? //string or ID //WS + prefixes += ID
		//	('variables' variables+=XVariable+)?
		//	('invariants' invariants+=XInvariant+)?
		//	('variant' variant=XVariant)?
		//	('events' events+=XEvent (events+=XEvent)*)?
		//	('end')
		//;* /
		//XMachine efeatureinclusion::MachineInclusion:
		//	{efeatureinclusion::MachineInclusion} comment=(ML_COMMENT | SL_COMMENT)? ('id' extensionId=ID)
		//	// need to find a way to add it programmatically
		// 'machine' name=ID ('refines'
		//	refines+=[efeatureinclusion::MachineInclusion])? ('includes' abstractMachine=[efeatureinclusion::MachineInclusion])?
		//	('to' concreteMachine=[efeatureinclusion::MachineInclusion])? ('as' prefixes+=ID prefixes+=ID*)? //string or ID
		//
		//	//('variables' variables+=XVariable+)?
		// //('invariants' invariants+=XInvariant+)?
		// //('variant' variant=XVariant)?
		//
		//	//('events' events+=XEvent (events+=XEvent)*)?
		// 'end'
		@Override public ParserRule getRule() { return rule; }
		
		//{efeatureinclusion::MachineInclusion} comment=(ML_COMMENT | SL_COMMENT)? ('id' extensionId=ID)
		//// need to find a way to add it programmatically
		// 'machine' name=ID ('refines'
		//refines+=[efeatureinclusion::MachineInclusion])? ('includes' abstractMachine=[efeatureinclusion::MachineInclusion])?
		//('to' concreteMachine=[efeatureinclusion::MachineInclusion])? ('as' prefixes+=ID prefixes+=ID*)? //string or ID
		//
		////('variables' variables+=XVariable+)?
		// //('invariants' invariants+=XInvariant+)?
		// //('variant' variant=XVariant)?
		//
		////('events' events+=XEvent (events+=XEvent)*)?
		// 'end'
		public Group getGroup() { return cGroup; }
		
		//{efeatureinclusion::MachineInclusion}
		public Action getMachineInclusionAction_0() { return cMachineInclusionAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//('id' extensionId=ID)
		public Group getGroup_2() { return cGroup_2; }
		
		//'id'
		public Keyword getIdKeyword_2_0() { return cIdKeyword_2_0; }
		
		//extensionId=ID
		public Assignment getExtensionIdAssignment_2_1() { return cExtensionIdAssignment_2_1; }
		
		//ID
		public RuleCall getExtensionIdIDTerminalRuleCall_2_1_0() { return cExtensionIdIDTerminalRuleCall_2_1_0; }
		
		//// need to find a way to add it programmatically
		// 'machine'
		public Keyword getMachineKeyword_3() { return cMachineKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//('refines' refines+=[efeatureinclusion::MachineInclusion])?
		public Group getGroup_5() { return cGroup_5; }
		
		//'refines'
		public Keyword getRefinesKeyword_5_0() { return cRefinesKeyword_5_0; }
		
		//refines+=[efeatureinclusion::MachineInclusion]
		public Assignment getRefinesAssignment_5_1() { return cRefinesAssignment_5_1; }
		
		//[efeatureinclusion::MachineInclusion]
		public CrossReference getRefinesMachineInclusionCrossReference_5_1_0() { return cRefinesMachineInclusionCrossReference_5_1_0; }
		
		//ID
		public RuleCall getRefinesMachineInclusionIDTerminalRuleCall_5_1_0_1() { return cRefinesMachineInclusionIDTerminalRuleCall_5_1_0_1; }
		
		//('includes' abstractMachine=[efeatureinclusion::MachineInclusion])?
		public Group getGroup_6() { return cGroup_6; }
		
		//'includes'
		public Keyword getIncludesKeyword_6_0() { return cIncludesKeyword_6_0; }
		
		//abstractMachine=[efeatureinclusion::MachineInclusion]
		public Assignment getAbstractMachineAssignment_6_1() { return cAbstractMachineAssignment_6_1; }
		
		//[efeatureinclusion::MachineInclusion]
		public CrossReference getAbstractMachineMachineInclusionCrossReference_6_1_0() { return cAbstractMachineMachineInclusionCrossReference_6_1_0; }
		
		//ID
		public RuleCall getAbstractMachineMachineInclusionIDTerminalRuleCall_6_1_0_1() { return cAbstractMachineMachineInclusionIDTerminalRuleCall_6_1_0_1; }
		
		//('to' concreteMachine=[efeatureinclusion::MachineInclusion])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'to'
		public Keyword getToKeyword_7_0() { return cToKeyword_7_0; }
		
		//concreteMachine=[efeatureinclusion::MachineInclusion]
		public Assignment getConcreteMachineAssignment_7_1() { return cConcreteMachineAssignment_7_1; }
		
		//[efeatureinclusion::MachineInclusion]
		public CrossReference getConcreteMachineMachineInclusionCrossReference_7_1_0() { return cConcreteMachineMachineInclusionCrossReference_7_1_0; }
		
		//ID
		public RuleCall getConcreteMachineMachineInclusionIDTerminalRuleCall_7_1_0_1() { return cConcreteMachineMachineInclusionIDTerminalRuleCall_7_1_0_1; }
		
		//('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'as'
		public Keyword getAsKeyword_8_0() { return cAsKeyword_8_0; }
		
		//prefixes+=ID
		public Assignment getPrefixesAssignment_8_1() { return cPrefixesAssignment_8_1; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_8_1_0() { return cPrefixesIDTerminalRuleCall_8_1_0; }
		
		//prefixes+=ID*
		public Assignment getPrefixesAssignment_8_2() { return cPrefixesAssignment_8_2; }
		
		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_8_2_0() { return cPrefixesIDTerminalRuleCall_8_2_0; }
		
		////string or ID
		// //('variables' variables+=XVariable+)?
		// //('invariants' invariants+=XInvariant+)?
		//
		////('variant' variant=XVariant)?
		// //('events' events+=XEvent (events+=XEvent)*)?
		// 'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class XMachine2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XMachine2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Keyword cMachine2Keyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRefinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRefinesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefinesMachineCrossReference_4_1_0 = (CrossReference)cRefinesAssignment_4_1.eContents().get(0);
		private final RuleCall cRefinesMachineIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefinesMachineCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSeesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSeesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSeesContextCrossReference_5_1_0 = (CrossReference)cSeesAssignment_5_1.eContents().get(0);
		private final RuleCall cSeesContextIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSeesContextCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVariablesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVariablesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVariablesXVariableParserRuleCall_6_1_0 = (RuleCall)cVariablesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInvariantsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInvariantsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cInvariantsXInvariantParserRuleCall_7_1_0 = (RuleCall)cInvariantsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVariantKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVariantAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVariantXVariantParserRuleCall_8_1_0 = (RuleCall)cVariantAssignment_8_1.eContents().get(0);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//XMachine2 emachine::Machine:
		//	{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)?
		//	//	('id' extensionId = ID)// need to find a way to add it programmatically
		// 'machine2' name=ID ('refines'
		//	refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables' variables+=XVariable+)?
		//	('invariants' invariants+=XInvariant+)? ('variant' variant=XVariant)? //('events' events+=XEvent (events+=XEvent)*)?
		//
		//	'end'
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)?
		////	('id' extensionId = ID)// need to find a way to add it programmatically
		// 'machine2' name=ID ('refines'
		//refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables' variables+=XVariable+)? ('invariants'
		//invariants+=XInvariant+)? ('variant' variant=XVariant)? //('events' events+=XEvent (events+=XEvent)*)?
		// 'end'
		public Group getGroup() { return cGroup; }
		
		//{emachine::Machine}
		public Action getMachineAction_0() { return cMachineAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		////	('id' extensionId = ID)// need to find a way to add it programmatically
		// 'machine2'
		public Keyword getMachine2Keyword_2() { return cMachine2Keyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('refines' refines+=[emachine::Machine])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'refines'
		public Keyword getRefinesKeyword_4_0() { return cRefinesKeyword_4_0; }
		
		//refines+=[emachine::Machine]
		public Assignment getRefinesAssignment_4_1() { return cRefinesAssignment_4_1; }
		
		//[emachine::Machine]
		public CrossReference getRefinesMachineCrossReference_4_1_0() { return cRefinesMachineCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRefinesMachineIDTerminalRuleCall_4_1_0_1() { return cRefinesMachineIDTerminalRuleCall_4_1_0_1; }
		
		//('sees' sees+=[econtext::Context]+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sees'
		public Keyword getSeesKeyword_5_0() { return cSeesKeyword_5_0; }
		
		//sees+=[econtext::Context]+
		public Assignment getSeesAssignment_5_1() { return cSeesAssignment_5_1; }
		
		//[econtext::Context]
		public CrossReference getSeesContextCrossReference_5_1_0() { return cSeesContextCrossReference_5_1_0; }
		
		//ID
		public RuleCall getSeesContextIDTerminalRuleCall_5_1_0_1() { return cSeesContextIDTerminalRuleCall_5_1_0_1; }
		
		//('variables' variables+=XVariable+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'variables'
		public Keyword getVariablesKeyword_6_0() { return cVariablesKeyword_6_0; }
		
		//variables+=XVariable+
		public Assignment getVariablesAssignment_6_1() { return cVariablesAssignment_6_1; }
		
		//XVariable
		public RuleCall getVariablesXVariableParserRuleCall_6_1_0() { return cVariablesXVariableParserRuleCall_6_1_0; }
		
		//('invariants' invariants+=XInvariant+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'invariants'
		public Keyword getInvariantsKeyword_7_0() { return cInvariantsKeyword_7_0; }
		
		//invariants+=XInvariant+
		public Assignment getInvariantsAssignment_7_1() { return cInvariantsAssignment_7_1; }
		
		//XInvariant
		public RuleCall getInvariantsXInvariantParserRuleCall_7_1_0() { return cInvariantsXInvariantParserRuleCall_7_1_0; }
		
		//('variant' variant=XVariant)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'variant'
		public Keyword getVariantKeyword_8_0() { return cVariantKeyword_8_0; }
		
		//variant=XVariant
		public Assignment getVariantAssignment_8_1() { return cVariantAssignment_8_1; }
		
		//XVariant
		public RuleCall getVariantXVariantParserRuleCall_8_1_0() { return cVariantXVariantParserRuleCall_8_1_0; }
		
		////('events' events+=XEvent (events+=XEvent)*)?
		// 'end'
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}
	public class XVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariableNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXVariableMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXVariableSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XVariable emachine::Variable:
		//	XVariableNoComment | XVariableMLComment | XVariableSLComment
		@Override public ParserRule getRule() { return rule; }
		
		//XVariableNoComment | XVariableMLComment | XVariableSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XVariableNoComment
		public RuleCall getXVariableNoCommentParserRuleCall_0() { return cXVariableNoCommentParserRuleCall_0; }
		
		//XVariableMLComment
		public RuleCall getXVariableMLCommentParserRuleCall_1() { return cXVariableMLCommentParserRuleCall_1; }
		
		//XVariableSLComment
		public RuleCall getXVariableSLCommentParserRuleCall_2() { return cXVariableSLCommentParserRuleCall_2; }
	}
	public class XVariableNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariableNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XVariableNoComment emachine::Variable:
		//	{emachine::Variable} name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variable} name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XVariableMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariableMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XVariableMLComment emachine::Variable:
		//	{emachine::Variable} comment=ML_COMMENT name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variable} comment=ML_COMMENT name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class XVariableSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariableSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XVariableSLComment emachine::Variable:
		//	{emachine::Variable} name=ID comment=SL_COMMENT
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variable} name=ID comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}
	public class XInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XInvariant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXInvariantNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXInvariantMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXInvariantSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XInvariant emachine::Invariant:
		//	XInvariantNoComment | XInvariantMLComment | XInvariantSLComment
		@Override public ParserRule getRule() { return rule; }
		
		//XInvariantNoComment | XInvariantMLComment | XInvariantSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XInvariantNoComment
		public RuleCall getXInvariantNoCommentParserRuleCall_0() { return cXInvariantNoCommentParserRuleCall_0; }
		
		//XInvariantMLComment
		public RuleCall getXInvariantMLCommentParserRuleCall_1() { return cXInvariantMLCommentParserRuleCall_1; }
		
		//XInvariantSLComment
		public RuleCall getXInvariantSLCommentParserRuleCall_2() { return cXInvariantSLCommentParserRuleCall_2; }
	}
	public class XInvariantNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XInvariantNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//XInvariantNoComment emachine::Invariant:
		//	{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'?
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}
	public class XInvariantMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XInvariantMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Assignment cTheoremAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTheoremTheoremKeyword_4_0 = (Keyword)cTheoremAssignment_4.eContents().get(0);
		
		//XInvariantMLComment emachine::Invariant:
		//	{emachine::Invariant} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Invariant} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_4() { return cTheoremAssignment_4; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_4_0() { return cTheoremTheoremKeyword_4_0; }
	}
	public class XInvariantSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XInvariantSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//XInvariantSLComment emachine::Invariant:
		//	{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_4_0() { return cCommentSL_COMMENTTerminalRuleCall_4_0; }
	}
	public class XVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariantNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXVariantMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXVariantSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XVariant emachine::Variant:
		//	XVariantNoComment | XVariantMLComment | XVariantSLComment
		@Override public ParserRule getRule() { return rule; }
		
		//XVariantNoComment | XVariantMLComment | XVariantSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XVariantNoComment
		public RuleCall getXVariantNoCommentParserRuleCall_0() { return cXVariantNoCommentParserRuleCall_0; }
		
		//XVariantMLComment
		public RuleCall getXVariantMLCommentParserRuleCall_1() { return cXVariantMLCommentParserRuleCall_1; }
		
		//XVariantSLComment
		public RuleCall getXVariantSLCommentParserRuleCall_2() { return cXVariantSLCommentParserRuleCall_2; }
	}
	public class XVariantNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariantNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//XVariantNoComment emachine::Variant:
		//	{emachine::Variant} expression=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variant} expression=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_1_0() { return cExpressionSTRINGTerminalRuleCall_1_0; }
	}
	public class XVariantMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariantMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//XVariantMLComment emachine::Variant:
		//	{emachine::Variant} comment=ML_COMMENT expression=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variant} comment=ML_COMMENT expression=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_2_0() { return cExpressionSTRINGTerminalRuleCall_2_0; }
	}
	public class XVariantSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariantSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XVariantSLComment emachine::Variant:
		//	{emachine::Variant} expression=STRING comment=SL_COMMENT
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variant} expression=STRING comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_1_0() { return cExpressionSTRINGTerminalRuleCall_1_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}
	public class XParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXParameterNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXParameterMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXParameterSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XParameter emachine::Parameter:
		//	XParameterNoComment | XParameterMLComment | XParameterSLComment
		@Override public ParserRule getRule() { return rule; }
		
		//XParameterNoComment | XParameterMLComment | XParameterSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XParameterNoComment
		public RuleCall getXParameterNoCommentParserRuleCall_0() { return cXParameterNoCommentParserRuleCall_0; }
		
		//XParameterMLComment
		public RuleCall getXParameterMLCommentParserRuleCall_1() { return cXParameterMLCommentParserRuleCall_1; }
		
		//XParameterSLComment
		public RuleCall getXParameterSLCommentParserRuleCall_2() { return cXParameterSLCommentParserRuleCall_2; }
	}
	public class XParameterNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XParameterNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XParameterNoComment emachine::Parameter:
		//	{emachine::Parameter} name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Parameter} name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XParameterMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XParameterMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XParameterMLComment emachine::Parameter:
		//	{emachine::Parameter} comment=ML_COMMENT name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Parameter} comment=ML_COMMENT name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class XParameterSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XParameterSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XParameterSLComment emachine::Parameter:
		//	{emachine::Parameter} name=ID comment=SL_COMMENT
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Parameter} name=ID comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}
	public class XGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XGuard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXGuardNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXGuardMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXGuardSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XGuard emachine::Guard:
		//	XGuardNoComment | XGuardMLComment | XGuardSLComment
		@Override public ParserRule getRule() { return rule; }
		
		//XGuardNoComment | XGuardMLComment | XGuardSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XGuardNoComment
		public RuleCall getXGuardNoCommentParserRuleCall_0() { return cXGuardNoCommentParserRuleCall_0; }
		
		//XGuardMLComment
		public RuleCall getXGuardMLCommentParserRuleCall_1() { return cXGuardMLCommentParserRuleCall_1; }
		
		//XGuardSLComment
		public RuleCall getXGuardSLCommentParserRuleCall_2() { return cXGuardSLCommentParserRuleCall_2; }
	}
	public class XGuardNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XGuardNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//XGuardNoComment emachine::Guard:
		//	{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'?
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}
	public class XGuardMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XGuardMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Assignment cTheoremAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTheoremTheoremKeyword_4_0 = (Keyword)cTheoremAssignment_4.eContents().get(0);
		
		//XGuardMLComment emachine::Guard:
		//	{emachine::Guard} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Guard} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_4() { return cTheoremAssignment_4; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_4_0() { return cTheoremTheoremKeyword_4_0; }
	}
	public class XGuardSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XGuardSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//XGuardSLComment emachine::Guard:
		//	{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_4_0() { return cCommentSL_COMMENTTerminalRuleCall_4_0; }
	}
	public class XWitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XWitness");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXWitnessNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXWitnessMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXWitnessSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XWitness emachine::Witness:
		//	XWitnessNoComment | XWitnessMLComment | XWitnessSLComment
		@Override public ParserRule getRule() { return rule; }
		
		//XWitnessNoComment | XWitnessMLComment | XWitnessSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XWitnessNoComment
		public RuleCall getXWitnessNoCommentParserRuleCall_0() { return cXWitnessNoCommentParserRuleCall_0; }
		
		//XWitnessMLComment
		public RuleCall getXWitnessMLCommentParserRuleCall_1() { return cXWitnessMLCommentParserRuleCall_1; }
		
		//XWitnessSLComment
		public RuleCall getXWitnessSLCommentParserRuleCall_2() { return cXWitnessSLCommentParserRuleCall_2; }
	}
	public class XWitnessNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XWitnessNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//XWitnessNoComment emachine::Witness:
		//	{emachine::Witness} name=XLABEL predicate=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Witness} name=XLABEL predicate=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
	}
	public class XWitnessMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XWitnessMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		
		//XWitnessMLComment emachine::Witness:
		//	{emachine::Witness} comment=ML_COMMENT name=XLABEL predicate=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Witness} comment=ML_COMMENT name=XLABEL predicate=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
	}
	public class XWitnessSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XWitnessSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		//XWitnessSLComment emachine::Witness:
		//	{emachine::Witness} name=XLABEL predicate=STRING comment=SL_COMMENT
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Witness} name=XLABEL predicate=STRING comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_3_0() { return cCommentSL_COMMENTTerminalRuleCall_3_0; }
	}
	public class XActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXActionNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXActionMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXActionSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XAction emachine::Action:
		//	XActionNoComment | XActionMLComment | XActionSLComment
		@Override public ParserRule getRule() { return rule; }
		
		//XActionNoComment | XActionMLComment | XActionSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XActionNoComment
		public RuleCall getXActionNoCommentParserRuleCall_0() { return cXActionNoCommentParserRuleCall_0; }
		
		//XActionMLComment
		public RuleCall getXActionMLCommentParserRuleCall_1() { return cXActionMLCommentParserRuleCall_1; }
		
		//XActionSLComment
		public RuleCall getXActionSLCommentParserRuleCall_2() { return cXActionSLCommentParserRuleCall_2; }
	}
	public class XActionNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XActionNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionSTRINGTerminalRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//XActionNoComment emachine::Action:
		//	{emachine::Action} name=XLABEL action=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Action} name=XLABEL action=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//action=STRING
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_2_0() { return cActionSTRINGTerminalRuleCall_2_0; }
	}
	public class XActionMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XActionMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionSTRINGTerminalRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//XActionMLComment emachine::Action:
		//	{emachine::Action} comment=ML_COMMENT name=XLABEL action=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Action} comment=ML_COMMENT name=XLABEL action=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//action=STRING
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_3_0() { return cActionSTRINGTerminalRuleCall_3_0; }
	}
	public class XActionSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XActionSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionSTRINGTerminalRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		//XActionSLComment emachine::Action:
		//	{emachine::Action} name=XLABEL action=STRING comment=SL_COMMENT
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Action} name=XLABEL action=STRING comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//action=STRING
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_2_0() { return cActionSTRINGTerminalRuleCall_2_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_3_0() { return cCommentSL_COMMENTTerminalRuleCall_3_0; }
	}
	
	public class XConvergenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XConvergence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrdinaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrdinaryOrdinaryKeyword_0_0 = (Keyword)cOrdinaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConvergentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConvergentConvergentKeyword_1_0 = (Keyword)cConvergentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAnticipatedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAnticipatedAnticipatedKeyword_2_0 = (Keyword)cAnticipatedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum XConvergence returns emachine::Convergence:
		//	ordinary | convergent | anticipated;
		public EnumRule getRule() { return rule; }
		
		//ordinary | convergent | anticipated
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ordinary
		public EnumLiteralDeclaration getOrdinaryEnumLiteralDeclaration_0() { return cOrdinaryEnumLiteralDeclaration_0; }
		
		//'ordinary'
		public Keyword getOrdinaryOrdinaryKeyword_0_0() { return cOrdinaryOrdinaryKeyword_0_0; }
		
		//convergent
		public EnumLiteralDeclaration getConvergentEnumLiteralDeclaration_1() { return cConvergentEnumLiteralDeclaration_1; }
		
		//'convergent'
		public Keyword getConvergentConvergentKeyword_1_0() { return cConvergentConvergentKeyword_1_0; }
		
		//anticipated
		public EnumLiteralDeclaration getAnticipatedEnumLiteralDeclaration_2() { return cAnticipatedEnumLiteralDeclaration_2; }
		
		//'anticipated'
		public Keyword getAnticipatedAnticipatedKeyword_2_0() { return cAnticipatedAnticipatedKeyword_2_0; }
	}
	
	private final XMachineElements pXMachine;
	private final XMachine2Elements pXMachine2;
	private final XVariableElements pXVariable;
	private final XVariableNoCommentElements pXVariableNoComment;
	private final XVariableMLCommentElements pXVariableMLComment;
	private final XVariableSLCommentElements pXVariableSLComment;
	private final XInvariantElements pXInvariant;
	private final XInvariantNoCommentElements pXInvariantNoComment;
	private final XInvariantMLCommentElements pXInvariantMLComment;
	private final XInvariantSLCommentElements pXInvariantSLComment;
	private final TerminalRule tXLABEL;
	private final XVariantElements pXVariant;
	private final XVariantNoCommentElements pXVariantNoComment;
	private final XVariantMLCommentElements pXVariantMLComment;
	private final XVariantSLCommentElements pXVariantSLComment;
	private final XConvergenceElements eXConvergence;
	private final XParameterElements pXParameter;
	private final XParameterNoCommentElements pXParameterNoComment;
	private final XParameterMLCommentElements pXParameterMLComment;
	private final XParameterSLCommentElements pXParameterSLComment;
	private final XGuardElements pXGuard;
	private final XGuardNoCommentElements pXGuardNoComment;
	private final XGuardMLCommentElements pXGuardMLComment;
	private final XGuardSLCommentElements pXGuardSLComment;
	private final XWitnessElements pXWitness;
	private final XWitnessNoCommentElements pXWitnessNoComment;
	private final XWitnessMLCommentElements pXWitnessMLComment;
	private final XWitnessSLCommentElements pXWitnessSLComment;
	private final XActionElements pXAction;
	private final XActionNoCommentElements pXActionNoComment;
	private final XActionMLCommentElements pXActionMLComment;
	private final XActionSLCommentElements pXActionSLComment;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXMachine = new XMachineElements();
		this.pXMachine2 = new XMachine2Elements();
		this.pXVariable = new XVariableElements();
		this.pXVariableNoComment = new XVariableNoCommentElements();
		this.pXVariableMLComment = new XVariableMLCommentElements();
		this.pXVariableSLComment = new XVariableSLCommentElements();
		this.pXInvariant = new XInvariantElements();
		this.pXInvariantNoComment = new XInvariantNoCommentElements();
		this.pXInvariantMLComment = new XInvariantMLCommentElements();
		this.pXInvariantSLComment = new XInvariantSLCommentElements();
		this.tXLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XLABEL");
		this.pXVariant = new XVariantElements();
		this.pXVariantNoComment = new XVariantNoCommentElements();
		this.pXVariantMLComment = new XVariantMLCommentElements();
		this.pXVariantSLComment = new XVariantSLCommentElements();
		this.eXConvergence = new XConvergenceElements();
		this.pXParameter = new XParameterElements();
		this.pXParameterNoComment = new XParameterNoCommentElements();
		this.pXParameterMLComment = new XParameterMLCommentElements();
		this.pXParameterSLComment = new XParameterSLCommentElements();
		this.pXGuard = new XGuardElements();
		this.pXGuardNoComment = new XGuardNoCommentElements();
		this.pXGuardMLComment = new XGuardMLCommentElements();
		this.pXGuardSLComment = new XGuardSLCommentElements();
		this.pXWitness = new XWitnessElements();
		this.pXWitnessNoComment = new XWitnessNoCommentElements();
		this.pXWitnessMLComment = new XWitnessMLCommentElements();
		this.pXWitnessSLComment = new XWitnessSLCommentElements();
		this.pXAction = new XActionElements();
		this.pXActionNoComment = new XActionNoCommentElements();
		this.pXActionMLComment = new XActionMLCommentElements();
		this.pXActionSLComment = new XActionSLCommentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.eventb.xtext.machine.XMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////  as efeatureinclusion
	//
	////import "/ac.soton.eventb.inclusionfeature/model/inclusionfeature.ecore" as efeatureinclusion
	//
	/// *XMachine returns efeatureinclusion::MachineInclusion:
	//	{efeatureinclusion::MachineInclusion}
	//	(comment=(ML_COMMENT|SL_COMMENT))?
	//	//('id' extensionId = ID)// need to find a way to add it programmatically
	//	'machine' name=ID
	//	('refines' refines+=[emachine::Machine])?
	//	('sees' sees+=[econtext::Context]+)?
	//	('includes' abstractMachine = [emachine::Machine])?
	//    ('to' concreteMachine = [emachine::Machine])? //XIncludedMachine
	//	('as' prefixes += ID (prefixes += ID)*)? //string or ID //WS + prefixes += ID
	//	('variables' variables+=XVariable+)?
	//	('invariants' invariants+=XInvariant+)?
	//	('variant' variant=XVariant)?
	//	('events' events+=XEvent (events+=XEvent)*)?
	//	('end')
	//;* /
	//XMachine efeatureinclusion::MachineInclusion:
	//	{efeatureinclusion::MachineInclusion} comment=(ML_COMMENT | SL_COMMENT)? ('id' extensionId=ID)
	//	// need to find a way to add it programmatically
	// 'machine' name=ID ('refines'
	//	refines+=[efeatureinclusion::MachineInclusion])? ('includes' abstractMachine=[efeatureinclusion::MachineInclusion])?
	//	('to' concreteMachine=[efeatureinclusion::MachineInclusion])? ('as' prefixes+=ID prefixes+=ID*)? //string or ID
	//
	//	//('variables' variables+=XVariable+)?
	// //('invariants' invariants+=XInvariant+)?
	// //('variant' variant=XVariant)?
	//
	//	//('events' events+=XEvent (events+=XEvent)*)?
	// 'end'
	public XMachineElements getXMachineAccess() {
		return pXMachine;
	}
	
	public ParserRule getXMachineRule() {
		return getXMachineAccess().getRule();
	}
	
	//XMachine2 emachine::Machine:
	//	{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)?
	//	//	('id' extensionId = ID)// need to find a way to add it programmatically
	// 'machine2' name=ID ('refines'
	//	refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables' variables+=XVariable+)?
	//	('invariants' invariants+=XInvariant+)? ('variant' variant=XVariant)? //('events' events+=XEvent (events+=XEvent)*)?
	//
	//	'end'
	public XMachine2Elements getXMachine2Access() {
		return pXMachine2;
	}
	
	public ParserRule getXMachine2Rule() {
		return getXMachine2Access().getRule();
	}
	
	//XVariable emachine::Variable:
	//	XVariableNoComment | XVariableMLComment | XVariableSLComment
	public XVariableElements getXVariableAccess() {
		return pXVariable;
	}
	
	public ParserRule getXVariableRule() {
		return getXVariableAccess().getRule();
	}
	
	//XVariableNoComment emachine::Variable:
	//	{emachine::Variable} name=ID
	public XVariableNoCommentElements getXVariableNoCommentAccess() {
		return pXVariableNoComment;
	}
	
	public ParserRule getXVariableNoCommentRule() {
		return getXVariableNoCommentAccess().getRule();
	}
	
	//XVariableMLComment emachine::Variable:
	//	{emachine::Variable} comment=ML_COMMENT name=ID
	public XVariableMLCommentElements getXVariableMLCommentAccess() {
		return pXVariableMLComment;
	}
	
	public ParserRule getXVariableMLCommentRule() {
		return getXVariableMLCommentAccess().getRule();
	}
	
	//XVariableSLComment emachine::Variable:
	//	{emachine::Variable} name=ID comment=SL_COMMENT
	public XVariableSLCommentElements getXVariableSLCommentAccess() {
		return pXVariableSLComment;
	}
	
	public ParserRule getXVariableSLCommentRule() {
		return getXVariableSLCommentAccess().getRule();
	}
	
	//XInvariant emachine::Invariant:
	//	XInvariantNoComment | XInvariantMLComment | XInvariantSLComment
	public XInvariantElements getXInvariantAccess() {
		return pXInvariant;
	}
	
	public ParserRule getXInvariantRule() {
		return getXInvariantAccess().getRule();
	}
	
	//XInvariantNoComment emachine::Invariant:
	//	{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'?
	public XInvariantNoCommentElements getXInvariantNoCommentAccess() {
		return pXInvariantNoComment;
	}
	
	public ParserRule getXInvariantNoCommentRule() {
		return getXInvariantNoCommentAccess().getRule();
	}
	
	//XInvariantMLComment emachine::Invariant:
	//	{emachine::Invariant} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
	public XInvariantMLCommentElements getXInvariantMLCommentAccess() {
		return pXInvariantMLComment;
	}
	
	public ParserRule getXInvariantMLCommentRule() {
		return getXInvariantMLCommentAccess().getRule();
	}
	
	//XInvariantSLComment emachine::Invariant:
	//	{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
	public XInvariantSLCommentElements getXInvariantSLCommentAccess() {
		return pXInvariantSLComment;
	}
	
	public ParserRule getXInvariantSLCommentRule() {
		return getXInvariantSLCommentAccess().getRule();
	}
	
	//terminal XLABEL:
	//	'@' !':'+ ':';
	public TerminalRule getXLABELRule() {
		return tXLABEL;
	}
	
	//XVariant emachine::Variant:
	//	XVariantNoComment | XVariantMLComment | XVariantSLComment
	public XVariantElements getXVariantAccess() {
		return pXVariant;
	}
	
	public ParserRule getXVariantRule() {
		return getXVariantAccess().getRule();
	}
	
	//XVariantNoComment emachine::Variant:
	//	{emachine::Variant} expression=STRING
	public XVariantNoCommentElements getXVariantNoCommentAccess() {
		return pXVariantNoComment;
	}
	
	public ParserRule getXVariantNoCommentRule() {
		return getXVariantNoCommentAccess().getRule();
	}
	
	//XVariantMLComment emachine::Variant:
	//	{emachine::Variant} comment=ML_COMMENT expression=STRING
	public XVariantMLCommentElements getXVariantMLCommentAccess() {
		return pXVariantMLComment;
	}
	
	public ParserRule getXVariantMLCommentRule() {
		return getXVariantMLCommentAccess().getRule();
	}
	
	//XVariantSLComment emachine::Variant:
	//	{emachine::Variant} expression=STRING comment=SL_COMMENT
	public XVariantSLCommentElements getXVariantSLCommentAccess() {
		return pXVariantSLComment;
	}
	
	public ParserRule getXVariantSLCommentRule() {
		return getXVariantSLCommentAccess().getRule();
	}
	
	//enum XConvergence returns emachine::Convergence:
	//	ordinary | convergent | anticipated;
	public XConvergenceElements getXConvergenceAccess() {
		return eXConvergence;
	}
	
	public EnumRule getXConvergenceRule() {
		return getXConvergenceAccess().getRule();
	}
	
	//XParameter emachine::Parameter:
	//	XParameterNoComment | XParameterMLComment | XParameterSLComment
	public XParameterElements getXParameterAccess() {
		return pXParameter;
	}
	
	public ParserRule getXParameterRule() {
		return getXParameterAccess().getRule();
	}
	
	//XParameterNoComment emachine::Parameter:
	//	{emachine::Parameter} name=ID
	public XParameterNoCommentElements getXParameterNoCommentAccess() {
		return pXParameterNoComment;
	}
	
	public ParserRule getXParameterNoCommentRule() {
		return getXParameterNoCommentAccess().getRule();
	}
	
	//XParameterMLComment emachine::Parameter:
	//	{emachine::Parameter} comment=ML_COMMENT name=ID
	public XParameterMLCommentElements getXParameterMLCommentAccess() {
		return pXParameterMLComment;
	}
	
	public ParserRule getXParameterMLCommentRule() {
		return getXParameterMLCommentAccess().getRule();
	}
	
	//XParameterSLComment emachine::Parameter:
	//	{emachine::Parameter} name=ID comment=SL_COMMENT
	public XParameterSLCommentElements getXParameterSLCommentAccess() {
		return pXParameterSLComment;
	}
	
	public ParserRule getXParameterSLCommentRule() {
		return getXParameterSLCommentAccess().getRule();
	}
	
	//XGuard emachine::Guard:
	//	XGuardNoComment | XGuardMLComment | XGuardSLComment
	public XGuardElements getXGuardAccess() {
		return pXGuard;
	}
	
	public ParserRule getXGuardRule() {
		return getXGuardAccess().getRule();
	}
	
	//XGuardNoComment emachine::Guard:
	//	{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'?
	public XGuardNoCommentElements getXGuardNoCommentAccess() {
		return pXGuardNoComment;
	}
	
	public ParserRule getXGuardNoCommentRule() {
		return getXGuardNoCommentAccess().getRule();
	}
	
	//XGuardMLComment emachine::Guard:
	//	{emachine::Guard} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
	public XGuardMLCommentElements getXGuardMLCommentAccess() {
		return pXGuardMLComment;
	}
	
	public ParserRule getXGuardMLCommentRule() {
		return getXGuardMLCommentAccess().getRule();
	}
	
	//XGuardSLComment emachine::Guard:
	//	{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
	public XGuardSLCommentElements getXGuardSLCommentAccess() {
		return pXGuardSLComment;
	}
	
	public ParserRule getXGuardSLCommentRule() {
		return getXGuardSLCommentAccess().getRule();
	}
	
	//XWitness emachine::Witness:
	//	XWitnessNoComment | XWitnessMLComment | XWitnessSLComment
	public XWitnessElements getXWitnessAccess() {
		return pXWitness;
	}
	
	public ParserRule getXWitnessRule() {
		return getXWitnessAccess().getRule();
	}
	
	//XWitnessNoComment emachine::Witness:
	//	{emachine::Witness} name=XLABEL predicate=STRING
	public XWitnessNoCommentElements getXWitnessNoCommentAccess() {
		return pXWitnessNoComment;
	}
	
	public ParserRule getXWitnessNoCommentRule() {
		return getXWitnessNoCommentAccess().getRule();
	}
	
	//XWitnessMLComment emachine::Witness:
	//	{emachine::Witness} comment=ML_COMMENT name=XLABEL predicate=STRING
	public XWitnessMLCommentElements getXWitnessMLCommentAccess() {
		return pXWitnessMLComment;
	}
	
	public ParserRule getXWitnessMLCommentRule() {
		return getXWitnessMLCommentAccess().getRule();
	}
	
	//XWitnessSLComment emachine::Witness:
	//	{emachine::Witness} name=XLABEL predicate=STRING comment=SL_COMMENT
	public XWitnessSLCommentElements getXWitnessSLCommentAccess() {
		return pXWitnessSLComment;
	}
	
	public ParserRule getXWitnessSLCommentRule() {
		return getXWitnessSLCommentAccess().getRule();
	}
	
	//XAction emachine::Action:
	//	XActionNoComment | XActionMLComment | XActionSLComment
	public XActionElements getXActionAccess() {
		return pXAction;
	}
	
	public ParserRule getXActionRule() {
		return getXActionAccess().getRule();
	}
	
	//XActionNoComment emachine::Action:
	//	{emachine::Action} name=XLABEL action=STRING
	public XActionNoCommentElements getXActionNoCommentAccess() {
		return pXActionNoComment;
	}
	
	public ParserRule getXActionNoCommentRule() {
		return getXActionNoCommentAccess().getRule();
	}
	
	//XActionMLComment emachine::Action:
	//	{emachine::Action} comment=ML_COMMENT name=XLABEL action=STRING
	public XActionMLCommentElements getXActionMLCommentAccess() {
		return pXActionMLComment;
	}
	
	public ParserRule getXActionMLCommentRule() {
		return getXActionMLCommentAccess().getRule();
	}
	
	//XActionSLComment emachine::Action:
	//	{emachine::Action} name=XLABEL action=STRING comment=SL_COMMENT
	public XActionSLCommentElements getXActionSLCommentAccess() {
		return pXActionSLComment;
	}
	
	public ParserRule getXActionSLCommentRule() {
		return getXActionSLCommentAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
