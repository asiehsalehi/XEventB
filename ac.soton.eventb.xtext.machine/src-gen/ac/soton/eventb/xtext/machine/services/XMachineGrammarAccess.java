/*
 * generated by Xtext 2.10.0
 */
package ac.soton.eventb.xtext.machine.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Keyword cMachineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRefinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRefinesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefinesMachineCrossReference_4_1_0 = (CrossReference)cRefinesAssignment_4_1.eContents().get(0);
		private final RuleCall cRefinesMachineIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefinesMachineCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSeesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSeesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cSeesContextCrossReference_5_1_0 = (CrossReference)cSeesAssignment_5_1.eContents().get(0);
		private final RuleCall cSeesContextIDTerminalRuleCall_5_1_0_1 = (RuleCall)cSeesContextCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVariablesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVariablesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVariablesXVariableParserRuleCall_6_1_0 = (RuleCall)cVariablesAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInvariantsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cInvariantsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cInvariantsXInvariantParserRuleCall_7_1_0 = (RuleCall)cInvariantsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cVariantKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cVariantAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cVariantXVariantParserRuleCall_8_1_0 = (RuleCall)cVariantAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cEventsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cEventsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cEventsXEventParserRuleCall_9_1_0 = (RuleCall)cEventsAssignment_9_1.eContents().get(0);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Keyword cSemicolonKeyword_9_2_0 = (Keyword)cGroup_9_2.eContents().get(0);
		private final Assignment cEventsAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cEventsXEventParserRuleCall_9_2_1_0 = (RuleCall)cEventsAssignment_9_2_1.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//XMachine emachine::Machine:
		//	{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)?
		//	'machine' name=ID ('refines' refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables'
		//	variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variant' variant=XVariant)? ('events' events+=XEvent
		//	(';' events+=XEvent)*)?
		//	'end'
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)? 'machine' name=ID ('refines' refines+=[emachine::Machine])?
		//('sees' sees+=[econtext::Context]+)? ('variables' variables+=XVariable+)? ('invariants' invariants+=XInvariant+)?
		//('variant' variant=XVariant)? ('events' events+=XEvent (';' events+=XEvent)*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{emachine::Machine}
		public Action getMachineAction_0() { return cMachineAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//'machine'
		public Keyword getMachineKeyword_2() { return cMachineKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('refines' refines+=[emachine::Machine])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'refines'
		public Keyword getRefinesKeyword_4_0() { return cRefinesKeyword_4_0; }
		
		//refines+=[emachine::Machine]
		public Assignment getRefinesAssignment_4_1() { return cRefinesAssignment_4_1; }
		
		//[emachine::Machine]
		public CrossReference getRefinesMachineCrossReference_4_1_0() { return cRefinesMachineCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRefinesMachineIDTerminalRuleCall_4_1_0_1() { return cRefinesMachineIDTerminalRuleCall_4_1_0_1; }
		
		//('sees' sees+=[econtext::Context]+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sees'
		public Keyword getSeesKeyword_5_0() { return cSeesKeyword_5_0; }
		
		//sees+=[econtext::Context]+
		public Assignment getSeesAssignment_5_1() { return cSeesAssignment_5_1; }
		
		//[econtext::Context]
		public CrossReference getSeesContextCrossReference_5_1_0() { return cSeesContextCrossReference_5_1_0; }
		
		//ID
		public RuleCall getSeesContextIDTerminalRuleCall_5_1_0_1() { return cSeesContextIDTerminalRuleCall_5_1_0_1; }
		
		//('variables' variables+=XVariable+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'variables'
		public Keyword getVariablesKeyword_6_0() { return cVariablesKeyword_6_0; }
		
		//variables+=XVariable+
		public Assignment getVariablesAssignment_6_1() { return cVariablesAssignment_6_1; }
		
		//XVariable
		public RuleCall getVariablesXVariableParserRuleCall_6_1_0() { return cVariablesXVariableParserRuleCall_6_1_0; }
		
		//('invariants' invariants+=XInvariant+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'invariants'
		public Keyword getInvariantsKeyword_7_0() { return cInvariantsKeyword_7_0; }
		
		//invariants+=XInvariant+
		public Assignment getInvariantsAssignment_7_1() { return cInvariantsAssignment_7_1; }
		
		//XInvariant
		public RuleCall getInvariantsXInvariantParserRuleCall_7_1_0() { return cInvariantsXInvariantParserRuleCall_7_1_0; }
		
		//('variant' variant=XVariant)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'variant'
		public Keyword getVariantKeyword_8_0() { return cVariantKeyword_8_0; }
		
		//variant=XVariant
		public Assignment getVariantAssignment_8_1() { return cVariantAssignment_8_1; }
		
		//XVariant
		public RuleCall getVariantXVariantParserRuleCall_8_1_0() { return cVariantXVariantParserRuleCall_8_1_0; }
		
		//('events' events+=XEvent (';' events+=XEvent)*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'events'
		public Keyword getEventsKeyword_9_0() { return cEventsKeyword_9_0; }
		
		//events+=XEvent
		public Assignment getEventsAssignment_9_1() { return cEventsAssignment_9_1; }
		
		//XEvent
		public RuleCall getEventsXEventParserRuleCall_9_1_0() { return cEventsXEventParserRuleCall_9_1_0; }
		
		//(';' events+=XEvent)*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//';'
		public Keyword getSemicolonKeyword_9_2_0() { return cSemicolonKeyword_9_2_0; }
		
		//events+=XEvent
		public Assignment getEventsAssignment_9_2_1() { return cEventsAssignment_9_2_1; }
		
		//XEvent
		public RuleCall getEventsXEventParserRuleCall_9_2_1_0() { return cEventsXEventParserRuleCall_9_2_1_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class XVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XVariable emachine::Variable:
		//	{emachine::Variable} comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variable} comment=(ML_COMMENT | SL_COMMENT)? name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class XInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XInvariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Assignment cTheoremAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTheoremTheoremKeyword_4_0 = (Keyword)cTheoremAssignment_4.eContents().get(0);
		
		//XInvariant emachine::Invariant:
		//	{emachine::Invariant} comment=(ML_COMMENT | SL_COMMENT)?
		//	name=XLABEL predicate=STRING theorem?='theorem'?
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Invariant} comment=(ML_COMMENT | SL_COMMENT)? name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_4() { return cTheoremAssignment_4; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_4_0() { return cTheoremTheoremKeyword_4_0; }
	}
	public class XVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XVariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//XVariant emachine::Variant:
		//	{emachine::Variant} comment=(ML_COMMENT | SL_COMMENT)?
		//	expression=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Variant} comment=(ML_COMMENT | SL_COMMENT)? expression=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//expression=STRING
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_2_0() { return cExpressionSTRINGTerminalRuleCall_2_0; }
	}
	public class XEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cExtendedAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cExtendedExtendedKeyword_3_0_0 = (Keyword)cExtendedAssignment_3_0.eContents().get(0);
		private final Assignment cConvergenceAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cConvergenceXConvergenceEnumRuleCall_3_1_0 = (RuleCall)cConvergenceAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRefinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRefinesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefinesEventCrossReference_4_1_0 = (CrossReference)cRefinesAssignment_4_1.eContents().get(0);
		private final RuleCall cRefinesEventIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefinesEventCrossReference_4_1_0.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cGroup_5_0.eContents().get(0);
		private final Keyword cWithKeyword_5_0_0_0 = (Keyword)cGroup_5_0_0.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_0_0_1 = (Assignment)cGroup_5_0_0.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_5_0_0_1_0 = (RuleCall)cWitnessesAssignment_5_0_0_1.eContents().get(0);
		private final Keyword cBeginKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cActionsAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cActionsXActionParserRuleCall_5_0_2_0 = (RuleCall)cActionsAssignment_5_0_2.eContents().get(0);
		private final Keyword cEndKeyword_5_0_3 = (Keyword)cGroup_5_0.eContents().get(3);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cWhenKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cGuardsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cGuardsXGuardParserRuleCall_5_1_1_0 = (RuleCall)cGuardsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cGroup_5_1.eContents().get(2);
		private final Keyword cWithKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_5_1_2_1_0 = (RuleCall)cWitnessesAssignment_5_1_2_1.eContents().get(0);
		private final Group cGroup_5_1_3 = (Group)cGroup_5_1.eContents().get(3);
		private final Keyword cThenKeyword_5_1_3_0 = (Keyword)cGroup_5_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_5_1_3_1 = (Assignment)cGroup_5_1_3.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_5_1_3_1_0 = (RuleCall)cActionsAssignment_5_1_3_1.eContents().get(0);
		private final Keyword cEndKeyword_5_1_4 = (Keyword)cGroup_5_1.eContents().get(4);
		private final Group cGroup_5_2 = (Group)cAlternatives_5.eContents().get(2);
		private final Keyword cAnyKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cParametersAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cParametersXParameterParserRuleCall_5_2_1_0 = (RuleCall)cParametersAssignment_5_2_1.eContents().get(0);
		private final Keyword cWhereKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		private final Assignment cGuardsAssignment_5_2_3 = (Assignment)cGroup_5_2.eContents().get(3);
		private final RuleCall cGuardsXGuardParserRuleCall_5_2_3_0 = (RuleCall)cGuardsAssignment_5_2_3.eContents().get(0);
		private final Group cGroup_5_2_4 = (Group)cGroup_5_2.eContents().get(4);
		private final Keyword cWithKeyword_5_2_4_0 = (Keyword)cGroup_5_2_4.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_2_4_1 = (Assignment)cGroup_5_2_4.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_5_2_4_1_0 = (RuleCall)cWitnessesAssignment_5_2_4_1.eContents().get(0);
		private final Group cGroup_5_2_5 = (Group)cGroup_5_2.eContents().get(5);
		private final Keyword cThenKeyword_5_2_5_0 = (Keyword)cGroup_5_2_5.eContents().get(0);
		private final Assignment cActionsAssignment_5_2_5_1 = (Assignment)cGroup_5_2_5.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_5_2_5_1_0 = (RuleCall)cActionsAssignment_5_2_5_1.eContents().get(0);
		private final Keyword cEndKeyword_5_2_6 = (Keyword)cGroup_5_2.eContents().get(6);
		
		//XEvent emachine::Event:
		//	{emachine::Event} comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID (extended?='extended'? & convergence=XConvergence?) ('refines' refines+=[emachine::Event]+)? (('with'
		//	witnesses+=XWitness+)?
		//	'begin'
		//	actions+=XAction+
		//	'end'
		//	|
		//	'when'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?
		//	'end'
		//	|
		//	'any'
		//	parameters+=XParameter+
		//	'where'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?
		//	'end')?
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Event} comment=(ML_COMMENT | SL_COMMENT)? name=ID (extended?='extended'? & convergence=XConvergence?)
		//('refines' refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ 'end' | 'when'
		//guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)? 'end' | 'any' parameters+=XParameter+
		//'where' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)? 'end')?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(extended?='extended'? & convergence=XConvergence?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//extended?='extended'?
		public Assignment getExtendedAssignment_3_0() { return cExtendedAssignment_3_0; }
		
		//'extended'
		public Keyword getExtendedExtendedKeyword_3_0_0() { return cExtendedExtendedKeyword_3_0_0; }
		
		//convergence=XConvergence?
		public Assignment getConvergenceAssignment_3_1() { return cConvergenceAssignment_3_1; }
		
		//XConvergence
		public RuleCall getConvergenceXConvergenceEnumRuleCall_3_1_0() { return cConvergenceXConvergenceEnumRuleCall_3_1_0; }
		
		//('refines' refines+=[emachine::Event]+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'refines'
		public Keyword getRefinesKeyword_4_0() { return cRefinesKeyword_4_0; }
		
		//refines+=[emachine::Event]+
		public Assignment getRefinesAssignment_4_1() { return cRefinesAssignment_4_1; }
		
		//[emachine::Event]
		public CrossReference getRefinesEventCrossReference_4_1_0() { return cRefinesEventCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRefinesEventIDTerminalRuleCall_4_1_0_1() { return cRefinesEventIDTerminalRuleCall_4_1_0_1; }
		
		//(('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ 'end' | 'when' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)? 'end' | 'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with'
		//witnesses+=XWitness+)? ('then' actions+=XAction+)? 'end')?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ 'end'
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//('with' witnesses+=XWitness+)?
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }
		
		//'with'
		public Keyword getWithKeyword_5_0_0_0() { return cWithKeyword_5_0_0_0; }
		
		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_5_0_0_1() { return cWitnessesAssignment_5_0_0_1; }
		
		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_5_0_0_1_0() { return cWitnessesXWitnessParserRuleCall_5_0_0_1_0; }
		
		//'begin'
		public Keyword getBeginKeyword_5_0_1() { return cBeginKeyword_5_0_1; }
		
		//actions+=XAction+
		public Assignment getActionsAssignment_5_0_2() { return cActionsAssignment_5_0_2; }
		
		//XAction
		public RuleCall getActionsXActionParserRuleCall_5_0_2_0() { return cActionsXActionParserRuleCall_5_0_2_0; }
		
		//'end'
		public Keyword getEndKeyword_5_0_3() { return cEndKeyword_5_0_3; }
		
		//'when' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)? 'end'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'when'
		public Keyword getWhenKeyword_5_1_0() { return cWhenKeyword_5_1_0; }
		
		//guards+=XGuard+
		public Assignment getGuardsAssignment_5_1_1() { return cGuardsAssignment_5_1_1; }
		
		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_5_1_1_0() { return cGuardsXGuardParserRuleCall_5_1_1_0; }
		
		//('with' witnesses+=XWitness+)?
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }
		
		//'with'
		public Keyword getWithKeyword_5_1_2_0() { return cWithKeyword_5_1_2_0; }
		
		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_5_1_2_1() { return cWitnessesAssignment_5_1_2_1; }
		
		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_5_1_2_1_0() { return cWitnessesXWitnessParserRuleCall_5_1_2_1_0; }
		
		//('then' actions+=XAction+)?
		public Group getGroup_5_1_3() { return cGroup_5_1_3; }
		
		//'then'
		public Keyword getThenKeyword_5_1_3_0() { return cThenKeyword_5_1_3_0; }
		
		//actions+=XAction+
		public Assignment getActionsAssignment_5_1_3_1() { return cActionsAssignment_5_1_3_1; }
		
		//XAction
		public RuleCall getActionsXActionParserRuleCall_5_1_3_1_0() { return cActionsXActionParserRuleCall_5_1_3_1_0; }
		
		//'end'
		public Keyword getEndKeyword_5_1_4() { return cEndKeyword_5_1_4; }
		
		//'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)? 'end'
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//'any'
		public Keyword getAnyKeyword_5_2_0() { return cAnyKeyword_5_2_0; }
		
		//parameters+=XParameter+
		public Assignment getParametersAssignment_5_2_1() { return cParametersAssignment_5_2_1; }
		
		//XParameter
		public RuleCall getParametersXParameterParserRuleCall_5_2_1_0() { return cParametersXParameterParserRuleCall_5_2_1_0; }
		
		//'where'
		public Keyword getWhereKeyword_5_2_2() { return cWhereKeyword_5_2_2; }
		
		//guards+=XGuard+
		public Assignment getGuardsAssignment_5_2_3() { return cGuardsAssignment_5_2_3; }
		
		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_5_2_3_0() { return cGuardsXGuardParserRuleCall_5_2_3_0; }
		
		//('with' witnesses+=XWitness+)?
		public Group getGroup_5_2_4() { return cGroup_5_2_4; }
		
		//'with'
		public Keyword getWithKeyword_5_2_4_0() { return cWithKeyword_5_2_4_0; }
		
		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_5_2_4_1() { return cWitnessesAssignment_5_2_4_1; }
		
		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_5_2_4_1_0() { return cWitnessesXWitnessParserRuleCall_5_2_4_1_0; }
		
		//('then' actions+=XAction+)?
		public Group getGroup_5_2_5() { return cGroup_5_2_5; }
		
		//'then'
		public Keyword getThenKeyword_5_2_5_0() { return cThenKeyword_5_2_5_0; }
		
		//actions+=XAction+
		public Assignment getActionsAssignment_5_2_5_1() { return cActionsAssignment_5_2_5_1; }
		
		//XAction
		public RuleCall getActionsXActionParserRuleCall_5_2_5_1_0() { return cActionsXActionParserRuleCall_5_2_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_5_2_6() { return cEndKeyword_5_2_6; }
	}
	public class XParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XParameter emachine::Parameter:
		//	{emachine::Parameter} comment=(ML_COMMENT | SL_COMMENT)?
		//	name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Parameter} comment=(ML_COMMENT | SL_COMMENT)? name=ID
		public Group getGroup() { return cGroup; }
		
		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class XGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XGuard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Assignment cTheoremAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTheoremTheoremKeyword_4_0 = (Keyword)cTheoremAssignment_4.eContents().get(0);
		
		//XGuard emachine::Guard:
		//	{emachine::Guard} comment=(ML_COMMENT | SL_COMMENT)?
		//	name=XLABEL predicate=STRING theorem?='theorem'?
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Guard} comment=(ML_COMMENT | SL_COMMENT)? name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_4() { return cTheoremAssignment_4; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_4_0() { return cTheoremTheoremKeyword_4_0; }
	}
	public class XWitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XWitness");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		
		//XWitness emachine::Witness:
		//	{emachine::Witness} comment=(ML_COMMENT | SL_COMMENT)?
		//	name=XLABEL predicate=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Witness} comment=(ML_COMMENT | SL_COMMENT)? name=XLABEL predicate=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
	}
	public class XActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionSTRINGTerminalRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//XAction emachine::Action:
		//	{emachine::Action} comment=(ML_COMMENT | SL_COMMENT)?
		//	name=XLABEL action=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{emachine::Action} comment=(ML_COMMENT | SL_COMMENT)? name=XLABEL action=STRING
		public Group getGroup() { return cGroup; }
		
		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//action=STRING
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }
		
		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_3_0() { return cActionSTRINGTerminalRuleCall_3_0; }
	}
	
	public class XConvergenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XConvergence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrdinaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrdinaryOrdinaryKeyword_0_0 = (Keyword)cOrdinaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConvergentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConvergentConvergentKeyword_1_0 = (Keyword)cConvergentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAnticipatedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAnticipatedAnticipatedKeyword_2_0 = (Keyword)cAnticipatedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum XConvergence returns emachine::Convergence:
		//	ordinary | convergent | anticipated;
		public EnumRule getRule() { return rule; }
		
		//ordinary | convergent | anticipated
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ordinary
		public EnumLiteralDeclaration getOrdinaryEnumLiteralDeclaration_0() { return cOrdinaryEnumLiteralDeclaration_0; }
		
		//'ordinary'
		public Keyword getOrdinaryOrdinaryKeyword_0_0() { return cOrdinaryOrdinaryKeyword_0_0; }
		
		//convergent
		public EnumLiteralDeclaration getConvergentEnumLiteralDeclaration_1() { return cConvergentEnumLiteralDeclaration_1; }
		
		//'convergent'
		public Keyword getConvergentConvergentKeyword_1_0() { return cConvergentConvergentKeyword_1_0; }
		
		//anticipated
		public EnumLiteralDeclaration getAnticipatedEnumLiteralDeclaration_2() { return cAnticipatedEnumLiteralDeclaration_2; }
		
		//'anticipated'
		public Keyword getAnticipatedAnticipatedKeyword_2_0() { return cAnticipatedAnticipatedKeyword_2_0; }
	}
	
	private final XMachineElements pXMachine;
	private final XVariableElements pXVariable;
	private final XInvariantElements pXInvariant;
	private final TerminalRule tXLABEL;
	private final XVariantElements pXVariant;
	private final XEventElements pXEvent;
	private final XConvergenceElements eXConvergence;
	private final XParameterElements pXParameter;
	private final XGuardElements pXGuard;
	private final XWitnessElements pXWitness;
	private final XActionElements pXAction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XMachineGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXMachine = new XMachineElements();
		this.pXVariable = new XVariableElements();
		this.pXInvariant = new XInvariantElements();
		this.tXLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.eventb.xtext.machine.XMachine.XLABEL");
		this.pXVariant = new XVariantElements();
		this.pXEvent = new XEventElements();
		this.eXConvergence = new XConvergenceElements();
		this.pXParameter = new XParameterElements();
		this.pXGuard = new XGuardElements();
		this.pXWitness = new XWitnessElements();
		this.pXAction = new XActionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.eventb.xtext.machine.XMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XMachine emachine::Machine:
	//	{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)?
	//	'machine' name=ID ('refines' refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables'
	//	variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variant' variant=XVariant)? ('events' events+=XEvent
	//	(';' events+=XEvent)*)?
	//	'end'
	public XMachineElements getXMachineAccess() {
		return pXMachine;
	}
	
	public ParserRule getXMachineRule() {
		return getXMachineAccess().getRule();
	}
	
	//XVariable emachine::Variable:
	//	{emachine::Variable} comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID
	public XVariableElements getXVariableAccess() {
		return pXVariable;
	}
	
	public ParserRule getXVariableRule() {
		return getXVariableAccess().getRule();
	}
	
	//XInvariant emachine::Invariant:
	//	{emachine::Invariant} comment=(ML_COMMENT | SL_COMMENT)?
	//	name=XLABEL predicate=STRING theorem?='theorem'?
	public XInvariantElements getXInvariantAccess() {
		return pXInvariant;
	}
	
	public ParserRule getXInvariantRule() {
		return getXInvariantAccess().getRule();
	}
	
	//terminal XLABEL:
	//	'@' !':'+ ':';
	public TerminalRule getXLABELRule() {
		return tXLABEL;
	}
	
	//XVariant emachine::Variant:
	//	{emachine::Variant} comment=(ML_COMMENT | SL_COMMENT)?
	//	expression=STRING
	public XVariantElements getXVariantAccess() {
		return pXVariant;
	}
	
	public ParserRule getXVariantRule() {
		return getXVariantAccess().getRule();
	}
	
	//XEvent emachine::Event:
	//	{emachine::Event} comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID (extended?='extended'? & convergence=XConvergence?) ('refines' refines+=[emachine::Event]+)? (('with'
	//	witnesses+=XWitness+)?
	//	'begin'
	//	actions+=XAction+
	//	'end'
	//	|
	//	'when'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?
	//	'end'
	//	|
	//	'any'
	//	parameters+=XParameter+
	//	'where'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?
	//	'end')?
	public XEventElements getXEventAccess() {
		return pXEvent;
	}
	
	public ParserRule getXEventRule() {
		return getXEventAccess().getRule();
	}
	
	//enum XConvergence returns emachine::Convergence:
	//	ordinary | convergent | anticipated;
	public XConvergenceElements getXConvergenceAccess() {
		return eXConvergence;
	}
	
	public EnumRule getXConvergenceRule() {
		return getXConvergenceAccess().getRule();
	}
	
	//XParameter emachine::Parameter:
	//	{emachine::Parameter} comment=(ML_COMMENT | SL_COMMENT)?
	//	name=ID
	public XParameterElements getXParameterAccess() {
		return pXParameter;
	}
	
	public ParserRule getXParameterRule() {
		return getXParameterAccess().getRule();
	}
	
	//XGuard emachine::Guard:
	//	{emachine::Guard} comment=(ML_COMMENT | SL_COMMENT)?
	//	name=XLABEL predicate=STRING theorem?='theorem'?
	public XGuardElements getXGuardAccess() {
		return pXGuard;
	}
	
	public ParserRule getXGuardRule() {
		return getXGuardAccess().getRule();
	}
	
	//XWitness emachine::Witness:
	//	{emachine::Witness} comment=(ML_COMMENT | SL_COMMENT)?
	//	name=XLABEL predicate=STRING
	public XWitnessElements getXWitnessAccess() {
		return pXWitness;
	}
	
	public ParserRule getXWitnessRule() {
		return getXWitnessAccess().getRule();
	}
	
	//XAction emachine::Action:
	//	{emachine::Action} comment=(ML_COMMENT | SL_COMMENT)?
	//	name=XLABEL action=STRING
	public XActionElements getXActionAccess() {
		return pXAction;
	}
	
	public ParserRule getXActionRule() {
		return getXActionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
