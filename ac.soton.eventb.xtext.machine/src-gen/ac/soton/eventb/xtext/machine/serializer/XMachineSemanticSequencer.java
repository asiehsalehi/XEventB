/*
 * generated by Xtext 2.10.0
 */
package ac.soton.eventb.xtext.machine.serializer;

import ac.soton.eventb.xtext.machine.services.XMachineGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eventb.emf.core.machine.Event;
import org.eventb.emf.core.machine.Guard;
import org.eventb.emf.core.machine.Invariant;
import org.eventb.emf.core.machine.Machine;
import org.eventb.emf.core.machine.MachinePackage;
import org.eventb.emf.core.machine.Variable;
import org.eventb.emf.core.machine.Variant;
import org.eventb.emf.core.machine.Witness;

@SuppressWarnings("all")
public class XMachineSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XMachineGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MachinePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MachinePackage.ACTION:
				sequence_XAction(context, (org.eventb.emf.core.machine.Action) semanticObject); 
				return; 
			case MachinePackage.EVENT:
				sequence_XEvent(context, (Event) semanticObject); 
				return; 
			case MachinePackage.GUARD:
				sequence_XGuard(context, (Guard) semanticObject); 
				return; 
			case MachinePackage.INVARIANT:
				sequence_XInvariant(context, (Invariant) semanticObject); 
				return; 
			case MachinePackage.MACHINE:
				sequence_XMachine(context, (Machine) semanticObject); 
				return; 
			case MachinePackage.PARAMETER:
				sequence_XParameter(context, (org.eventb.emf.core.machine.Parameter) semanticObject); 
				return; 
			case MachinePackage.VARIABLE:
				sequence_XVariable(context, (Variable) semanticObject); 
				return; 
			case MachinePackage.VARIANT:
				sequence_XVariant(context, (Variant) semanticObject); 
				return; 
			case MachinePackage.WITNESS:
				sequence_XWitness(context, (Witness) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     XAction returns Action
	 *
	 * Constraint:
	 *     ((comment=ML_COMMENT | comment=SL_COMMENT)? name=ID action=STRING)
	 */
	protected void sequence_XAction(ISerializationContext context, org.eventb.emf.core.machine.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XEvent returns Event
	 *
	 * Constraint:
	 *     (
	 *         (comment=ML_COMMENT | comment=SL_COMMENT)? 
	 *         name=ID 
	 *         extended?='extended'? 
	 *         convergence=XConvergence 
	 *         refines+=[Event|ID]* 
	 *         (
	 *             (witnesses+=XWitness* actions+=XAction+) | 
	 *             (guards+=XGuard+ witnesses+=XWitness* actions+=XAction+) | 
	 *             (parameters+=XParameter+ guards+=XGuard+ witnesses+=XWitness* actions+=XAction+)
	 *         )?
	 *     )
	 */
	protected void sequence_XEvent(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XGuard returns Guard
	 *
	 * Constraint:
	 *     ((comment=ML_COMMENT | comment=SL_COMMENT)? name=ID predicate=STRING theorem?='theorem'?)
	 */
	protected void sequence_XGuard(ISerializationContext context, Guard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XInvariant returns Invariant
	 *
	 * Constraint:
	 *     ((comment=ML_COMMENT | comment=SL_COMMENT)? name=ID predicate=STRING theorem?='theorem'?)
	 */
	protected void sequence_XInvariant(ISerializationContext context, Invariant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMachine returns Machine
	 *
	 * Constraint:
	 *     (
	 *         (comment=ML_COMMENT | comment=SL_COMMENT)? 
	 *         name=ID 
	 *         refines+=[Machine|ID]? 
	 *         sees+=[Context|ID]* 
	 *         variables+=XVariable* 
	 *         invariants+=XInvariant* 
	 *         variant=XVariant? 
	 *         events+=XEvent*
	 *     )
	 */
	protected void sequence_XMachine(ISerializationContext context, Machine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XParameter returns Parameter
	 *
	 * Constraint:
	 *     ((comment=ML_COMMENT | comment=SL_COMMENT)? name=ID)
	 */
	protected void sequence_XParameter(ISerializationContext context, org.eventb.emf.core.machine.Parameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XVariable returns Variable
	 *
	 * Constraint:
	 *     ((comment=ML_COMMENT | comment=SL_COMMENT)? name=ID)
	 */
	protected void sequence_XVariable(ISerializationContext context, Variable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XVariant returns Variant
	 *
	 * Constraint:
	 *     ((comment=ML_COMMENT | comment=SL_COMMENT)? expression=STRING)
	 */
	protected void sequence_XVariant(ISerializationContext context, Variant semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XWitness returns Witness
	 *
	 * Constraint:
	 *     ((comment=ML_COMMENT | comment=SL_COMMENT)? name=ID predicate=STRING)
	 */
	protected void sequence_XWitness(ISerializationContext context, Witness semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
