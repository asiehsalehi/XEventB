/*
 * generated by Xtext 2.10.0
 */
package ac.soton.eventb.xtext.machine.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eventb.emf.core.machine.Event
import org.eventb.emf.core.machine.Machine
import org.eventb.emf.core.machine.MachinePackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class XMachineScopeProvider extends AbstractXMachineScopeProvider {

	override getScope(EObject context, EReference reference) {
//    if (context instanceof Element
//            && reference == MyDslPackage.Literals.ELEMENT__SUPER_ELEMENT) {
//        val rootElement = EcoreUtil2.getRootContainer(context)
//        val candidates = EcoreUtil2.getAllContentsOfType(rootElement, Element)
//        val existingScope = Scopes.scopeFor(candidates)
//        // Scope that filters out the context element from the candidates list
//        return new FilteringScope(existingScope, [getEObjectOrProxy != context])
//    }
		if (context instanceof Event && reference == MachinePackage.Literals.EVENT__REFINES) {
			val mch = EcoreUtil2.getRootContainer(context, true) as Machine
			val refines = mch.refines
			if (refines.length != 0) {
				val refinedMch = refines.get(0)
				val refinedEvts = EcoreUtil2.getAllContentsOfType(refinedMch, Event)
				return Scopes.scopeFor(refinedEvts)
			}
			
//			val existingScope = Scopes.scopeFor(refines)
//			return new FilteringScope(existingScope, [EClass == Event])			
		}
		return super.getScope(context, reference);
	}
}
