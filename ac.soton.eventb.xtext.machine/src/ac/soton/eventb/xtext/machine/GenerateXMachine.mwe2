module ac.soton.eventb.xtext.machine.GenerateXMachine

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.eclipse.emf.mwe.utils.StandaloneSetup

var rootPath = ".."
var projectName = "ac.soton.eventb.xtext.machine"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."		
		
//		registerGeneratedEPackage = "org.eventb.emf.core.CorePackage"
		registerGeneratedEPackage = "org.eventb.emf.core.context.ContextPackage"
		registerGeneratedEPackage = "org.eventb.emf.core.machine.MachinePackage"
		registerGenModelFile = "platform:/resource/org.eventb.emf.core/model/eventbcore.genmodel"
			
	    registerGeneratedEPackage = "org.eclipse.emf.ecore.EcorePackage"
	    registerGeneratedEPackage = "org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage"	
		registerGenModelFile = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.emf.codegen.ecore/model/GenModel.genmodel"
		
		//Dana: Extended emf model
		registerGeneratedEPackage = "ac.soton.eventb.featureinclusion.FeatureinclusionPackage"
		registerGenModelFile = "platform:/resource/ac.soton.eventb.inclusionfeature/model/inclusionfeature.genmodel"
	}

	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "ac.soton.eventb.xtext.machine"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "ac.soton.eventb.xtext.machine.XMachine"
			fileExtensions = "bumx"
			referencedResource = "platform:/resource/org.eventb.emf.core/model/eventbcore.genmodel"
			//Dana
			referencedResource = "platform:/resource/ac.soton.eventb.inclusionfeature/model/inclusionfeature.genmodel"
		 
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				fragment = org.eclipse.xtext.generator.ecore2xtext.FormatterFragment {}
				
				
			}
             
			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
	}
}
