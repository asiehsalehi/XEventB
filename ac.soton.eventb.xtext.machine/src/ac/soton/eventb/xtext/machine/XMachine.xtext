// automatically generated by Xtext
grammar ac.soton.eventb.xtext.machine.XMachine with org.eclipse.xtext.common.Terminals hidden (WS)

import "http://emf.eventb.org/models/core/machine/2014" as emachine
import "http://emf.eventb.org/models/core/context/2014" as econtext
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

XMachine returns emachine::Machine:
	{emachine::Machine}
	(comment=(ML_COMMENT|SL_COMMENT))?
	'machine' name=ID
	('refines' refines+=[emachine::Machine])?
	('sees' sees+=[econtext::Context]+)?
	('variables' variables+=XVariable+)?
	('invariants' invariants+=XInvariant+)?
	('variant' variant=XVariant)?
	('events' events+=XEvent (';' events+=XEvent)*)?
	('end')
;


XVariable returns emachine::Variable:
	{emachine::Variable}
	(comment=(ML_COMMENT|SL_COMMENT))?
	name=ID
;

XInvariant returns emachine::Invariant:
	{emachine::Invariant}
	(comment=(ML_COMMENT|SL_COMMENT))?
	name=XLABEL predicate=STRING (theorem?='theorem')?
;

terminal XLABEL returns ecore::EString:
	'@' !(':')+ ':'
;

XVariant returns emachine::Variant:
	{emachine::Variant}
	(comment=(ML_COMMENT|SL_COMMENT))?
	expression=STRING
;

XEvent returns emachine::Event:
	{emachine::Event}
	(comment=(ML_COMMENT|SL_COMMENT))?
	name=ID
	(
		(extended?='extended')? &
		(convergence=XConvergence)?
	)
	('refines' refines+=[emachine::Event]+)?
	(
		('with' witnesses+=XWitness+)?
		'begin'
			actions+=XAction+
		'end'
		|	
		'when'
			guards+=XGuard+
		('with' witnesses+=XWitness+)?
		('then'
			actions+=XAction+)?
		'end'
		|
		'any'
			parameters+=XParameter+
		'where'
			guards+=XGuard+
		('with' witnesses+=XWitness+)?
		('then'
			actions+=XAction+)?
		'end'
	)?
;

enum XConvergence returns emachine::Convergence:
				ordinary = 'ordinary' | convergent = 'convergent' | anticipated = 'anticipated';

XParameter returns emachine::Parameter:
	{emachine::Parameter}
	(comment=(ML_COMMENT|SL_COMMENT))?
	name=ID
;

XGuard returns emachine::Guard:
	{emachine::Guard}
	(comment=(ML_COMMENT|SL_COMMENT))?
	name=XLABEL predicate=STRING (theorem?='theorem')?
;

XWitness returns emachine::Witness:
	{emachine::Witness}
	(comment=(ML_COMMENT|SL_COMMENT))?
	name=XLABEL predicate=STRING
;

XAction returns emachine::Action:
	{emachine::Action}
	(comment=(ML_COMMENT|SL_COMMENT))?
	name=XLABEL action=STRING
;
