/*
 * generated by Xtext 2.13.0
 */
package ac.soton.xeventb.xcontext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XContextGrammarAccess extends AbstractGrammarElementFinder {
	
	public class XContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContextAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Keyword cContextKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendsContextCrossReference_4_1_0 = (CrossReference)cExtendsAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendsContextQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cExtendsContextCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSetsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSetsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSetsXCarrierSetParserRuleCall_5_1_0 = (RuleCall)cSetsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cConstantsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConstantsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConstantsXConstantParserRuleCall_6_1_0 = (RuleCall)cConstantsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cAxiomsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAxiomsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAxiomsXAxiomParserRuleCall_7_1_0 = (RuleCall)cAxiomsAssignment_7_1.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//XContext econtext::Context:
		//	{econtext::Context} comment=(ML_COMMENT | SL_COMMENT)?
		//	'context' name=ID ('extends' extends+=[econtext::Context|QualifiedName]+)? ('sets' sets+=XCarrierSet+)? ('constants'
		//	constants+=XConstant+)? ('axioms' axioms+=XAxiom+)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Context} comment=(ML_COMMENT | SL_COMMENT)? 'context' name=ID ('extends'
		//extends+=[econtext::Context|QualifiedName]+)? ('sets' sets+=XCarrierSet+)? ('constants' constants+=XConstant+)?
		//('axioms' axioms+=XAxiom+)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{econtext::Context}
		public Action getContextAction_0() { return cContextAction_0; }
		
		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }
		
		//'context'
		public Keyword getContextKeyword_2() { return cContextKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('extends' extends+=[econtext::Context|QualifiedName]+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//extends+=[econtext::Context|QualifiedName]+
		public Assignment getExtendsAssignment_4_1() { return cExtendsAssignment_4_1; }
		
		//[econtext::Context|QualifiedName]
		public CrossReference getExtendsContextCrossReference_4_1_0() { return cExtendsContextCrossReference_4_1_0; }
		
		//QualifiedName
		public RuleCall getExtendsContextQualifiedNameParserRuleCall_4_1_0_1() { return cExtendsContextQualifiedNameParserRuleCall_4_1_0_1; }
		
		//('sets' sets+=XCarrierSet+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sets'
		public Keyword getSetsKeyword_5_0() { return cSetsKeyword_5_0; }
		
		//sets+=XCarrierSet+
		public Assignment getSetsAssignment_5_1() { return cSetsAssignment_5_1; }
		
		//XCarrierSet
		public RuleCall getSetsXCarrierSetParserRuleCall_5_1_0() { return cSetsXCarrierSetParserRuleCall_5_1_0; }
		
		//('constants' constants+=XConstant+)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'constants'
		public Keyword getConstantsKeyword_6_0() { return cConstantsKeyword_6_0; }
		
		//constants+=XConstant+
		public Assignment getConstantsAssignment_6_1() { return cConstantsAssignment_6_1; }
		
		//XConstant
		public RuleCall getConstantsXConstantParserRuleCall_6_1_0() { return cConstantsXConstantParserRuleCall_6_1_0; }
		
		//('axioms' axioms+=XAxiom+)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'axioms'
		public Keyword getAxiomsKeyword_7_0() { return cAxiomsKeyword_7_0; }
		
		//axioms+=XAxiom+
		public Assignment getAxiomsAssignment_7_1() { return cAxiomsAssignment_7_1; }
		
		//XAxiom
		public RuleCall getAxiomsXAxiomParserRuleCall_7_1_0() { return cAxiomsXAxiomParserRuleCall_7_1_0; }
		
		//'end'
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class XCarrierSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XCarrierSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXCarrierSetNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXCarrierSetMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXCarrierSetSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XCarrierSet econtext::CarrierSet:
		//	XCarrierSetNoComment | XCarrierSetMLComment | XCarrierSetSLComment;
		@Override public ParserRule getRule() { return rule; }
		
		//XCarrierSetNoComment | XCarrierSetMLComment | XCarrierSetSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XCarrierSetNoComment
		public RuleCall getXCarrierSetNoCommentParserRuleCall_0() { return cXCarrierSetNoCommentParserRuleCall_0; }
		
		//XCarrierSetMLComment
		public RuleCall getXCarrierSetMLCommentParserRuleCall_1() { return cXCarrierSetMLCommentParserRuleCall_1; }
		
		//XCarrierSetSLComment
		public RuleCall getXCarrierSetSLCommentParserRuleCall_2() { return cXCarrierSetSLCommentParserRuleCall_2; }
	}
	public class XCarrierSetNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XCarrierSetNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCarrierSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XCarrierSetNoComment econtext::CarrierSet:
		//	{econtext::CarrierSet} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::CarrierSet} name=ID
		public Group getGroup() { return cGroup; }
		
		//{econtext::CarrierSet}
		public Action getCarrierSetAction_0() { return cCarrierSetAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XCarrierSetMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XCarrierSetMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCarrierSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XCarrierSetMLComment econtext::CarrierSet:
		//	{econtext::CarrierSet} comment=ML_COMMENT
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::CarrierSet} comment=ML_COMMENT name=ID
		public Group getGroup() { return cGroup; }
		
		//{econtext::CarrierSet}
		public Action getCarrierSetAction_0() { return cCarrierSetAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class XCarrierSetSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XCarrierSetSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCarrierSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XCarrierSetSLComment econtext::CarrierSet:
		//	{econtext::CarrierSet} name=ID
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::CarrierSet} name=ID comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{econtext::CarrierSet}
		public Action getCarrierSetAction_0() { return cCarrierSetAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}
	public class XConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstantNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXConstantMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXConstantSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XConstant econtext::Constant:
		//	XConstantNoComment | XConstantMLComment | XConstantSLComment;
		@Override public ParserRule getRule() { return rule; }
		
		//XConstantNoComment | XConstantMLComment | XConstantSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XConstantNoComment
		public RuleCall getXConstantNoCommentParserRuleCall_0() { return cXConstantNoCommentParserRuleCall_0; }
		
		//XConstantMLComment
		public RuleCall getXConstantMLCommentParserRuleCall_1() { return cXConstantMLCommentParserRuleCall_1; }
		
		//XConstantSLComment
		public RuleCall getXConstantSLCommentParserRuleCall_2() { return cXConstantSLCommentParserRuleCall_2; }
	}
	public class XConstantNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XConstantNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XConstantNoComment econtext::Constant:
		//	{econtext::Constant} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Constant} name=ID
		public Group getGroup() { return cGroup; }
		
		//{econtext::Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class XConstantMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XConstantMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XConstantMLComment econtext::Constant:
		//	{econtext::Constant} comment=ML_COMMENT
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Constant} comment=ML_COMMENT name=ID
		public Group getGroup() { return cGroup; }
		
		//{econtext::Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class XConstantSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XConstantSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XConstantSLComment econtext::Constant:
		//	{econtext::Constant} name=ID
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Constant} name=ID comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{econtext::Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}
	public class XAxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XAxiom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXAxiomNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXAxiomMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXAxiomSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XAxiom econtext::Axiom:
		//	XAxiomNoComment | XAxiomMLComment | XAxiomSLComment;
		@Override public ParserRule getRule() { return rule; }
		
		//XAxiomNoComment | XAxiomMLComment | XAxiomSLComment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XAxiomNoComment
		public RuleCall getXAxiomNoCommentParserRuleCall_0() { return cXAxiomNoCommentParserRuleCall_0; }
		
		//XAxiomMLComment
		public RuleCall getXAxiomMLCommentParserRuleCall_1() { return cXAxiomMLCommentParserRuleCall_1; }
		
		//XAxiomSLComment
		public RuleCall getXAxiomSLCommentParserRuleCall_2() { return cXAxiomSLCommentParserRuleCall_2; }
	}
	public class XAxiomNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XAxiomNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAxiomAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//XAxiomNoComment econtext::Axiom:
		//	{econtext::Axiom} name=XLABEL predicate=STRING theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Axiom} name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{econtext::Axiom}
		public Action getAxiomAction_0() { return cAxiomAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}
	public class XAxiomMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XAxiomMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAxiomAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Assignment cTheoremAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTheoremTheoremKeyword_4_0 = (Keyword)cTheoremAssignment_4.eContents().get(0);
		
		//XAxiomMLComment econtext::Axiom:
		//	{econtext::Axiom} comment=ML_COMMENT
		//	name=XLABEL predicate=STRING theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Axiom} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }
		
		//{econtext::Axiom}
		public Action getAxiomAction_0() { return cAxiomAction_0; }
		
		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }
		
		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_4() { return cTheoremAssignment_4; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_4_0() { return cTheoremTheoremKeyword_4_0; }
	}
	public class XAxiomSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XAxiomSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAxiomAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//XAxiomSLComment econtext::Axiom:
		//	{econtext::Axiom} name=XLABEL predicate=STRING theorem?='theorem'?
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//{econtext::Axiom} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
		public Group getGroup() { return cGroup; }
		
		//{econtext::Axiom}
		public Action getAxiomAction_0() { return cAxiomAction_0; }
		
		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }
		
		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }
		
		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
		
		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }
		
		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_4_0() { return cCommentSL_COMMENTTerminalRuleCall_4_0; }
	}
	
	
	private final XContextElements pXContext;
	private final QualifiedNameElements pQualifiedName;
	private final XCarrierSetElements pXCarrierSet;
	private final XCarrierSetNoCommentElements pXCarrierSetNoComment;
	private final XCarrierSetMLCommentElements pXCarrierSetMLComment;
	private final XCarrierSetSLCommentElements pXCarrierSetSLComment;
	private final XConstantElements pXConstant;
	private final XConstantNoCommentElements pXConstantNoComment;
	private final XConstantMLCommentElements pXConstantMLComment;
	private final XConstantSLCommentElements pXConstantSLComment;
	private final XAxiomElements pXAxiom;
	private final XAxiomNoCommentElements pXAxiomNoComment;
	private final XAxiomMLCommentElements pXAxiomMLComment;
	private final XAxiomSLCommentElements pXAxiomSLComment;
	private final TerminalRule tXLABEL;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XContextGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pXContext = new XContextElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pXCarrierSet = new XCarrierSetElements();
		this.pXCarrierSetNoComment = new XCarrierSetNoCommentElements();
		this.pXCarrierSetMLComment = new XCarrierSetMLCommentElements();
		this.pXCarrierSetSLComment = new XCarrierSetSLCommentElements();
		this.pXConstant = new XConstantElements();
		this.pXConstantNoComment = new XConstantNoCommentElements();
		this.pXConstantMLComment = new XConstantMLCommentElements();
		this.pXConstantSLComment = new XConstantSLCommentElements();
		this.pXAxiom = new XAxiomElements();
		this.pXAxiomNoComment = new XAxiomNoCommentElements();
		this.pXAxiomMLComment = new XAxiomMLCommentElements();
		this.pXAxiomSLComment = new XAxiomSLCommentElements();
		this.tXLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.XLABEL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xcontext.XContext.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xeventb.xcontext.XContext".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//XContext econtext::Context:
	//	{econtext::Context} comment=(ML_COMMENT | SL_COMMENT)?
	//	'context' name=ID ('extends' extends+=[econtext::Context|QualifiedName]+)? ('sets' sets+=XCarrierSet+)? ('constants'
	//	constants+=XConstant+)? ('axioms' axioms+=XAxiom+)?
	//	'end';
	public XContextElements getXContextAccess() {
		return pXContext;
	}
	
	public ParserRule getXContextRule() {
		return getXContextAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//XCarrierSet econtext::CarrierSet:
	//	XCarrierSetNoComment | XCarrierSetMLComment | XCarrierSetSLComment;
	public XCarrierSetElements getXCarrierSetAccess() {
		return pXCarrierSet;
	}
	
	public ParserRule getXCarrierSetRule() {
		return getXCarrierSetAccess().getRule();
	}
	
	//XCarrierSetNoComment econtext::CarrierSet:
	//	{econtext::CarrierSet} name=ID;
	public XCarrierSetNoCommentElements getXCarrierSetNoCommentAccess() {
		return pXCarrierSetNoComment;
	}
	
	public ParserRule getXCarrierSetNoCommentRule() {
		return getXCarrierSetNoCommentAccess().getRule();
	}
	
	//XCarrierSetMLComment econtext::CarrierSet:
	//	{econtext::CarrierSet} comment=ML_COMMENT
	//	name=ID;
	public XCarrierSetMLCommentElements getXCarrierSetMLCommentAccess() {
		return pXCarrierSetMLComment;
	}
	
	public ParserRule getXCarrierSetMLCommentRule() {
		return getXCarrierSetMLCommentAccess().getRule();
	}
	
	//XCarrierSetSLComment econtext::CarrierSet:
	//	{econtext::CarrierSet} name=ID
	//	comment=SL_COMMENT;
	public XCarrierSetSLCommentElements getXCarrierSetSLCommentAccess() {
		return pXCarrierSetSLComment;
	}
	
	public ParserRule getXCarrierSetSLCommentRule() {
		return getXCarrierSetSLCommentAccess().getRule();
	}
	
	//XConstant econtext::Constant:
	//	XConstantNoComment | XConstantMLComment | XConstantSLComment;
	public XConstantElements getXConstantAccess() {
		return pXConstant;
	}
	
	public ParserRule getXConstantRule() {
		return getXConstantAccess().getRule();
	}
	
	//XConstantNoComment econtext::Constant:
	//	{econtext::Constant} name=ID;
	public XConstantNoCommentElements getXConstantNoCommentAccess() {
		return pXConstantNoComment;
	}
	
	public ParserRule getXConstantNoCommentRule() {
		return getXConstantNoCommentAccess().getRule();
	}
	
	//XConstantMLComment econtext::Constant:
	//	{econtext::Constant} comment=ML_COMMENT
	//	name=ID;
	public XConstantMLCommentElements getXConstantMLCommentAccess() {
		return pXConstantMLComment;
	}
	
	public ParserRule getXConstantMLCommentRule() {
		return getXConstantMLCommentAccess().getRule();
	}
	
	//XConstantSLComment econtext::Constant:
	//	{econtext::Constant} name=ID
	//	comment=SL_COMMENT;
	public XConstantSLCommentElements getXConstantSLCommentAccess() {
		return pXConstantSLComment;
	}
	
	public ParserRule getXConstantSLCommentRule() {
		return getXConstantSLCommentAccess().getRule();
	}
	
	//XAxiom econtext::Axiom:
	//	XAxiomNoComment | XAxiomMLComment | XAxiomSLComment;
	public XAxiomElements getXAxiomAccess() {
		return pXAxiom;
	}
	
	public ParserRule getXAxiomRule() {
		return getXAxiomAccess().getRule();
	}
	
	//XAxiomNoComment econtext::Axiom:
	//	{econtext::Axiom} name=XLABEL predicate=STRING theorem?='theorem'?;
	public XAxiomNoCommentElements getXAxiomNoCommentAccess() {
		return pXAxiomNoComment;
	}
	
	public ParserRule getXAxiomNoCommentRule() {
		return getXAxiomNoCommentAccess().getRule();
	}
	
	//XAxiomMLComment econtext::Axiom:
	//	{econtext::Axiom} comment=ML_COMMENT
	//	name=XLABEL predicate=STRING theorem?='theorem'?;
	public XAxiomMLCommentElements getXAxiomMLCommentAccess() {
		return pXAxiomMLComment;
	}
	
	public ParserRule getXAxiomMLCommentRule() {
		return getXAxiomMLCommentAccess().getRule();
	}
	
	//XAxiomSLComment econtext::Axiom:
	//	{econtext::Axiom} name=XLABEL predicate=STRING theorem?='theorem'?
	//	comment=SL_COMMENT;
	public XAxiomSLCommentElements getXAxiomSLCommentAccess() {
		return pXAxiomSLComment;
	}
	
	public ParserRule getXAxiomSLCommentRule() {
		return getXAxiomSLCommentAccess().getRule();
	}
	
	//terminal XLABEL:
	//	'@' !':'+ ':';
	public TerminalRule getXLABELRule() {
		return tXLABEL;
	}
	
	//@ Override terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_' | 'i'..'ￜ') ('a'..'z' | 'A'..'Z' | '_' | 'i'..'ￜ' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
