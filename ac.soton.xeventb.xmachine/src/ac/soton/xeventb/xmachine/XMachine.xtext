/*******************************************************************************
 * Copyright (c) 2016-2018 University of Southampton.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     University of Southampton - initial API and implementation
 *******************************************************************************/
grammar ac.soton.xeventb.xmachine.XMachine with org.eclipse.xtext.common.Terminals hidden (WS,ML_COMMENT,SL_COMMENT)

//import "http://emf.eventb.org/models/core/2014" as eventbcore
//import "http://emf.eventb.org/models/core/machine/2014" as emachine
//import "http://emf.eventb.org/models/core/context/2014" as econtext
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://soton.ac.uk/models/eventb/inclusion/2017" as einclusion 
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore" as eventbcore
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore#//machine"as emachine
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore#//context"as econtext

/*
 * For XEvent-B 0.0.8 comments are allowed everywhere
 * ML_COMMENT and SL_COMMEN are defined as hidden
 */

Machine returns emachine::Machine:
	{emachine::Machine}
   (comment=(ML_COMMENT|SL_COMMENT))?
	//('id' extensionId = ID)// need to find a way to add it programmatically
	'machine' name=ID
	( extensions+= MIncludes*)
    ('refines' refines+=[emachine::Machine])?
	('sees' sees+=[econtext::Context]+)?
    ('variables' variables+=XVariable+)?
	('invariants' invariants+=XInvariant+)?
	('variant' variant=XVariant)?
	('events' events+=XEvent (events+=XEvent)*)?
	('end')
;

//MIncludes returns einclusion::MachineInclusion:
//	{einclusion::MachineInclusion}
//	(extensionId = 'includes')
//	(abstractMachine = [emachine::Machine|QualifiedName])//(abstractMachine = [emachine::Machine])
//	('to' concreteMachine = [emachine::Machine])? 
//    ('as' prefixes += ID (prefixes += ID)*)? 
//;
MIncludes returns einclusion::MachineInclusion:
	{einclusion::MachineInclusion}
//	(extensionId = 'includes')
	('includes'abstractMachine = [emachine::Machine|QualifiedName])//(abstractMachine = [emachine::Machine])
	('to' concreteMachine = [emachine::Machine])? 
    ('as' prefixes += ID (prefixes += ID)*)? 
;
QualifiedName:
	ID('.'ID)?
;
XVariable returns emachine::Variable:
	XVariableNoComment  | XVariableMLComment | XVariableSLComment
;

XVariableNoComment returns emachine::Variable:
	{emachine::Variable}
	name=ID
;

XVariableMLComment returns emachine::Variable:
	{emachine::Variable}
	comment=ML_COMMENT
	name=ID
;

XVariableSLComment returns emachine::Variable:
	{emachine::Variable}
	name=ID
	comment=SL_COMMENT
;

XInvariant returns emachine::Invariant:
	XInvariantNoComment | XInvariantMLComment | XInvariantSLComment
;

XInvariantNoComment returns emachine::Invariant:
	{emachine::Invariant}
	name=XLABEL predicate=XPredicate(theorem?='theorem')?	
;

XInvariantMLComment returns emachine::Invariant:
	{emachine::Invariant}
	comment=ML_COMMENT
	name=XLABEL predicate= XPredicate (theorem?='theorem')?	
;

XInvariantSLComment returns emachine::Invariant:
	{emachine::Invariant}
	name=XLABEL predicate = XPredicate (theorem?='theorem')?	
	comment=SL_COMMENT
;

terminal XLABEL returns ecore::EString:
	'@' !(':')+ ':'
;

XVariant returns emachine::Variant:
	XVariantNoComment | XVariantMLComment | XVariantSLComment
;

XVariantNoComment returns emachine::Variant:
	{emachine::Variant}
	expression= XPredicate
;

XVariantMLComment returns emachine::Variant:
	{emachine::Variant}
	comment=ML_COMMENT
	expression= XPredicate
;

XVariantSLComment returns emachine::Variant:
	{emachine::Variant}
	expression= XPredicate
	comment=SL_COMMENT
;
  XEvent returns emachine::Event:
	XEventNoComment | XEventMLComment | XEventSLComment
;

XEventNoComment returns emachine::Event:
	{emachine::Event}
	name=ID
	(
		(extended?='extended')? &
		(convergence=XConvergence)?
	)
	( extensions+= EventSync*)
	('refines' refines+=[emachine::Event]+)?
	
	(
		('with' witnesses+=XWitness+)?
		'begin'
			actions+=XAction+
		|	
		'when'
			guards+=XGuard+
		('with' witnesses+=XWitness+)?
		('then'
			actions+=XAction+)?
		|
		'any'
			parameters+=XParameter+
		'where'
			guards+=XGuard+
		('with' witnesses+=XWitness+)?
		('then'
			actions+=XAction+)?
	)?	
	'end'
;

XEventMLComment returns emachine::Event:
	{emachine::Event}
	comment=ML_COMMENT
	name=ID
	(
		(extended?='extended')? &
		(convergence=XConvergence)?
	)
	( extensions+= EventSync*)
	('refines' refines+=[emachine::Event]+)?
	
	(
		('with' witnesses+=XWitness+)?
		'begin'
			actions+=XAction+
		|	
		'when'
			guards+=XGuard+
		('with' witnesses+=XWitness+)?
		('then'
			actions+=XAction+)?
		|
		'any'
			parameters+=XParameter+
		'where'
			guards+=XGuard+
		('with' witnesses+=XWitness+)?
		('then'
			actions+=XAction+)?
	)?	
	'end'
;

XEventSLComment returns emachine::Event:
	{emachine::Event}
	name=ID
	(
		(extended?='extended')? &
		(convergence=XConvergence)?
		
	)
	comment=SL_COMMENT
	( extensions+= EventSync*)
	('refines' refines+=[emachine::Event]+)?
	(
		('with' witnesses+=XWitness+)?
		'begin'
			actions+=XAction+
		|	
		'when'
			guards+=XGuard+
		('with' witnesses+=XWitness+)?
		('then'
			actions+=XAction+)?
		|
		'any'
			parameters+=XParameter+
		'where'
			guards+=XGuard+
		('with' witnesses+=XWitness+)?
		('then'
			actions+=XAction+)?
	)?	
	'end'
;

//EventSync returns einclusion::EventSynchronisation:
//	{einclusion::EventSynchronisation}
//	(extensionId = 'synchronises')
//	((prefix=ID'.')?synchronisedEvent = [emachine::Event])
//;
EventSync returns einclusion::EventSynchronisation:
	{einclusion::EventSynchronisation}
	('synchronises' (prefix=ID'.')?synchronisedEvent = [emachine::Event])
;

enum XConvergence returns emachine::Convergence:
				ordinary = 'ordinary' | convergent = 'convergent' | anticipated = 'anticipated';

XParameter returns emachine::Parameter:
	XParameterNoComment | XParameterMLComment | XParameterSLComment
;

XParameterNoComment returns emachine::Parameter:
	{emachine::Parameter}
	name=ID
;

XParameterMLComment returns emachine::Parameter:
	{emachine::Parameter}
	comment=ML_COMMENT
	name=ID
;

XParameterSLComment returns emachine::Parameter:
	{emachine::Parameter}
	name=ID
	comment=SL_COMMENT
;

XGuard returns emachine::Guard:
	XGuardNoComment | XGuardMLComment | XGuardSLComment
;

XGuardNoComment returns emachine::Guard:
	{emachine::Guard}
	name=XLABEL predicate= XPredicate (theorem?='theorem')?
;

XGuardMLComment returns emachine::Guard:
	{emachine::Guard}
	comment=ML_COMMENT
	name=XLABEL predicate= XPredicate (theorem?='theorem')?
;

XGuardSLComment returns emachine::Guard:
	{emachine::Guard}
	name=XLABEL predicate= XPredicate (theorem?='theorem')?
	comment=SL_COMMENT
;

XWitness returns emachine::Witness:
	XWitnessNoComment | XWitnessMLComment | XWitnessSLComment
;

XWitnessNoComment returns emachine::Witness:
	{emachine::Witness}
	name=XLABEL predicate= XPredicate
;

XWitnessMLComment returns emachine::Witness:
	{emachine::Witness}
	comment=ML_COMMENT
	name=XLABEL predicate= XPredicate
;

XWitnessSLComment returns emachine::Witness:
	{emachine::Witness}
	name=XLABEL predicate= XPredicate
	comment=SL_COMMENT
;

XAction returns emachine::Action:
	XActionNoComment | XActionMLComment | XActionSLComment
;

XActionNoComment returns emachine::Action:
	{emachine::Action}
	name=XLABEL action= XPredicate
;

XActionMLComment returns emachine::Action:
	{emachine::Action}
	comment=ML_COMMENT
	name=XLABEL action= XPredicate
;

XActionSLComment returns emachine::Action:
	{emachine::Action}
	name=XLABEL action= XPredicate
	comment=SL_COMMENT
;
XPredicate returns ecore::EString:
	STRING
;
@Override 
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ') ('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ'|'0'..'9')*;

