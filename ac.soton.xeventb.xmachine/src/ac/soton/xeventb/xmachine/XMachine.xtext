/*******************************************************************************
 * Copyright (c) 2016-2018 University of Southampton.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     University of Southampton - initial API and implementation
 *******************************************************************************/
grammar ac.soton.xeventb.xmachine.XMachine with org.eclipse.xtext.common.Terminals hidden (WS,ML_COMMENT,SL_COMMENT)

//import "http://emf.eventb.org/models/core/2014" as eventbcore
//import "http://emf.eventb.org/models/core/machine/2014" as emachine
//import "http://emf.eventb.org/models/core/context/2014" as econtext
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://soton.ac.uk/models/eventb/inclusion/2017" as einclusion 
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore" as eventbcore
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore#//machine"as emachine
import "platform:/resource/org.eventb.emf.core/model/eventbcore.ecore#//context"as econtext

/*
 * For XEvent-B 0.0.8 comments are allowed everywhere
 * ML_COMMENT and SL_COMMEN are defined as hidden
 */

Machine returns emachine::Machine:
	{emachine::Machine}
   (comment=(ML_COMMENT|SL_COMMENT))?
	'machine' name=ID
	(
		(extensions+= MIncludes*) &
    	('refines' refines+=[emachine::Machine])? &
		('sees' sees+=[econtext::Context]+)?
	)
    ('variables' variables+=XVariable+)?
	('invariants' invariants+=XInvariant+)?
	('variants' variants+=XVariant+)?
	('events' events+=XEvent+)?
	('end')
;

MIncludes returns einclusion::MachineInclusion:
	{einclusion::MachineInclusion}
	('includes'abstractMachine = [emachine::Machine|QualifiedName])
	('to' concreteMachine = [emachine::Machine])? 
    ('as' prefixes += ID (prefixes += ID)*)? 
;

QualifiedName:
	ID('.'ID)?
;

XVariable returns emachine::Variable:
	{emachine::Variable}
	name=ID
;

XInvariant returns emachine::Invariant:
	{emachine::Invariant}
	(theorem?='theorem')? name=XLABEL predicate=XFormula	
;

terminal XLABEL returns ecore::EString:
	'@' !(':')+ ':'
;

XVariant returns emachine::Variant:
	{emachine::Variant}
	name=XLABEL expression= XFormula
;

XEvent returns emachine::Event:
	{emachine::Event}
	'event' name=ID
	(convergence=XConvergence)?
	(
		('refines' refines+=[emachine::Event]+) |
		(extended?='extends' refines+=[emachine::Event])
	)?
	('any' parameters+=XParameter+)?
	(extensions+= EventSync*)
	('where' guards+=XGuard+)?
	('then' actions+=XAction+)?
	('with' witnesses+=XWitness+)?
	'end'
;

EventSync returns einclusion::EventSynchronisation:
	{einclusion::EventSynchronisation}
	('synchronises' (prefix=ID'.')?synchronisedEvent = [emachine::Event])
;

enum XConvergence returns emachine::Convergence:
	ordinary = 'ordinary' | convergent = 'convergent' | anticipated = 'anticipated'
;

XParameter returns emachine::Parameter:
	{emachine::Parameter}
	name=ID
;

XGuard returns emachine::Guard:
	{emachine::Guard}
	 (theorem?='theorem')? name=XLABEL predicate= XFormula
;

XWitness returns emachine::Witness:
	{emachine::Witness}
	name=XLABEL predicate= XFormula
;

XAction returns emachine::Action:
	{emachine::Action}
	name=XLABEL action= XFormula
;

XFormula returns ecore::EString:
	(
		EVENTB_IDENTIFIER_KEYWORD |
		EVENTB_PREDICATE_SYMBOLS |
		EVENTB_EXPRESSION_SYMBOLS |
		ID |
		INT
	)+ 
;

EVENTB_IDENTIFIER_KEYWORD returns ecore::EString:
	'BOOL' |
	'FALSE' |
	'TRUE' |
	'bool' |
	'card' |
	'dom' |
	'finite' |
	'id' |
	'inter' |
	'max' |
	'min' |
	'mod' |
	'pred' |
	'prj1' |
	'prj2' |
	'ran' |
	'succ' |
	'union' |
	'ℕ1' |
	'ℕ' |
	'ℙ1' |
	'ℙ' |
	'ℤ'
;

EVENTB_PREDICATE_SYMBOLS returns ecore::EString:
	'(' | // Predicate calculus symbols
	')' |
	'⇔' | 
	'⇒' |
	'∧' | '&' |
	'∨' |
	'¬' |
	'⊤' |
	'⊥' |
	'∀' | '!' |
	'∃' | '#' |
	',' |
	'·' | '.' |
	'=' | // Build predicates from expressions
	'≠' |
	'≤' |
	'<' |
	'≥' |
	'>' |
	'∈' | ':' | // Include this for Rodin keyboard
	'∉' | 
	'⊂' |
	'⊄' |
	'⊆' |
	'⊈' |
	'partition' // This is missing from the Rodin D7 deliverable
;

EVENTB_EXPRESSION_SYMBOLS returns ecore::EString:
	'↔' | // Symbols for building set of relations
	'' |
	'' |
	'' |
	'⇸' |
	'→' |
	'⤔' |
	'↣' |
	'⤀' |
	'↠' |
	'⤖' |
	'{' | // Symbols for manipulating sets
	'}' |
	'↦' |
	'∅' |
	'∩' |
	'∪' |
	'∖' |
	'×' |
	'[' | // Symbols for manipulating functions and relations
	']' |
	'' |
	'∘' |
	';' |
	'⊗' |
	'∥' |
	'∼' |
	'◁' |
	'⩤' |
	'▷' |
	'⩥' |
	'λ' | '%' // Symbols for quantified expressions
	'⋂' |
	'⋃' |
	'∣' |
	'‥' | // Symbols for arithmetic expressions
	'+' |
	'−' | '-' |
	'∗' | '*' |
	'÷' | '/' | 
	'^' |
	'\\' // Allowed for LaTeX combos
;

@Override 
terminal ID: '^'?('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ') ('a'..'z'|'A'..'Z'|'_'| 'i'..'ￜ'|'0'..'9')*;