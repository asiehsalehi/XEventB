/*
 * generated by Xtext
 */
package ac.soton.xeventb.xmachine.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XMachineGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCommentAlternatives_1_0 = (Alternatives)cCommentAssignment_1.eContents().get(0);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0_0 = (RuleCall)cCommentAlternatives_1_0.eContents().get(0);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_0_1 = (RuleCall)cCommentAlternatives_1_0.eContents().get(1);
		private final Keyword cMachineKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cExtensionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtensionsMIncludesParserRuleCall_4_0 = (RuleCall)cExtensionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRefinesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRefinesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRefinesMachineCrossReference_5_1_0 = (CrossReference)cRefinesAssignment_5_1.eContents().get(0);
		private final RuleCall cRefinesMachineIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRefinesMachineCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSeesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSeesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cSeesContextCrossReference_6_1_0 = (CrossReference)cSeesAssignment_6_1.eContents().get(0);
		private final RuleCall cSeesContextIDTerminalRuleCall_6_1_0_1 = (RuleCall)cSeesContextCrossReference_6_1_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cVariablesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cVariablesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cVariablesXVariableParserRuleCall_7_1_0 = (RuleCall)cVariablesAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cInvariantsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cInvariantsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cInvariantsXInvariantParserRuleCall_8_1_0 = (RuleCall)cInvariantsAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cVariantKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cVariantAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cVariantXVariantParserRuleCall_9_1_0 = (RuleCall)cVariantAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cEventsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cEventsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cEventsXEventParserRuleCall_10_1_0 = (RuleCall)cEventsAssignment_10_1.eContents().get(0);
		private final Assignment cEventsAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cEventsXEventParserRuleCall_10_2_0 = (RuleCall)cEventsAssignment_10_2.eContents().get(0);
		private final Keyword cEndKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Machine emachine::Machine:
		//	{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)?
		//	//('id' extensionId = ID)// need to find a way to add it programmatically
		//	'machine' name=ID
		//	extensions+=MIncludes* ('refines' refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables'
		//	variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variant' variant=XVariant)? ('events' events+=XEvent
		//	events+=XEvent*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)? //('id' extensionId = ID)// need to find a way to add it programmatically
		//'machine' name=ID extensions+=MIncludes* ('refines' refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)?
		//('variables' variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variant' variant=XVariant)? ('events'
		//events+=XEvent events+=XEvent*)? 'end'
		public Group getGroup() { return cGroup; }

		//{emachine::Machine}
		public Action getMachineAction_0() { return cMachineAction_0; }

		//comment=(ML_COMMENT | SL_COMMENT)?
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//(ML_COMMENT | SL_COMMENT)
		public Alternatives getCommentAlternatives_1_0() { return cCommentAlternatives_1_0; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0_0() { return cCommentML_COMMENTTerminalRuleCall_1_0_0; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_0_1() { return cCommentSL_COMMENTTerminalRuleCall_1_0_1; }

		////('id' extensionId = ID)// need to find a way to add it programmatically
		//'machine'
		public Keyword getMachineKeyword_2() { return cMachineKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//extensions+=MIncludes*
		public Assignment getExtensionsAssignment_4() { return cExtensionsAssignment_4; }

		//MIncludes
		public RuleCall getExtensionsMIncludesParserRuleCall_4_0() { return cExtensionsMIncludesParserRuleCall_4_0; }

		//('refines' refines+=[emachine::Machine])?
		public Group getGroup_5() { return cGroup_5; }

		//'refines'
		public Keyword getRefinesKeyword_5_0() { return cRefinesKeyword_5_0; }

		//refines+=[emachine::Machine]
		public Assignment getRefinesAssignment_5_1() { return cRefinesAssignment_5_1; }

		//[emachine::Machine]
		public CrossReference getRefinesMachineCrossReference_5_1_0() { return cRefinesMachineCrossReference_5_1_0; }

		//ID
		public RuleCall getRefinesMachineIDTerminalRuleCall_5_1_0_1() { return cRefinesMachineIDTerminalRuleCall_5_1_0_1; }

		//('sees' sees+=[econtext::Context]+)?
		public Group getGroup_6() { return cGroup_6; }

		//'sees'
		public Keyword getSeesKeyword_6_0() { return cSeesKeyword_6_0; }

		//sees+=[econtext::Context]+
		public Assignment getSeesAssignment_6_1() { return cSeesAssignment_6_1; }

		//[econtext::Context]
		public CrossReference getSeesContextCrossReference_6_1_0() { return cSeesContextCrossReference_6_1_0; }

		//ID
		public RuleCall getSeesContextIDTerminalRuleCall_6_1_0_1() { return cSeesContextIDTerminalRuleCall_6_1_0_1; }

		//('variables' variables+=XVariable+)?
		public Group getGroup_7() { return cGroup_7; }

		//'variables'
		public Keyword getVariablesKeyword_7_0() { return cVariablesKeyword_7_0; }

		//variables+=XVariable+
		public Assignment getVariablesAssignment_7_1() { return cVariablesAssignment_7_1; }

		//XVariable
		public RuleCall getVariablesXVariableParserRuleCall_7_1_0() { return cVariablesXVariableParserRuleCall_7_1_0; }

		//('invariants' invariants+=XInvariant+)?
		public Group getGroup_8() { return cGroup_8; }

		//'invariants'
		public Keyword getInvariantsKeyword_8_0() { return cInvariantsKeyword_8_0; }

		//invariants+=XInvariant+
		public Assignment getInvariantsAssignment_8_1() { return cInvariantsAssignment_8_1; }

		//XInvariant
		public RuleCall getInvariantsXInvariantParserRuleCall_8_1_0() { return cInvariantsXInvariantParserRuleCall_8_1_0; }

		//('variant' variant=XVariant)?
		public Group getGroup_9() { return cGroup_9; }

		//'variant'
		public Keyword getVariantKeyword_9_0() { return cVariantKeyword_9_0; }

		//variant=XVariant
		public Assignment getVariantAssignment_9_1() { return cVariantAssignment_9_1; }

		//XVariant
		public RuleCall getVariantXVariantParserRuleCall_9_1_0() { return cVariantXVariantParserRuleCall_9_1_0; }

		//('events' events+=XEvent events+=XEvent*)?
		public Group getGroup_10() { return cGroup_10; }

		//'events'
		public Keyword getEventsKeyword_10_0() { return cEventsKeyword_10_0; }

		//events+=XEvent
		public Assignment getEventsAssignment_10_1() { return cEventsAssignment_10_1; }

		//XEvent
		public RuleCall getEventsXEventParserRuleCall_10_1_0() { return cEventsXEventParserRuleCall_10_1_0; }

		//events+=XEvent*
		public Assignment getEventsAssignment_10_2() { return cEventsAssignment_10_2; }

		//XEvent
		public RuleCall getEventsXEventParserRuleCall_10_2_0() { return cEventsXEventParserRuleCall_10_2_0; }

		//'end'
		public Keyword getEndKeyword_11() { return cEndKeyword_11; }
	}

	public class MIncludesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.MIncludes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMachineInclusionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExtensionIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExtensionIdIncludesKeyword_1_0 = (Keyword)cExtensionIdAssignment_1.eContents().get(0);
		private final Assignment cAbstractMachineAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAbstractMachineMachineCrossReference_2_0 = (CrossReference)cAbstractMachineAssignment_2.eContents().get(0);
		private final RuleCall cAbstractMachineMachineQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cAbstractMachineMachineCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cToKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConcreteMachineAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cConcreteMachineMachineCrossReference_3_1_0 = (CrossReference)cConcreteMachineAssignment_3_1.eContents().get(0);
		private final RuleCall cConcreteMachineMachineIDTerminalRuleCall_3_1_0_1 = (RuleCall)cConcreteMachineMachineCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPrefixesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPrefixesIDTerminalRuleCall_4_1_0 = (RuleCall)cPrefixesAssignment_4_1.eContents().get(0);
		private final Assignment cPrefixesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPrefixesIDTerminalRuleCall_4_2_0 = (RuleCall)cPrefixesAssignment_4_2.eContents().get(0);
		
		//MIncludes einclusion::MachineInclusion:
		//	{einclusion::MachineInclusion} extensionId='includes' abstractMachine=[emachine::Machine|QualifiedName] ('to'
		//	concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?;
		@Override public ParserRule getRule() { return rule; }

		//{einclusion::MachineInclusion} extensionId='includes' abstractMachine=[emachine::Machine|QualifiedName] ('to'
		//concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup() { return cGroup; }

		//{einclusion::MachineInclusion}
		public Action getMachineInclusionAction_0() { return cMachineInclusionAction_0; }

		//extensionId='includes'
		public Assignment getExtensionIdAssignment_1() { return cExtensionIdAssignment_1; }

		//'includes'
		public Keyword getExtensionIdIncludesKeyword_1_0() { return cExtensionIdIncludesKeyword_1_0; }

		//abstractMachine=[emachine::Machine|QualifiedName]
		public Assignment getAbstractMachineAssignment_2() { return cAbstractMachineAssignment_2; }

		//[emachine::Machine|QualifiedName]
		public CrossReference getAbstractMachineMachineCrossReference_2_0() { return cAbstractMachineMachineCrossReference_2_0; }

		//QualifiedName
		public RuleCall getAbstractMachineMachineQualifiedNameParserRuleCall_2_0_1() { return cAbstractMachineMachineQualifiedNameParserRuleCall_2_0_1; }

		//('to' concreteMachine=[emachine::Machine])?
		public Group getGroup_3() { return cGroup_3; }

		//'to'
		public Keyword getToKeyword_3_0() { return cToKeyword_3_0; }

		//concreteMachine=[emachine::Machine]
		public Assignment getConcreteMachineAssignment_3_1() { return cConcreteMachineAssignment_3_1; }

		//[emachine::Machine]
		public CrossReference getConcreteMachineMachineCrossReference_3_1_0() { return cConcreteMachineMachineCrossReference_3_1_0; }

		//ID
		public RuleCall getConcreteMachineMachineIDTerminalRuleCall_3_1_0_1() { return cConcreteMachineMachineIDTerminalRuleCall_3_1_0_1; }

		//('as' prefixes+=ID prefixes+=ID*)?
		public Group getGroup_4() { return cGroup_4; }

		//'as'
		public Keyword getAsKeyword_4_0() { return cAsKeyword_4_0; }

		//prefixes+=ID
		public Assignment getPrefixesAssignment_4_1() { return cPrefixesAssignment_4_1; }

		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_4_1_0() { return cPrefixesIDTerminalRuleCall_4_1_0; }

		//prefixes+=ID*
		public Assignment getPrefixesAssignment_4_2() { return cPrefixesAssignment_4_2; }

		//ID
		public RuleCall getPrefixesIDTerminalRuleCall_4_2_0() { return cPrefixesIDTerminalRuleCall_4_2_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)?;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)?
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)?
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class XVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariableNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXVariableMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXVariableSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XVariable emachine::Variable:
		//	XVariableNoComment | XVariableMLComment | XVariableSLComment;
		@Override public ParserRule getRule() { return rule; }

		//XVariableNoComment | XVariableMLComment | XVariableSLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XVariableNoComment
		public RuleCall getXVariableNoCommentParserRuleCall_0() { return cXVariableNoCommentParserRuleCall_0; }

		//XVariableMLComment
		public RuleCall getXVariableMLCommentParserRuleCall_1() { return cXVariableMLCommentParserRuleCall_1; }

		//XVariableSLComment
		public RuleCall getXVariableSLCommentParserRuleCall_2() { return cXVariableSLCommentParserRuleCall_2; }
	}

	public class XVariableNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariableNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XVariableNoComment emachine::Variable:
		//	{emachine::Variable} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Variable} name=ID
		public Group getGroup() { return cGroup; }

		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class XVariableMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariableMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XVariableMLComment emachine::Variable:
		//	{emachine::Variable} comment=ML_COMMENT
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Variable} comment=ML_COMMENT name=ID
		public Group getGroup() { return cGroup; }

		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class XVariableSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariableSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XVariableSLComment emachine::Variable:
		//	{emachine::Variable} name=ID
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Variable} name=ID comment=SL_COMMENT
		public Group getGroup() { return cGroup; }

		//{emachine::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}

	public class XInvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XInvariant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXInvariantNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXInvariantMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXInvariantSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XInvariant emachine::Invariant:
		//	XInvariantNoComment | XInvariantMLComment | XInvariantSLComment;
		@Override public ParserRule getRule() { return rule; }

		//XInvariantNoComment | XInvariantMLComment | XInvariantSLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XInvariantNoComment
		public RuleCall getXInvariantNoCommentParserRuleCall_0() { return cXInvariantNoCommentParserRuleCall_0; }

		//XInvariantMLComment
		public RuleCall getXInvariantMLCommentParserRuleCall_1() { return cXInvariantMLCommentParserRuleCall_1; }

		//XInvariantSLComment
		public RuleCall getXInvariantSLCommentParserRuleCall_2() { return cXInvariantSLCommentParserRuleCall_2; }
	}

	public class XInvariantNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XInvariantNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//XInvariantNoComment emachine::Invariant:
		//	{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }

		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }

		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }

		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }

		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}

	public class XInvariantMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XInvariantMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Assignment cTheoremAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTheoremTheoremKeyword_4_0 = (Keyword)cTheoremAssignment_4.eContents().get(0);
		
		//XInvariantMLComment emachine::Invariant:
		//	{emachine::Invariant} comment=ML_COMMENT
		//	name=XLABEL predicate=STRING theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Invariant} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }

		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }

		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }

		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }

		//theorem?='theorem'?
		public Assignment getTheoremAssignment_4() { return cTheoremAssignment_4; }

		//'theorem'
		public Keyword getTheoremTheoremKeyword_4_0() { return cTheoremTheoremKeyword_4_0; }
	}

	public class XInvariantSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XInvariantSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//XInvariantSLComment emachine::Invariant:
		//	{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'?
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
		public Group getGroup() { return cGroup; }

		//{emachine::Invariant}
		public Action getInvariantAction_0() { return cInvariantAction_0; }

		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }

		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }

		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_4_0() { return cCommentSL_COMMENTTerminalRuleCall_4_0; }
	}

	public class XVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariantNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXVariantMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXVariantSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XVariant emachine::Variant:
		//	XVariantNoComment | XVariantMLComment | XVariantSLComment;
		@Override public ParserRule getRule() { return rule; }

		//XVariantNoComment | XVariantMLComment | XVariantSLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XVariantNoComment
		public RuleCall getXVariantNoCommentParserRuleCall_0() { return cXVariantNoCommentParserRuleCall_0; }

		//XVariantMLComment
		public RuleCall getXVariantMLCommentParserRuleCall_1() { return cXVariantMLCommentParserRuleCall_1; }

		//XVariantSLComment
		public RuleCall getXVariantSLCommentParserRuleCall_2() { return cXVariantSLCommentParserRuleCall_2; }
	}

	public class XVariantNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariantNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//XVariantNoComment emachine::Variant:
		//	{emachine::Variant} expression=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Variant} expression=STRING
		public Group getGroup() { return cGroup; }

		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }

		//expression=STRING
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_1_0() { return cExpressionSTRINGTerminalRuleCall_1_0; }
	}

	public class XVariantMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariantMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//XVariantMLComment emachine::Variant:
		//	{emachine::Variant} comment=ML_COMMENT
		//	expression=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Variant} comment=ML_COMMENT expression=STRING
		public Group getGroup() { return cGroup; }

		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }

		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }

		//expression=STRING
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_2_0() { return cExpressionSTRINGTerminalRuleCall_2_0; }
	}

	public class XVariantSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XVariantSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariantAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionSTRINGTerminalRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XVariantSLComment emachine::Variant:
		//	{emachine::Variant} expression=STRING
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Variant} expression=STRING comment=SL_COMMENT
		public Group getGroup() { return cGroup; }

		//{emachine::Variant}
		public Action getVariantAction_0() { return cVariantAction_0; }

		//expression=STRING
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//STRING
		public RuleCall getExpressionSTRINGTerminalRuleCall_1_0() { return cExpressionSTRINGTerminalRuleCall_1_0; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}

	public class XEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XEvent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXEventNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXEventMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXEventSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XEvent emachine::Event:
		//	XEventNoComment | XEventMLComment | XEventSLComment;
		@Override public ParserRule getRule() { return rule; }

		//XEventNoComment | XEventMLComment | XEventSLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XEventNoComment
		public RuleCall getXEventNoCommentParserRuleCall_0() { return cXEventNoCommentParserRuleCall_0; }

		//XEventMLComment
		public RuleCall getXEventMLCommentParserRuleCall_1() { return cXEventMLCommentParserRuleCall_1; }

		//XEventSLComment
		public RuleCall getXEventSLCommentParserRuleCall_2() { return cXEventSLCommentParserRuleCall_2; }
	}

	public class XEventNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XEventNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cExtendedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cExtendedExtendedKeyword_2_0_0 = (Keyword)cExtendedAssignment_2_0.eContents().get(0);
		private final Assignment cConvergenceAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cConvergenceXConvergenceEnumRuleCall_2_1_0 = (RuleCall)cConvergenceAssignment_2_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExtensionsEventSyncParserRuleCall_3_0 = (RuleCall)cExtensionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRefinesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRefinesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRefinesEventCrossReference_4_1_0 = (CrossReference)cRefinesAssignment_4_1.eContents().get(0);
		private final RuleCall cRefinesEventIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRefinesEventCrossReference_4_1_0.eContents().get(1);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_0_0 = (Group)cGroup_5_0.eContents().get(0);
		private final Keyword cWithKeyword_5_0_0_0 = (Keyword)cGroup_5_0_0.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_0_0_1 = (Assignment)cGroup_5_0_0.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_5_0_0_1_0 = (RuleCall)cWitnessesAssignment_5_0_0_1.eContents().get(0);
		private final Keyword cBeginKeyword_5_0_1 = (Keyword)cGroup_5_0.eContents().get(1);
		private final Assignment cActionsAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cActionsXActionParserRuleCall_5_0_2_0 = (RuleCall)cActionsAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cWhenKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cGuardsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cGuardsXGuardParserRuleCall_5_1_1_0 = (RuleCall)cGuardsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_5_1_2 = (Group)cGroup_5_1.eContents().get(2);
		private final Keyword cWithKeyword_5_1_2_0 = (Keyword)cGroup_5_1_2.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_1_2_1 = (Assignment)cGroup_5_1_2.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_5_1_2_1_0 = (RuleCall)cWitnessesAssignment_5_1_2_1.eContents().get(0);
		private final Group cGroup_5_1_3 = (Group)cGroup_5_1.eContents().get(3);
		private final Keyword cThenKeyword_5_1_3_0 = (Keyword)cGroup_5_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_5_1_3_1 = (Assignment)cGroup_5_1_3.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_5_1_3_1_0 = (RuleCall)cActionsAssignment_5_1_3_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cAlternatives_5.eContents().get(2);
		private final Keyword cAnyKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cParametersAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cParametersXParameterParserRuleCall_5_2_1_0 = (RuleCall)cParametersAssignment_5_2_1.eContents().get(0);
		private final Keyword cWhereKeyword_5_2_2 = (Keyword)cGroup_5_2.eContents().get(2);
		private final Assignment cGuardsAssignment_5_2_3 = (Assignment)cGroup_5_2.eContents().get(3);
		private final RuleCall cGuardsXGuardParserRuleCall_5_2_3_0 = (RuleCall)cGuardsAssignment_5_2_3.eContents().get(0);
		private final Group cGroup_5_2_4 = (Group)cGroup_5_2.eContents().get(4);
		private final Keyword cWithKeyword_5_2_4_0 = (Keyword)cGroup_5_2_4.eContents().get(0);
		private final Assignment cWitnessesAssignment_5_2_4_1 = (Assignment)cGroup_5_2_4.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_5_2_4_1_0 = (RuleCall)cWitnessesAssignment_5_2_4_1.eContents().get(0);
		private final Group cGroup_5_2_5 = (Group)cGroup_5_2.eContents().get(5);
		private final Keyword cThenKeyword_5_2_5_0 = (Keyword)cGroup_5_2_5.eContents().get(0);
		private final Assignment cActionsAssignment_5_2_5_1 = (Assignment)cGroup_5_2_5.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_5_2_5_1_0 = (RuleCall)cActionsAssignment_5_2_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XEventNoComment emachine::Event:
		//	{emachine::Event} name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=EventSync* ('refines'
		//	refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)?
		//	'begin'
		//	actions+=XAction+
		//	|
		//	'when'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?
		//	|
		//	'any'
		//	parameters+=XParameter+
		//	'where'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Event} name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=EventSync* ('refines'
		//refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ | 'when' guards+=XGuard+
		//('with' witnesses+=XWitness+)? ('then' actions+=XAction+)? | 'any' parameters+=XParameter+ 'where' guards+=XGuard+
		//('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?)? 'end'
		public Group getGroup() { return cGroup; }

		//{emachine::Event}
		public Action getEventAction_0() { return cEventAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//extended?='extended'? & convergence=XConvergence?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//extended?='extended'?
		public Assignment getExtendedAssignment_2_0() { return cExtendedAssignment_2_0; }

		//'extended'
		public Keyword getExtendedExtendedKeyword_2_0_0() { return cExtendedExtendedKeyword_2_0_0; }

		//convergence=XConvergence?
		public Assignment getConvergenceAssignment_2_1() { return cConvergenceAssignment_2_1; }

		//XConvergence
		public RuleCall getConvergenceXConvergenceEnumRuleCall_2_1_0() { return cConvergenceXConvergenceEnumRuleCall_2_1_0; }

		//extensions+=EventSync*
		public Assignment getExtensionsAssignment_3() { return cExtensionsAssignment_3; }

		//EventSync
		public RuleCall getExtensionsEventSyncParserRuleCall_3_0() { return cExtensionsEventSyncParserRuleCall_3_0; }

		//('refines' refines+=[emachine::Event]+)?
		public Group getGroup_4() { return cGroup_4; }

		//'refines'
		public Keyword getRefinesKeyword_4_0() { return cRefinesKeyword_4_0; }

		//refines+=[emachine::Event]+
		public Assignment getRefinesAssignment_4_1() { return cRefinesAssignment_4_1; }

		//[emachine::Event]
		public CrossReference getRefinesEventCrossReference_4_1_0() { return cRefinesEventCrossReference_4_1_0; }

		//ID
		public RuleCall getRefinesEventIDTerminalRuleCall_4_1_0_1() { return cRefinesEventIDTerminalRuleCall_4_1_0_1; }

		//(('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ | 'when' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)? | 'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)?)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//('with' witnesses+=XWitness+)? 'begin' actions+=XAction+
		public Group getGroup_5_0() { return cGroup_5_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_5_0_0() { return cGroup_5_0_0; }

		//'with'
		public Keyword getWithKeyword_5_0_0_0() { return cWithKeyword_5_0_0_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_5_0_0_1() { return cWitnessesAssignment_5_0_0_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_5_0_0_1_0() { return cWitnessesXWitnessParserRuleCall_5_0_0_1_0; }

		//'begin'
		public Keyword getBeginKeyword_5_0_1() { return cBeginKeyword_5_0_1; }

		//actions+=XAction+
		public Assignment getActionsAssignment_5_0_2() { return cActionsAssignment_5_0_2; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_5_0_2_0() { return cActionsXActionParserRuleCall_5_0_2_0; }

		//'when' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//'when'
		public Keyword getWhenKeyword_5_1_0() { return cWhenKeyword_5_1_0; }

		//guards+=XGuard+
		public Assignment getGuardsAssignment_5_1_1() { return cGuardsAssignment_5_1_1; }

		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_5_1_1_0() { return cGuardsXGuardParserRuleCall_5_1_1_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_5_1_2() { return cGroup_5_1_2; }

		//'with'
		public Keyword getWithKeyword_5_1_2_0() { return cWithKeyword_5_1_2_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_5_1_2_1() { return cWitnessesAssignment_5_1_2_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_5_1_2_1_0() { return cWitnessesXWitnessParserRuleCall_5_1_2_1_0; }

		//('then' actions+=XAction+)?
		public Group getGroup_5_1_3() { return cGroup_5_1_3; }

		//'then'
		public Keyword getThenKeyword_5_1_3_0() { return cThenKeyword_5_1_3_0; }

		//actions+=XAction+
		public Assignment getActionsAssignment_5_1_3_1() { return cActionsAssignment_5_1_3_1; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_5_1_3_1_0() { return cActionsXActionParserRuleCall_5_1_3_1_0; }

		//'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//'any'
		public Keyword getAnyKeyword_5_2_0() { return cAnyKeyword_5_2_0; }

		//parameters+=XParameter+
		public Assignment getParametersAssignment_5_2_1() { return cParametersAssignment_5_2_1; }

		//XParameter
		public RuleCall getParametersXParameterParserRuleCall_5_2_1_0() { return cParametersXParameterParserRuleCall_5_2_1_0; }

		//'where'
		public Keyword getWhereKeyword_5_2_2() { return cWhereKeyword_5_2_2; }

		//guards+=XGuard+
		public Assignment getGuardsAssignment_5_2_3() { return cGuardsAssignment_5_2_3; }

		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_5_2_3_0() { return cGuardsXGuardParserRuleCall_5_2_3_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_5_2_4() { return cGroup_5_2_4; }

		//'with'
		public Keyword getWithKeyword_5_2_4_0() { return cWithKeyword_5_2_4_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_5_2_4_1() { return cWitnessesAssignment_5_2_4_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_5_2_4_1_0() { return cWitnessesXWitnessParserRuleCall_5_2_4_1_0; }

		//('then' actions+=XAction+)?
		public Group getGroup_5_2_5() { return cGroup_5_2_5; }

		//'then'
		public Keyword getThenKeyword_5_2_5_0() { return cThenKeyword_5_2_5_0; }

		//actions+=XAction+
		public Assignment getActionsAssignment_5_2_5_1() { return cActionsAssignment_5_2_5_1; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_5_2_5_1_0() { return cActionsXActionParserRuleCall_5_2_5_1_0; }

		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class XEventMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XEventMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cExtendedAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cExtendedExtendedKeyword_3_0_0 = (Keyword)cExtendedAssignment_3_0.eContents().get(0);
		private final Assignment cConvergenceAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cConvergenceXConvergenceEnumRuleCall_3_1_0 = (RuleCall)cConvergenceAssignment_3_1.eContents().get(0);
		private final Assignment cExtensionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtensionsEventSyncParserRuleCall_4_0 = (RuleCall)cExtensionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRefinesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRefinesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRefinesEventCrossReference_5_1_0 = (CrossReference)cRefinesAssignment_5_1.eContents().get(0);
		private final RuleCall cRefinesEventIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRefinesEventCrossReference_5_1_0.eContents().get(1);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Group cGroup_6_0_0 = (Group)cGroup_6_0.eContents().get(0);
		private final Keyword cWithKeyword_6_0_0_0 = (Keyword)cGroup_6_0_0.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_0_0_1 = (Assignment)cGroup_6_0_0.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_0_0_1_0 = (RuleCall)cWitnessesAssignment_6_0_0_1.eContents().get(0);
		private final Keyword cBeginKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cActionsAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final RuleCall cActionsXActionParserRuleCall_6_0_2_0 = (RuleCall)cActionsAssignment_6_0_2.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cWhenKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cGuardsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cGuardsXGuardParserRuleCall_6_1_1_0 = (RuleCall)cGuardsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_1_2 = (Group)cGroup_6_1.eContents().get(2);
		private final Keyword cWithKeyword_6_1_2_0 = (Keyword)cGroup_6_1_2.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_1_2_1 = (Assignment)cGroup_6_1_2.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_1_2_1_0 = (RuleCall)cWitnessesAssignment_6_1_2_1.eContents().get(0);
		private final Group cGroup_6_1_3 = (Group)cGroup_6_1.eContents().get(3);
		private final Keyword cThenKeyword_6_1_3_0 = (Keyword)cGroup_6_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_6_1_3_1 = (Assignment)cGroup_6_1_3.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_6_1_3_1_0 = (RuleCall)cActionsAssignment_6_1_3_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cAlternatives_6.eContents().get(2);
		private final Keyword cAnyKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cParametersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cParametersXParameterParserRuleCall_6_2_1_0 = (RuleCall)cParametersAssignment_6_2_1.eContents().get(0);
		private final Keyword cWhereKeyword_6_2_2 = (Keyword)cGroup_6_2.eContents().get(2);
		private final Assignment cGuardsAssignment_6_2_3 = (Assignment)cGroup_6_2.eContents().get(3);
		private final RuleCall cGuardsXGuardParserRuleCall_6_2_3_0 = (RuleCall)cGuardsAssignment_6_2_3.eContents().get(0);
		private final Group cGroup_6_2_4 = (Group)cGroup_6_2.eContents().get(4);
		private final Keyword cWithKeyword_6_2_4_0 = (Keyword)cGroup_6_2_4.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_2_4_1 = (Assignment)cGroup_6_2_4.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_2_4_1_0 = (RuleCall)cWitnessesAssignment_6_2_4_1.eContents().get(0);
		private final Group cGroup_6_2_5 = (Group)cGroup_6_2.eContents().get(5);
		private final Keyword cThenKeyword_6_2_5_0 = (Keyword)cGroup_6_2_5.eContents().get(0);
		private final Assignment cActionsAssignment_6_2_5_1 = (Assignment)cGroup_6_2_5.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_6_2_5_1_0 = (RuleCall)cActionsAssignment_6_2_5_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XEventMLComment emachine::Event:
		//	{emachine::Event} comment=ML_COMMENT
		//	name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=EventSync* ('refines'
		//	refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)?
		//	'begin'
		//	actions+=XAction+
		//	|
		//	'when'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?
		//	|
		//	'any'
		//	parameters+=XParameter+
		//	'where'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Event} comment=ML_COMMENT name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=EventSync*
		//('refines' refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ | 'when'
		//guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)? | 'any' parameters+=XParameter+ 'where'
		//guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?)? 'end'
		public Group getGroup() { return cGroup; }

		//{emachine::Event}
		public Action getEventAction_0() { return cEventAction_0; }

		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//extended?='extended'? & convergence=XConvergence?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//extended?='extended'?
		public Assignment getExtendedAssignment_3_0() { return cExtendedAssignment_3_0; }

		//'extended'
		public Keyword getExtendedExtendedKeyword_3_0_0() { return cExtendedExtendedKeyword_3_0_0; }

		//convergence=XConvergence?
		public Assignment getConvergenceAssignment_3_1() { return cConvergenceAssignment_3_1; }

		//XConvergence
		public RuleCall getConvergenceXConvergenceEnumRuleCall_3_1_0() { return cConvergenceXConvergenceEnumRuleCall_3_1_0; }

		//extensions+=EventSync*
		public Assignment getExtensionsAssignment_4() { return cExtensionsAssignment_4; }

		//EventSync
		public RuleCall getExtensionsEventSyncParserRuleCall_4_0() { return cExtensionsEventSyncParserRuleCall_4_0; }

		//('refines' refines+=[emachine::Event]+)?
		public Group getGroup_5() { return cGroup_5; }

		//'refines'
		public Keyword getRefinesKeyword_5_0() { return cRefinesKeyword_5_0; }

		//refines+=[emachine::Event]+
		public Assignment getRefinesAssignment_5_1() { return cRefinesAssignment_5_1; }

		//[emachine::Event]
		public CrossReference getRefinesEventCrossReference_5_1_0() { return cRefinesEventCrossReference_5_1_0; }

		//ID
		public RuleCall getRefinesEventIDTerminalRuleCall_5_1_0_1() { return cRefinesEventIDTerminalRuleCall_5_1_0_1; }

		//(('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ | 'when' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)? | 'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)?)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//('with' witnesses+=XWitness+)? 'begin' actions+=XAction+
		public Group getGroup_6_0() { return cGroup_6_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_0_0() { return cGroup_6_0_0; }

		//'with'
		public Keyword getWithKeyword_6_0_0_0() { return cWithKeyword_6_0_0_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_0_0_1() { return cWitnessesAssignment_6_0_0_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_0_0_1_0() { return cWitnessesXWitnessParserRuleCall_6_0_0_1_0; }

		//'begin'
		public Keyword getBeginKeyword_6_0_1() { return cBeginKeyword_6_0_1; }

		//actions+=XAction+
		public Assignment getActionsAssignment_6_0_2() { return cActionsAssignment_6_0_2; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_0_2_0() { return cActionsXActionParserRuleCall_6_0_2_0; }

		//'when' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//'when'
		public Keyword getWhenKeyword_6_1_0() { return cWhenKeyword_6_1_0; }

		//guards+=XGuard+
		public Assignment getGuardsAssignment_6_1_1() { return cGuardsAssignment_6_1_1; }

		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_6_1_1_0() { return cGuardsXGuardParserRuleCall_6_1_1_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_1_2() { return cGroup_6_1_2; }

		//'with'
		public Keyword getWithKeyword_6_1_2_0() { return cWithKeyword_6_1_2_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_1_2_1() { return cWitnessesAssignment_6_1_2_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_1_2_1_0() { return cWitnessesXWitnessParserRuleCall_6_1_2_1_0; }

		//('then' actions+=XAction+)?
		public Group getGroup_6_1_3() { return cGroup_6_1_3; }

		//'then'
		public Keyword getThenKeyword_6_1_3_0() { return cThenKeyword_6_1_3_0; }

		//actions+=XAction+
		public Assignment getActionsAssignment_6_1_3_1() { return cActionsAssignment_6_1_3_1; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_1_3_1_0() { return cActionsXActionParserRuleCall_6_1_3_1_0; }

		//'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//'any'
		public Keyword getAnyKeyword_6_2_0() { return cAnyKeyword_6_2_0; }

		//parameters+=XParameter+
		public Assignment getParametersAssignment_6_2_1() { return cParametersAssignment_6_2_1; }

		//XParameter
		public RuleCall getParametersXParameterParserRuleCall_6_2_1_0() { return cParametersXParameterParserRuleCall_6_2_1_0; }

		//'where'
		public Keyword getWhereKeyword_6_2_2() { return cWhereKeyword_6_2_2; }

		//guards+=XGuard+
		public Assignment getGuardsAssignment_6_2_3() { return cGuardsAssignment_6_2_3; }

		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_6_2_3_0() { return cGuardsXGuardParserRuleCall_6_2_3_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_2_4() { return cGroup_6_2_4; }

		//'with'
		public Keyword getWithKeyword_6_2_4_0() { return cWithKeyword_6_2_4_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_2_4_1() { return cWitnessesAssignment_6_2_4_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_2_4_1_0() { return cWitnessesXWitnessParserRuleCall_6_2_4_1_0; }

		//('then' actions+=XAction+)?
		public Group getGroup_6_2_5() { return cGroup_6_2_5; }

		//'then'
		public Keyword getThenKeyword_6_2_5_0() { return cThenKeyword_6_2_5_0; }

		//actions+=XAction+
		public Assignment getActionsAssignment_6_2_5_1() { return cActionsAssignment_6_2_5_1; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_2_5_1_0() { return cActionsXActionParserRuleCall_6_2_5_1_0; }

		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class XEventSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XEventSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cExtendedAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cExtendedExtendedKeyword_2_0_0 = (Keyword)cExtendedAssignment_2_0.eContents().get(0);
		private final Assignment cConvergenceAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cConvergenceXConvergenceEnumRuleCall_2_1_0 = (RuleCall)cConvergenceAssignment_2_1.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		private final Assignment cExtensionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExtensionsEventSyncParserRuleCall_4_0 = (RuleCall)cExtensionsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRefinesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRefinesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cRefinesEventCrossReference_5_1_0 = (CrossReference)cRefinesAssignment_5_1.eContents().get(0);
		private final RuleCall cRefinesEventIDTerminalRuleCall_5_1_0_1 = (RuleCall)cRefinesEventCrossReference_5_1_0.eContents().get(1);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Group cGroup_6_0_0 = (Group)cGroup_6_0.eContents().get(0);
		private final Keyword cWithKeyword_6_0_0_0 = (Keyword)cGroup_6_0_0.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_0_0_1 = (Assignment)cGroup_6_0_0.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_0_0_1_0 = (RuleCall)cWitnessesAssignment_6_0_0_1.eContents().get(0);
		private final Keyword cBeginKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cActionsAssignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final RuleCall cActionsXActionParserRuleCall_6_0_2_0 = (RuleCall)cActionsAssignment_6_0_2.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cWhenKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cGuardsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cGuardsXGuardParserRuleCall_6_1_1_0 = (RuleCall)cGuardsAssignment_6_1_1.eContents().get(0);
		private final Group cGroup_6_1_2 = (Group)cGroup_6_1.eContents().get(2);
		private final Keyword cWithKeyword_6_1_2_0 = (Keyword)cGroup_6_1_2.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_1_2_1 = (Assignment)cGroup_6_1_2.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_1_2_1_0 = (RuleCall)cWitnessesAssignment_6_1_2_1.eContents().get(0);
		private final Group cGroup_6_1_3 = (Group)cGroup_6_1.eContents().get(3);
		private final Keyword cThenKeyword_6_1_3_0 = (Keyword)cGroup_6_1_3.eContents().get(0);
		private final Assignment cActionsAssignment_6_1_3_1 = (Assignment)cGroup_6_1_3.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_6_1_3_1_0 = (RuleCall)cActionsAssignment_6_1_3_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cAlternatives_6.eContents().get(2);
		private final Keyword cAnyKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cParametersAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cParametersXParameterParserRuleCall_6_2_1_0 = (RuleCall)cParametersAssignment_6_2_1.eContents().get(0);
		private final Keyword cWhereKeyword_6_2_2 = (Keyword)cGroup_6_2.eContents().get(2);
		private final Assignment cGuardsAssignment_6_2_3 = (Assignment)cGroup_6_2.eContents().get(3);
		private final RuleCall cGuardsXGuardParserRuleCall_6_2_3_0 = (RuleCall)cGuardsAssignment_6_2_3.eContents().get(0);
		private final Group cGroup_6_2_4 = (Group)cGroup_6_2.eContents().get(4);
		private final Keyword cWithKeyword_6_2_4_0 = (Keyword)cGroup_6_2_4.eContents().get(0);
		private final Assignment cWitnessesAssignment_6_2_4_1 = (Assignment)cGroup_6_2_4.eContents().get(1);
		private final RuleCall cWitnessesXWitnessParserRuleCall_6_2_4_1_0 = (RuleCall)cWitnessesAssignment_6_2_4_1.eContents().get(0);
		private final Group cGroup_6_2_5 = (Group)cGroup_6_2.eContents().get(5);
		private final Keyword cThenKeyword_6_2_5_0 = (Keyword)cGroup_6_2_5.eContents().get(0);
		private final Assignment cActionsAssignment_6_2_5_1 = (Assignment)cGroup_6_2_5.eContents().get(1);
		private final RuleCall cActionsXActionParserRuleCall_6_2_5_1_0 = (RuleCall)cActionsAssignment_6_2_5_1.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//XEventSLComment emachine::Event:
		//	{emachine::Event} name=ID (extended?='extended'? & convergence=XConvergence?) comment=SL_COMMENT
		//	extensions+=EventSync* ('refines' refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)?
		//	'begin'
		//	actions+=XAction+
		//	|
		//	'when'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?
		//	|
		//	'any'
		//	parameters+=XParameter+
		//	'where'
		//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
		//	actions+=XAction+)?)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Event} name=ID (extended?='extended'? & convergence=XConvergence?) comment=SL_COMMENT extensions+=EventSync*
		//('refines' refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ | 'when'
		//guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)? | 'any' parameters+=XParameter+ 'where'
		//guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?)? 'end'
		public Group getGroup() { return cGroup; }

		//{emachine::Event}
		public Action getEventAction_0() { return cEventAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//extended?='extended'? & convergence=XConvergence?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//extended?='extended'?
		public Assignment getExtendedAssignment_2_0() { return cExtendedAssignment_2_0; }

		//'extended'
		public Keyword getExtendedExtendedKeyword_2_0_0() { return cExtendedExtendedKeyword_2_0_0; }

		//convergence=XConvergence?
		public Assignment getConvergenceAssignment_2_1() { return cConvergenceAssignment_2_1; }

		//XConvergence
		public RuleCall getConvergenceXConvergenceEnumRuleCall_2_1_0() { return cConvergenceXConvergenceEnumRuleCall_2_1_0; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_3_0() { return cCommentSL_COMMENTTerminalRuleCall_3_0; }

		//extensions+=EventSync*
		public Assignment getExtensionsAssignment_4() { return cExtensionsAssignment_4; }

		//EventSync
		public RuleCall getExtensionsEventSyncParserRuleCall_4_0() { return cExtensionsEventSyncParserRuleCall_4_0; }

		//('refines' refines+=[emachine::Event]+)?
		public Group getGroup_5() { return cGroup_5; }

		//'refines'
		public Keyword getRefinesKeyword_5_0() { return cRefinesKeyword_5_0; }

		//refines+=[emachine::Event]+
		public Assignment getRefinesAssignment_5_1() { return cRefinesAssignment_5_1; }

		//[emachine::Event]
		public CrossReference getRefinesEventCrossReference_5_1_0() { return cRefinesEventCrossReference_5_1_0; }

		//ID
		public RuleCall getRefinesEventIDTerminalRuleCall_5_1_0_1() { return cRefinesEventIDTerminalRuleCall_5_1_0_1; }

		//(('with' witnesses+=XWitness+)? 'begin' actions+=XAction+ | 'when' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)? | 'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)?
		//('then' actions+=XAction+)?)?
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//('with' witnesses+=XWitness+)? 'begin' actions+=XAction+
		public Group getGroup_6_0() { return cGroup_6_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_0_0() { return cGroup_6_0_0; }

		//'with'
		public Keyword getWithKeyword_6_0_0_0() { return cWithKeyword_6_0_0_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_0_0_1() { return cWitnessesAssignment_6_0_0_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_0_0_1_0() { return cWitnessesXWitnessParserRuleCall_6_0_0_1_0; }

		//'begin'
		public Keyword getBeginKeyword_6_0_1() { return cBeginKeyword_6_0_1; }

		//actions+=XAction+
		public Assignment getActionsAssignment_6_0_2() { return cActionsAssignment_6_0_2; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_0_2_0() { return cActionsXActionParserRuleCall_6_0_2_0; }

		//'when' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?
		public Group getGroup_6_1() { return cGroup_6_1; }

		//'when'
		public Keyword getWhenKeyword_6_1_0() { return cWhenKeyword_6_1_0; }

		//guards+=XGuard+
		public Assignment getGuardsAssignment_6_1_1() { return cGuardsAssignment_6_1_1; }

		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_6_1_1_0() { return cGuardsXGuardParserRuleCall_6_1_1_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_1_2() { return cGroup_6_1_2; }

		//'with'
		public Keyword getWithKeyword_6_1_2_0() { return cWithKeyword_6_1_2_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_1_2_1() { return cWitnessesAssignment_6_1_2_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_1_2_1_0() { return cWitnessesXWitnessParserRuleCall_6_1_2_1_0; }

		//('then' actions+=XAction+)?
		public Group getGroup_6_1_3() { return cGroup_6_1_3; }

		//'then'
		public Keyword getThenKeyword_6_1_3_0() { return cThenKeyword_6_1_3_0; }

		//actions+=XAction+
		public Assignment getActionsAssignment_6_1_3_1() { return cActionsAssignment_6_1_3_1; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_1_3_1_0() { return cActionsXActionParserRuleCall_6_1_3_1_0; }

		//'any' parameters+=XParameter+ 'where' guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then' actions+=XAction+)?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//'any'
		public Keyword getAnyKeyword_6_2_0() { return cAnyKeyword_6_2_0; }

		//parameters+=XParameter+
		public Assignment getParametersAssignment_6_2_1() { return cParametersAssignment_6_2_1; }

		//XParameter
		public RuleCall getParametersXParameterParserRuleCall_6_2_1_0() { return cParametersXParameterParserRuleCall_6_2_1_0; }

		//'where'
		public Keyword getWhereKeyword_6_2_2() { return cWhereKeyword_6_2_2; }

		//guards+=XGuard+
		public Assignment getGuardsAssignment_6_2_3() { return cGuardsAssignment_6_2_3; }

		//XGuard
		public RuleCall getGuardsXGuardParserRuleCall_6_2_3_0() { return cGuardsXGuardParserRuleCall_6_2_3_0; }

		//('with' witnesses+=XWitness+)?
		public Group getGroup_6_2_4() { return cGroup_6_2_4; }

		//'with'
		public Keyword getWithKeyword_6_2_4_0() { return cWithKeyword_6_2_4_0; }

		//witnesses+=XWitness+
		public Assignment getWitnessesAssignment_6_2_4_1() { return cWitnessesAssignment_6_2_4_1; }

		//XWitness
		public RuleCall getWitnessesXWitnessParserRuleCall_6_2_4_1_0() { return cWitnessesXWitnessParserRuleCall_6_2_4_1_0; }

		//('then' actions+=XAction+)?
		public Group getGroup_6_2_5() { return cGroup_6_2_5; }

		//'then'
		public Keyword getThenKeyword_6_2_5_0() { return cThenKeyword_6_2_5_0; }

		//actions+=XAction+
		public Assignment getActionsAssignment_6_2_5_1() { return cActionsAssignment_6_2_5_1; }

		//XAction
		public RuleCall getActionsXActionParserRuleCall_6_2_5_1_0() { return cActionsXActionParserRuleCall_6_2_5_1_0; }

		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class EventSyncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.EventSync");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventSynchronisationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExtensionIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cExtensionIdSynchronisesKeyword_1_0 = (Keyword)cExtensionIdAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cPrefixAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cPrefixIDTerminalRuleCall_2_0_0_0 = (RuleCall)cPrefixAssignment_2_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cSynchronisedEventAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSynchronisedEventEventCrossReference_2_1_0 = (CrossReference)cSynchronisedEventAssignment_2_1.eContents().get(0);
		private final RuleCall cSynchronisedEventEventIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSynchronisedEventEventCrossReference_2_1_0.eContents().get(1);
		
		//EventSync einclusion::EventSynchronisation:
		//	{einclusion::EventSynchronisation} extensionId='synchronises' ((prefix=ID '.')? synchronisedEvent=[emachine::Event]);
		@Override public ParserRule getRule() { return rule; }

		//{einclusion::EventSynchronisation} extensionId='synchronises' ((prefix=ID '.')? synchronisedEvent=[emachine::Event])
		public Group getGroup() { return cGroup; }

		//{einclusion::EventSynchronisation}
		public Action getEventSynchronisationAction_0() { return cEventSynchronisationAction_0; }

		//extensionId='synchronises'
		public Assignment getExtensionIdAssignment_1() { return cExtensionIdAssignment_1; }

		//'synchronises'
		public Keyword getExtensionIdSynchronisesKeyword_1_0() { return cExtensionIdSynchronisesKeyword_1_0; }

		//(prefix=ID '.')? synchronisedEvent=[emachine::Event]
		public Group getGroup_2() { return cGroup_2; }

		//(prefix=ID '.')?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//prefix=ID
		public Assignment getPrefixAssignment_2_0_0() { return cPrefixAssignment_2_0_0; }

		//ID
		public RuleCall getPrefixIDTerminalRuleCall_2_0_0_0() { return cPrefixIDTerminalRuleCall_2_0_0_0; }

		//'.'
		public Keyword getFullStopKeyword_2_0_1() { return cFullStopKeyword_2_0_1; }

		//synchronisedEvent=[emachine::Event]
		public Assignment getSynchronisedEventAssignment_2_1() { return cSynchronisedEventAssignment_2_1; }

		//[emachine::Event]
		public CrossReference getSynchronisedEventEventCrossReference_2_1_0() { return cSynchronisedEventEventCrossReference_2_1_0; }

		//ID
		public RuleCall getSynchronisedEventEventIDTerminalRuleCall_2_1_0_1() { return cSynchronisedEventEventIDTerminalRuleCall_2_1_0_1; }
	}

	public class XParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXParameterNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXParameterMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXParameterSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XParameter emachine::Parameter:
		//	XParameterNoComment | XParameterMLComment | XParameterSLComment;
		@Override public ParserRule getRule() { return rule; }

		//XParameterNoComment | XParameterMLComment | XParameterSLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XParameterNoComment
		public RuleCall getXParameterNoCommentParserRuleCall_0() { return cXParameterNoCommentParserRuleCall_0; }

		//XParameterMLComment
		public RuleCall getXParameterMLCommentParserRuleCall_1() { return cXParameterMLCommentParserRuleCall_1; }

		//XParameterSLComment
		public RuleCall getXParameterSLCommentParserRuleCall_2() { return cXParameterSLCommentParserRuleCall_2; }
	}

	public class XParameterNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XParameterNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//XParameterNoComment emachine::Parameter:
		//	{emachine::Parameter} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Parameter} name=ID
		public Group getGroup() { return cGroup; }

		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class XParameterMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XParameterMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//XParameterMLComment emachine::Parameter:
		//	{emachine::Parameter} comment=ML_COMMENT
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Parameter} comment=ML_COMMENT name=ID
		public Group getGroup() { return cGroup; }

		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class XParameterSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XParameterSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XParameterSLComment emachine::Parameter:
		//	{emachine::Parameter} name=ID
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Parameter} name=ID comment=SL_COMMENT
		public Group getGroup() { return cGroup; }

		//{emachine::Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_2_0() { return cCommentSL_COMMENTTerminalRuleCall_2_0; }
	}

	public class XGuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGuard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXGuardNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXGuardMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXGuardSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XGuard emachine::Guard:
		//	XGuardNoComment | XGuardMLComment | XGuardSLComment;
		@Override public ParserRule getRule() { return rule; }

		//XGuardNoComment | XGuardMLComment | XGuardSLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XGuardNoComment
		public RuleCall getXGuardNoCommentParserRuleCall_0() { return cXGuardNoCommentParserRuleCall_0; }

		//XGuardMLComment
		public RuleCall getXGuardMLCommentParserRuleCall_1() { return cXGuardMLCommentParserRuleCall_1; }

		//XGuardSLComment
		public RuleCall getXGuardSLCommentParserRuleCall_2() { return cXGuardSLCommentParserRuleCall_2; }
	}

	public class XGuardNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGuardNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		
		//XGuardNoComment emachine::Guard:
		//	{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }

		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }

		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }

		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }

		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }
	}

	public class XGuardMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGuardMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Assignment cTheoremAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cTheoremTheoremKeyword_4_0 = (Keyword)cTheoremAssignment_4.eContents().get(0);
		
		//XGuardMLComment emachine::Guard:
		//	{emachine::Guard} comment=ML_COMMENT
		//	name=XLABEL predicate=STRING theorem?='theorem'?;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Guard} comment=ML_COMMENT name=XLABEL predicate=STRING theorem?='theorem'?
		public Group getGroup() { return cGroup; }

		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }

		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }

		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }

		//theorem?='theorem'?
		public Assignment getTheoremAssignment_4() { return cTheoremAssignment_4; }

		//'theorem'
		public Keyword getTheoremTheoremKeyword_4_0() { return cTheoremTheoremKeyword_4_0; }
	}

	public class XGuardSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XGuardSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGuardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cTheoremAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cTheoremTheoremKeyword_3_0 = (Keyword)cTheoremAssignment_3.eContents().get(0);
		private final Assignment cCommentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_4_0 = (RuleCall)cCommentAssignment_4.eContents().get(0);
		
		//XGuardSLComment emachine::Guard:
		//	{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'?
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'? comment=SL_COMMENT
		public Group getGroup() { return cGroup; }

		//{emachine::Guard}
		public Action getGuardAction_0() { return cGuardAction_0; }

		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }

		//theorem?='theorem'?
		public Assignment getTheoremAssignment_3() { return cTheoremAssignment_3; }

		//'theorem'
		public Keyword getTheoremTheoremKeyword_3_0() { return cTheoremTheoremKeyword_3_0; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment_4() { return cCommentAssignment_4; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_4_0() { return cCommentSL_COMMENTTerminalRuleCall_4_0; }
	}

	public class XWitnessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XWitness");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXWitnessNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXWitnessMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXWitnessSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XWitness emachine::Witness:
		//	XWitnessNoComment | XWitnessMLComment | XWitnessSLComment;
		@Override public ParserRule getRule() { return rule; }

		//XWitnessNoComment | XWitnessMLComment | XWitnessSLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XWitnessNoComment
		public RuleCall getXWitnessNoCommentParserRuleCall_0() { return cXWitnessNoCommentParserRuleCall_0; }

		//XWitnessMLComment
		public RuleCall getXWitnessMLCommentParserRuleCall_1() { return cXWitnessMLCommentParserRuleCall_1; }

		//XWitnessSLComment
		public RuleCall getXWitnessSLCommentParserRuleCall_2() { return cXWitnessSLCommentParserRuleCall_2; }
	}

	public class XWitnessNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XWitnessNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		
		//XWitnessNoComment emachine::Witness:
		//	{emachine::Witness} name=XLABEL predicate=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Witness} name=XLABEL predicate=STRING
		public Group getGroup() { return cGroup; }

		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }

		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }
	}

	public class XWitnessMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XWitnessMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		
		//XWitnessMLComment emachine::Witness:
		//	{emachine::Witness} comment=ML_COMMENT
		//	name=XLABEL predicate=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Witness} comment=ML_COMMENT name=XLABEL predicate=STRING
		public Group getGroup() { return cGroup; }

		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }

		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }

		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_3_0() { return cPredicateSTRINGTerminalRuleCall_3_0; }
	}

	public class XWitnessSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XWitnessSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWitnessAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cPredicateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicateSTRINGTerminalRuleCall_2_0 = (RuleCall)cPredicateAssignment_2.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		//XWitnessSLComment emachine::Witness:
		//	{emachine::Witness} name=XLABEL predicate=STRING
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Witness} name=XLABEL predicate=STRING comment=SL_COMMENT
		public Group getGroup() { return cGroup; }

		//{emachine::Witness}
		public Action getWitnessAction_0() { return cWitnessAction_0; }

		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }

		//predicate=STRING
		public Assignment getPredicateAssignment_2() { return cPredicateAssignment_2; }

		//STRING
		public RuleCall getPredicateSTRINGTerminalRuleCall_2_0() { return cPredicateSTRINGTerminalRuleCall_2_0; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_3_0() { return cCommentSL_COMMENTTerminalRuleCall_3_0; }
	}

	public class XActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXActionNoCommentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXActionMLCommentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXActionSLCommentParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//XAction emachine::Action:
		//	XActionNoComment | XActionMLComment | XActionSLComment;
		@Override public ParserRule getRule() { return rule; }

		//XActionNoComment | XActionMLComment | XActionSLComment
		public Alternatives getAlternatives() { return cAlternatives; }

		//XActionNoComment
		public RuleCall getXActionNoCommentParserRuleCall_0() { return cXActionNoCommentParserRuleCall_0; }

		//XActionMLComment
		public RuleCall getXActionMLCommentParserRuleCall_1() { return cXActionMLCommentParserRuleCall_1; }

		//XActionSLComment
		public RuleCall getXActionSLCommentParserRuleCall_2() { return cXActionSLCommentParserRuleCall_2; }
	}

	public class XActionNoCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XActionNoComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionSTRINGTerminalRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		
		//XActionNoComment emachine::Action:
		//	{emachine::Action} name=XLABEL action=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Action} name=XLABEL action=STRING
		public Group getGroup() { return cGroup; }

		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }

		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }

		//action=STRING
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }

		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_2_0() { return cActionSTRINGTerminalRuleCall_2_0; }
	}

	public class XActionMLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XActionMLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCommentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommentML_COMMENTTerminalRuleCall_1_0 = (RuleCall)cCommentAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameXLABELTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionSTRINGTerminalRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//XActionMLComment emachine::Action:
		//	{emachine::Action} comment=ML_COMMENT
		//	name=XLABEL action=STRING;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Action} comment=ML_COMMENT name=XLABEL action=STRING
		public Group getGroup() { return cGroup; }

		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }

		//comment=ML_COMMENT
		public Assignment getCommentAssignment_1() { return cCommentAssignment_1; }

		//ML_COMMENT
		public RuleCall getCommentML_COMMENTTerminalRuleCall_1_0() { return cCommentML_COMMENTTerminalRuleCall_1_0; }

		//name=XLABEL
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_2_0() { return cNameXLABELTerminalRuleCall_2_0; }

		//action=STRING
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_3_0() { return cActionSTRINGTerminalRuleCall_3_0; }
	}

	public class XActionSLCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XActionSLComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameXLABELTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionSTRINGTerminalRuleCall_2_0 = (RuleCall)cActionAssignment_2.eContents().get(0);
		private final Assignment cCommentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_3_0 = (RuleCall)cCommentAssignment_3.eContents().get(0);
		
		//XActionSLComment emachine::Action:
		//	{emachine::Action} name=XLABEL action=STRING
		//	comment=SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }

		//{emachine::Action} name=XLABEL action=STRING comment=SL_COMMENT
		public Group getGroup() { return cGroup; }

		//{emachine::Action}
		public Action getActionAction_0() { return cActionAction_0; }

		//name=XLABEL
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//XLABEL
		public RuleCall getNameXLABELTerminalRuleCall_1_0() { return cNameXLABELTerminalRuleCall_1_0; }

		//action=STRING
		public Assignment getActionAssignment_2() { return cActionAssignment_2; }

		//STRING
		public RuleCall getActionSTRINGTerminalRuleCall_2_0() { return cActionSTRINGTerminalRuleCall_2_0; }

		//comment=SL_COMMENT
		public Assignment getCommentAssignment_3() { return cCommentAssignment_3; }

		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_3_0() { return cCommentSL_COMMENTTerminalRuleCall_3_0; }
	}
	
	
	public class XConvergenceElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XConvergence");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOrdinaryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOrdinaryOrdinaryKeyword_0_0 = (Keyword)cOrdinaryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConvergentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConvergentConvergentKeyword_1_0 = (Keyword)cConvergentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAnticipatedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAnticipatedAnticipatedKeyword_2_0 = (Keyword)cAnticipatedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum XConvergence returns emachine::Convergence:
		//	ordinary | convergent | anticipated;
		public EnumRule getRule() { return rule; }

		//ordinary | convergent | anticipated
		public Alternatives getAlternatives() { return cAlternatives; }

		//ordinary
		public EnumLiteralDeclaration getOrdinaryEnumLiteralDeclaration_0() { return cOrdinaryEnumLiteralDeclaration_0; }

		//'ordinary'
		public Keyword getOrdinaryOrdinaryKeyword_0_0() { return cOrdinaryOrdinaryKeyword_0_0; }

		//convergent
		public EnumLiteralDeclaration getConvergentEnumLiteralDeclaration_1() { return cConvergentEnumLiteralDeclaration_1; }

		//'convergent'
		public Keyword getConvergentConvergentKeyword_1_0() { return cConvergentConvergentKeyword_1_0; }

		//anticipated
		public EnumLiteralDeclaration getAnticipatedEnumLiteralDeclaration_2() { return cAnticipatedEnumLiteralDeclaration_2; }

		//'anticipated'
		public Keyword getAnticipatedAnticipatedKeyword_2_0() { return cAnticipatedAnticipatedKeyword_2_0; }
	}
	
	private final MachineElements pMachine;
	private final MIncludesElements pMIncludes;
	private final QualifiedNameElements pQualifiedName;
	private final XVariableElements pXVariable;
	private final XVariableNoCommentElements pXVariableNoComment;
	private final XVariableMLCommentElements pXVariableMLComment;
	private final XVariableSLCommentElements pXVariableSLComment;
	private final XInvariantElements pXInvariant;
	private final XInvariantNoCommentElements pXInvariantNoComment;
	private final XInvariantMLCommentElements pXInvariantMLComment;
	private final XInvariantSLCommentElements pXInvariantSLComment;
	private final TerminalRule tXLABEL;
	private final XVariantElements pXVariant;
	private final XVariantNoCommentElements pXVariantNoComment;
	private final XVariantMLCommentElements pXVariantMLComment;
	private final XVariantSLCommentElements pXVariantSLComment;
	private final XEventElements pXEvent;
	private final XEventNoCommentElements pXEventNoComment;
	private final XEventMLCommentElements pXEventMLComment;
	private final XEventSLCommentElements pXEventSLComment;
	private final EventSyncElements pEventSync;
	private final XConvergenceElements eXConvergence;
	private final XParameterElements pXParameter;
	private final XParameterNoCommentElements pXParameterNoComment;
	private final XParameterMLCommentElements pXParameterMLComment;
	private final XParameterSLCommentElements pXParameterSLComment;
	private final XGuardElements pXGuard;
	private final XGuardNoCommentElements pXGuardNoComment;
	private final XGuardMLCommentElements pXGuardMLComment;
	private final XGuardSLCommentElements pXGuardSLComment;
	private final XWitnessElements pXWitness;
	private final XWitnessNoCommentElements pXWitnessNoComment;
	private final XWitnessMLCommentElements pXWitnessMLComment;
	private final XWitnessSLCommentElements pXWitnessSLComment;
	private final XActionElements pXAction;
	private final XActionNoCommentElements pXActionNoComment;
	private final XActionMLCommentElements pXActionMLComment;
	private final XActionSLCommentElements pXActionSLComment;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XMachineGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMachine = new MachineElements();
		this.pMIncludes = new MIncludesElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pXVariable = new XVariableElements();
		this.pXVariableNoComment = new XVariableNoCommentElements();
		this.pXVariableMLComment = new XVariableMLCommentElements();
		this.pXVariableSLComment = new XVariableSLCommentElements();
		this.pXInvariant = new XInvariantElements();
		this.pXInvariantNoComment = new XInvariantNoCommentElements();
		this.pXInvariantMLComment = new XInvariantMLCommentElements();
		this.pXInvariantSLComment = new XInvariantSLCommentElements();
		this.tXLABEL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xeventb.xmachine.XMachine.XLABEL");
		this.pXVariant = new XVariantElements();
		this.pXVariantNoComment = new XVariantNoCommentElements();
		this.pXVariantMLComment = new XVariantMLCommentElements();
		this.pXVariantSLComment = new XVariantSLCommentElements();
		this.pXEvent = new XEventElements();
		this.pXEventNoComment = new XEventNoCommentElements();
		this.pXEventMLComment = new XEventMLCommentElements();
		this.pXEventSLComment = new XEventSLCommentElements();
		this.pEventSync = new EventSyncElements();
		this.eXConvergence = new XConvergenceElements();
		this.pXParameter = new XParameterElements();
		this.pXParameterNoComment = new XParameterNoCommentElements();
		this.pXParameterMLComment = new XParameterMLCommentElements();
		this.pXParameterSLComment = new XParameterSLCommentElements();
		this.pXGuard = new XGuardElements();
		this.pXGuardNoComment = new XGuardNoCommentElements();
		this.pXGuardMLComment = new XGuardMLCommentElements();
		this.pXGuardSLComment = new XGuardSLCommentElements();
		this.pXWitness = new XWitnessElements();
		this.pXWitnessNoComment = new XWitnessNoCommentElements();
		this.pXWitnessMLComment = new XWitnessMLCommentElements();
		this.pXWitnessSLComment = new XWitnessSLCommentElements();
		this.pXAction = new XActionElements();
		this.pXActionNoComment = new XActionNoCommentElements();
		this.pXActionMLComment = new XActionMLCommentElements();
		this.pXActionSLComment = new XActionSLCommentElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xeventb.xmachine.XMachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Machine emachine::Machine:
	//	{emachine::Machine} comment=(ML_COMMENT | SL_COMMENT)?
	//	//('id' extensionId = ID)// need to find a way to add it programmatically
	//	'machine' name=ID
	//	extensions+=MIncludes* ('refines' refines+=[emachine::Machine])? ('sees' sees+=[econtext::Context]+)? ('variables'
	//	variables+=XVariable+)? ('invariants' invariants+=XInvariant+)? ('variant' variant=XVariant)? ('events' events+=XEvent
	//	events+=XEvent*)?
	//	'end';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}

	//MIncludes einclusion::MachineInclusion:
	//	{einclusion::MachineInclusion} extensionId='includes' abstractMachine=[emachine::Machine|QualifiedName] ('to'
	//	concreteMachine=[emachine::Machine])? ('as' prefixes+=ID prefixes+=ID*)?;
	public MIncludesElements getMIncludesAccess() {
		return pMIncludes;
	}
	
	public ParserRule getMIncludesRule() {
		return getMIncludesAccess().getRule();
	}

	//QualifiedName:
	//	ID ('.' ID)?;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//XVariable emachine::Variable:
	//	XVariableNoComment | XVariableMLComment | XVariableSLComment;
	public XVariableElements getXVariableAccess() {
		return pXVariable;
	}
	
	public ParserRule getXVariableRule() {
		return getXVariableAccess().getRule();
	}

	//XVariableNoComment emachine::Variable:
	//	{emachine::Variable} name=ID;
	public XVariableNoCommentElements getXVariableNoCommentAccess() {
		return pXVariableNoComment;
	}
	
	public ParserRule getXVariableNoCommentRule() {
		return getXVariableNoCommentAccess().getRule();
	}

	//XVariableMLComment emachine::Variable:
	//	{emachine::Variable} comment=ML_COMMENT
	//	name=ID;
	public XVariableMLCommentElements getXVariableMLCommentAccess() {
		return pXVariableMLComment;
	}
	
	public ParserRule getXVariableMLCommentRule() {
		return getXVariableMLCommentAccess().getRule();
	}

	//XVariableSLComment emachine::Variable:
	//	{emachine::Variable} name=ID
	//	comment=SL_COMMENT;
	public XVariableSLCommentElements getXVariableSLCommentAccess() {
		return pXVariableSLComment;
	}
	
	public ParserRule getXVariableSLCommentRule() {
		return getXVariableSLCommentAccess().getRule();
	}

	//XInvariant emachine::Invariant:
	//	XInvariantNoComment | XInvariantMLComment | XInvariantSLComment;
	public XInvariantElements getXInvariantAccess() {
		return pXInvariant;
	}
	
	public ParserRule getXInvariantRule() {
		return getXInvariantAccess().getRule();
	}

	//XInvariantNoComment emachine::Invariant:
	//	{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'?;
	public XInvariantNoCommentElements getXInvariantNoCommentAccess() {
		return pXInvariantNoComment;
	}
	
	public ParserRule getXInvariantNoCommentRule() {
		return getXInvariantNoCommentAccess().getRule();
	}

	//XInvariantMLComment emachine::Invariant:
	//	{emachine::Invariant} comment=ML_COMMENT
	//	name=XLABEL predicate=STRING theorem?='theorem'?;
	public XInvariantMLCommentElements getXInvariantMLCommentAccess() {
		return pXInvariantMLComment;
	}
	
	public ParserRule getXInvariantMLCommentRule() {
		return getXInvariantMLCommentAccess().getRule();
	}

	//XInvariantSLComment emachine::Invariant:
	//	{emachine::Invariant} name=XLABEL predicate=STRING theorem?='theorem'?
	//	comment=SL_COMMENT;
	public XInvariantSLCommentElements getXInvariantSLCommentAccess() {
		return pXInvariantSLComment;
	}
	
	public ParserRule getXInvariantSLCommentRule() {
		return getXInvariantSLCommentAccess().getRule();
	}

	//terminal XLABEL:
	//	'@' !':'+ ':';
	public TerminalRule getXLABELRule() {
		return tXLABEL;
	} 

	//XVariant emachine::Variant:
	//	XVariantNoComment | XVariantMLComment | XVariantSLComment;
	public XVariantElements getXVariantAccess() {
		return pXVariant;
	}
	
	public ParserRule getXVariantRule() {
		return getXVariantAccess().getRule();
	}

	//XVariantNoComment emachine::Variant:
	//	{emachine::Variant} expression=STRING;
	public XVariantNoCommentElements getXVariantNoCommentAccess() {
		return pXVariantNoComment;
	}
	
	public ParserRule getXVariantNoCommentRule() {
		return getXVariantNoCommentAccess().getRule();
	}

	//XVariantMLComment emachine::Variant:
	//	{emachine::Variant} comment=ML_COMMENT
	//	expression=STRING;
	public XVariantMLCommentElements getXVariantMLCommentAccess() {
		return pXVariantMLComment;
	}
	
	public ParserRule getXVariantMLCommentRule() {
		return getXVariantMLCommentAccess().getRule();
	}

	//XVariantSLComment emachine::Variant:
	//	{emachine::Variant} expression=STRING
	//	comment=SL_COMMENT;
	public XVariantSLCommentElements getXVariantSLCommentAccess() {
		return pXVariantSLComment;
	}
	
	public ParserRule getXVariantSLCommentRule() {
		return getXVariantSLCommentAccess().getRule();
	}

	//XEvent emachine::Event:
	//	XEventNoComment | XEventMLComment | XEventSLComment;
	public XEventElements getXEventAccess() {
		return pXEvent;
	}
	
	public ParserRule getXEventRule() {
		return getXEventAccess().getRule();
	}

	//XEventNoComment emachine::Event:
	//	{emachine::Event} name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=EventSync* ('refines'
	//	refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)?
	//	'begin'
	//	actions+=XAction+
	//	|
	//	'when'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?
	//	|
	//	'any'
	//	parameters+=XParameter+
	//	'where'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?)?
	//	'end';
	public XEventNoCommentElements getXEventNoCommentAccess() {
		return pXEventNoComment;
	}
	
	public ParserRule getXEventNoCommentRule() {
		return getXEventNoCommentAccess().getRule();
	}

	//XEventMLComment emachine::Event:
	//	{emachine::Event} comment=ML_COMMENT
	//	name=ID (extended?='extended'? & convergence=XConvergence?) extensions+=EventSync* ('refines'
	//	refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)?
	//	'begin'
	//	actions+=XAction+
	//	|
	//	'when'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?
	//	|
	//	'any'
	//	parameters+=XParameter+
	//	'where'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?)?
	//	'end';
	public XEventMLCommentElements getXEventMLCommentAccess() {
		return pXEventMLComment;
	}
	
	public ParserRule getXEventMLCommentRule() {
		return getXEventMLCommentAccess().getRule();
	}

	//XEventSLComment emachine::Event:
	//	{emachine::Event} name=ID (extended?='extended'? & convergence=XConvergence?) comment=SL_COMMENT
	//	extensions+=EventSync* ('refines' refines+=[emachine::Event]+)? (('with' witnesses+=XWitness+)?
	//	'begin'
	//	actions+=XAction+
	//	|
	//	'when'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?
	//	|
	//	'any'
	//	parameters+=XParameter+
	//	'where'
	//	guards+=XGuard+ ('with' witnesses+=XWitness+)? ('then'
	//	actions+=XAction+)?)?
	//	'end';
	public XEventSLCommentElements getXEventSLCommentAccess() {
		return pXEventSLComment;
	}
	
	public ParserRule getXEventSLCommentRule() {
		return getXEventSLCommentAccess().getRule();
	}

	//EventSync einclusion::EventSynchronisation:
	//	{einclusion::EventSynchronisation} extensionId='synchronises' ((prefix=ID '.')? synchronisedEvent=[emachine::Event]);
	public EventSyncElements getEventSyncAccess() {
		return pEventSync;
	}
	
	public ParserRule getEventSyncRule() {
		return getEventSyncAccess().getRule();
	}

	//enum XConvergence returns emachine::Convergence:
	//	ordinary | convergent | anticipated;
	public XConvergenceElements getXConvergenceAccess() {
		return eXConvergence;
	}
	
	public EnumRule getXConvergenceRule() {
		return getXConvergenceAccess().getRule();
	}

	//XParameter emachine::Parameter:
	//	XParameterNoComment | XParameterMLComment | XParameterSLComment;
	public XParameterElements getXParameterAccess() {
		return pXParameter;
	}
	
	public ParserRule getXParameterRule() {
		return getXParameterAccess().getRule();
	}

	//XParameterNoComment emachine::Parameter:
	//	{emachine::Parameter} name=ID;
	public XParameterNoCommentElements getXParameterNoCommentAccess() {
		return pXParameterNoComment;
	}
	
	public ParserRule getXParameterNoCommentRule() {
		return getXParameterNoCommentAccess().getRule();
	}

	//XParameterMLComment emachine::Parameter:
	//	{emachine::Parameter} comment=ML_COMMENT
	//	name=ID;
	public XParameterMLCommentElements getXParameterMLCommentAccess() {
		return pXParameterMLComment;
	}
	
	public ParserRule getXParameterMLCommentRule() {
		return getXParameterMLCommentAccess().getRule();
	}

	//XParameterSLComment emachine::Parameter:
	//	{emachine::Parameter} name=ID
	//	comment=SL_COMMENT;
	public XParameterSLCommentElements getXParameterSLCommentAccess() {
		return pXParameterSLComment;
	}
	
	public ParserRule getXParameterSLCommentRule() {
		return getXParameterSLCommentAccess().getRule();
	}

	//XGuard emachine::Guard:
	//	XGuardNoComment | XGuardMLComment | XGuardSLComment;
	public XGuardElements getXGuardAccess() {
		return pXGuard;
	}
	
	public ParserRule getXGuardRule() {
		return getXGuardAccess().getRule();
	}

	//XGuardNoComment emachine::Guard:
	//	{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'?;
	public XGuardNoCommentElements getXGuardNoCommentAccess() {
		return pXGuardNoComment;
	}
	
	public ParserRule getXGuardNoCommentRule() {
		return getXGuardNoCommentAccess().getRule();
	}

	//XGuardMLComment emachine::Guard:
	//	{emachine::Guard} comment=ML_COMMENT
	//	name=XLABEL predicate=STRING theorem?='theorem'?;
	public XGuardMLCommentElements getXGuardMLCommentAccess() {
		return pXGuardMLComment;
	}
	
	public ParserRule getXGuardMLCommentRule() {
		return getXGuardMLCommentAccess().getRule();
	}

	//XGuardSLComment emachine::Guard:
	//	{emachine::Guard} name=XLABEL predicate=STRING theorem?='theorem'?
	//	comment=SL_COMMENT;
	public XGuardSLCommentElements getXGuardSLCommentAccess() {
		return pXGuardSLComment;
	}
	
	public ParserRule getXGuardSLCommentRule() {
		return getXGuardSLCommentAccess().getRule();
	}

	//XWitness emachine::Witness:
	//	XWitnessNoComment | XWitnessMLComment | XWitnessSLComment;
	public XWitnessElements getXWitnessAccess() {
		return pXWitness;
	}
	
	public ParserRule getXWitnessRule() {
		return getXWitnessAccess().getRule();
	}

	//XWitnessNoComment emachine::Witness:
	//	{emachine::Witness} name=XLABEL predicate=STRING;
	public XWitnessNoCommentElements getXWitnessNoCommentAccess() {
		return pXWitnessNoComment;
	}
	
	public ParserRule getXWitnessNoCommentRule() {
		return getXWitnessNoCommentAccess().getRule();
	}

	//XWitnessMLComment emachine::Witness:
	//	{emachine::Witness} comment=ML_COMMENT
	//	name=XLABEL predicate=STRING;
	public XWitnessMLCommentElements getXWitnessMLCommentAccess() {
		return pXWitnessMLComment;
	}
	
	public ParserRule getXWitnessMLCommentRule() {
		return getXWitnessMLCommentAccess().getRule();
	}

	//XWitnessSLComment emachine::Witness:
	//	{emachine::Witness} name=XLABEL predicate=STRING
	//	comment=SL_COMMENT;
	public XWitnessSLCommentElements getXWitnessSLCommentAccess() {
		return pXWitnessSLComment;
	}
	
	public ParserRule getXWitnessSLCommentRule() {
		return getXWitnessSLCommentAccess().getRule();
	}

	//XAction emachine::Action:
	//	XActionNoComment | XActionMLComment | XActionSLComment;
	public XActionElements getXActionAccess() {
		return pXAction;
	}
	
	public ParserRule getXActionRule() {
		return getXActionAccess().getRule();
	}

	//XActionNoComment emachine::Action:
	//	{emachine::Action} name=XLABEL action=STRING;
	public XActionNoCommentElements getXActionNoCommentAccess() {
		return pXActionNoComment;
	}
	
	public ParserRule getXActionNoCommentRule() {
		return getXActionNoCommentAccess().getRule();
	}

	//XActionMLComment emachine::Action:
	//	{emachine::Action} comment=ML_COMMENT
	//	name=XLABEL action=STRING;
	public XActionMLCommentElements getXActionMLCommentAccess() {
		return pXActionMLComment;
	}
	
	public ParserRule getXActionMLCommentRule() {
		return getXActionMLCommentAccess().getRule();
	}

	//XActionSLComment emachine::Action:
	//	{emachine::Action} name=XLABEL action=STRING
	//	comment=SL_COMMENT;
	public XActionSLCommentElements getXActionSLCommentAccess() {
		return pXActionSLComment;
	}
	
	public ParserRule getXActionSLCommentRule() {
		return getXActionSLCommentAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
