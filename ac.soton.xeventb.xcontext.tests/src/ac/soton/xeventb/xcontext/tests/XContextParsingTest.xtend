/*
 * generated by Xtext 2.11.0
 */
package ac.soton.xeventb.xcontext.tests

import ac.soton.xeventb.tests.common.AssertContextExtensions
import ac.soton.xeventb.tests.common.AssertExtensions
import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eventb.emf.core.context.Context
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(XContextInjectorProvider)
class XContextParsingTest {
	@Inject	extension ParseHelper<Context> parseHelper

	extension AssertExtensions = new AssertExtensions()
	extension AssertContextExtensions = new AssertContextExtensions()
	
	/**
	 * Manually register any EPackage required for running the tests.
	 */
	@Before
	def void registerEPackages() {
		registerContextEPackage
	}
	
	@Test
	def void testContextClauseSuccessful() {
		val testInput = 
		'''
			context c0
			end
		'''
		val result = testInput.parse
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		errors.assertEmpty
		Assert.assertTrue(result instanceof Context)
		Assert.assertEquals("c0", result.name)
	}

	@Test
	def void testContextClauseSuccessful_ML_COMMENT() {
		val testInput = 
		'''
			/* 
			 * Multi-line comments
			 */
			context c0
			end
		'''
		val result = testInput.parse
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		errors.assertEmpty
		Assert.assertTrue(result instanceof Context)
		result.assertContext("c0", "Multi-line comments")
	}

	@Test
	def void testContextClauseFailed_ErrornousName() {
		val testInput = 
		'''
			context 0c
			end
		'''
		val result = testInput.parse()
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		errors.assertNotEmpty
		errors.assertLength(1)
		errors.get(0).assertErrorDetails(
			"extraneous input '0' expecting RULE_ID", null, 9, 1)
		Assert.assertTrue(result instanceof Context)
	}

	@Test
	def void testSetsClauseSuccessful_1Set() {
		val testInput = 
		'''
			context c0
			sets S
			end
		'''
		val result = testInput.parse
		Assert.assertNotNull(result)
		val errors = result.eResource.errors
		errors.assertEmpty
		Assert.assertTrue(result instanceof Context)
		Assert.assertEquals("c0", result.name)
	}
}
